
THIRDPARTY_LWIP_RAW_BASIC_HTTP_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c2a8  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040c2a8  0040c2a8  0001c2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009e0  20400000  0040c2b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004068  204009e0  0040cc90  000209e0  2**3
                  ALLOC
  4 .stack        00000400  20404a48  00410cf8  000209e0  2**0
                  ALLOC
  5 .heap         00000200  20404e48  004110f8  000209e0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209e0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a0e  2**0
                  CONTENTS, READONLY
  8 .debug_info   0003e892  00000000  00000000  00020a67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00007dcf  00000000  00000000  0005f2f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00010efc  00000000  00000000  000670c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001340  00000000  00000000  00077fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001698  00000000  00000000  00079304  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002fd2f  00000000  00000000  0007a99c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002135e  00000000  00000000  000aa6cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009e484  00000000  00000000  000cba29  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003d84  00000000  00000000  00169eb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	48 4e 40 20 cd 10 40 00 cb 10 40 00 cb 10 40 00     HN@ ..@...@...@.
  400010:	cb 10 40 00 cb 10 40 00 cb 10 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	cb 10 40 00 cb 10 40 00 00 00 00 00 cb 10 40 00     ..@...@.......@.
  40003c:	cb 10 40 00 cb 10 40 00 cb 10 40 00 cb 10 40 00     ..@...@...@...@.
  40004c:	cb 10 40 00 cb 10 40 00 cb 10 40 00 cb 10 40 00     ..@...@...@...@.
  40005c:	cb 10 40 00 cb 10 40 00 00 00 00 00 4d 0d 40 00     ..@...@.....M.@.
  40006c:	61 0d 40 00 75 0d 40 00 cb 10 40 00 cb 10 40 00     a.@.u.@...@...@.
  40007c:	cb 10 40 00 89 0d 40 00 9d 0d 40 00 cb 10 40 00     ..@...@...@...@.
  40008c:	cb 10 40 00 cb 10 40 00 cb 10 40 00 cb 10 40 00     ..@...@...@...@.
  40009c:	e5 6e 40 00 cb 10 40 00 cb 10 40 00 cb 10 40 00     .n@...@...@...@.
  4000ac:	cb 10 40 00 cb 10 40 00 cb 10 40 00 cb 10 40 00     ..@...@...@...@.
  4000bc:	cb 10 40 00 cb 10 40 00 cb 10 40 00 cb 10 40 00     ..@...@...@...@.
  4000cc:	cb 10 40 00 cb 10 40 00 cb 10 40 00 cb 10 40 00     ..@...@...@...@.
  4000dc:	b9 67 40 00 cb 10 40 00 cb 10 40 00 cb 10 40 00     .g@...@...@...@.
  4000ec:	cb 10 40 00 cb 10 40 00 cb 10 40 00 cb 10 40 00     ..@...@...@...@.
  4000fc:	cb 10 40 00 cb 10 40 00 cb 10 40 00 cb 10 40 00     ..@...@...@...@.
  40010c:	cb 10 40 00 cb 10 40 00 cb 10 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 cb 10 40 00 cb 10 40 00 cb 10 40 00     ......@...@...@.
  40012c:	cb 10 40 00 cb 10 40 00 cb 10 40 00 cb 10 40 00     ..@...@...@...@.
  40013c:	cb 10 40 00 cb 10 40 00 cb 10 40 00 cb 10 40 00     ..@...@...@...@.
  40014c:	cb 10 40 00 cb 10 40 00 cb 10 40 00 cb 10 40 00     ..@...@...@...@.
  40015c:	cb 10 40 00 cb 10 40 00 cb 10 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009e0 	.word	0x204009e0
  400184:	00000000 	.word	0x00000000
  400188:	0040c2b0 	.word	0x0040c2b0

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0040c2b0 	.word	0x0040c2b0
  4001c8:	204009e4 	.word	0x204009e4
  4001cc:	0040c2b0 	.word	0x0040c2b0
  4001d0:	00000000 	.word	0x00000000

004001d4 <echo_accept>:
}


err_t
echo_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  4001d4:	b538      	push	{r3, r4, r5, lr}
  4001d6:	460c      	mov	r4, r1

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* commonly observed practive to call tcp_setprio(), why? */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
  4001d8:	2101      	movs	r1, #1
  4001da:	4620      	mov	r0, r4
  4001dc:	4b10      	ldr	r3, [pc, #64]	; (400220 <echo_accept+0x4c>)
  4001de:	4798      	blx	r3

  es = (struct echo_state *)mem_malloc(sizeof(struct echo_state));
  4001e0:	200c      	movs	r0, #12
  4001e2:	4b10      	ldr	r3, [pc, #64]	; (400224 <echo_accept+0x50>)
  4001e4:	4798      	blx	r3
  if (es != NULL)
  4001e6:	b1c0      	cbz	r0, 40021a <echo_accept+0x46>
  4001e8:	4601      	mov	r1, r0
  {
    es->state = ES_ACCEPTED;
  4001ea:	2301      	movs	r3, #1
  4001ec:	7003      	strb	r3, [r0, #0]
    es->pcb = newpcb;
  4001ee:	6044      	str	r4, [r0, #4]
    es->retries = 0;
  4001f0:	2500      	movs	r5, #0
  4001f2:	7045      	strb	r5, [r0, #1]
    es->p = NULL;
  4001f4:	6085      	str	r5, [r0, #8]
    /* pass newly allocated es to our callbacks */
    tcp_arg(newpcb, es);
  4001f6:	4620      	mov	r0, r4
  4001f8:	4b0b      	ldr	r3, [pc, #44]	; (400228 <echo_accept+0x54>)
  4001fa:	4798      	blx	r3
    tcp_recv(newpcb, echo_recv);
  4001fc:	490b      	ldr	r1, [pc, #44]	; (40022c <echo_accept+0x58>)
  4001fe:	4620      	mov	r0, r4
  400200:	4b0b      	ldr	r3, [pc, #44]	; (400230 <echo_accept+0x5c>)
  400202:	4798      	blx	r3
    tcp_err(newpcb, echo_error);
  400204:	490b      	ldr	r1, [pc, #44]	; (400234 <echo_accept+0x60>)
  400206:	4620      	mov	r0, r4
  400208:	4b0b      	ldr	r3, [pc, #44]	; (400238 <echo_accept+0x64>)
  40020a:	4798      	blx	r3
    tcp_poll(newpcb, echo_poll, 0);
  40020c:	462a      	mov	r2, r5
  40020e:	490b      	ldr	r1, [pc, #44]	; (40023c <echo_accept+0x68>)
  400210:	4620      	mov	r0, r4
  400212:	4b0b      	ldr	r3, [pc, #44]	; (400240 <echo_accept+0x6c>)
  400214:	4798      	blx	r3
    ret_err = ERR_OK;
  400216:	4628      	mov	r0, r5
  400218:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    ret_err = ERR_MEM;
  40021a:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return ret_err;  
}
  40021e:	bd38      	pop	{r3, r4, r5, pc}
  400220:	00402fcd 	.word	0x00402fcd
  400224:	004024f1 	.word	0x004024f1
  400228:	00403005 	.word	0x00403005
  40022c:	0040037d 	.word	0x0040037d
  400230:	00403009 	.word	0x00403009
  400234:	00400245 	.word	0x00400245
  400238:	00403013 	.word	0x00403013
  40023c:	0040043d 	.word	0x0040043d
  400240:	0040301d 	.word	0x0040301d

00400244 <echo_error>:
  struct echo_state *es;

  LWIP_UNUSED_ARG(err);

  es = (struct echo_state *)arg;
  if (es != NULL)
  400244:	b118      	cbz	r0, 40024e <echo_error+0xa>
{
  400246:	b508      	push	{r3, lr}
  {
    mem_free(es);
  400248:	4b01      	ldr	r3, [pc, #4]	; (400250 <echo_error+0xc>)
  40024a:	4798      	blx	r3
  40024c:	bd08      	pop	{r3, pc}
  40024e:	4770      	bx	lr
  400250:	00402389 	.word	0x00402389

00400254 <echo_init>:
{
  400254:	b510      	push	{r4, lr}
  echo_pcb = tcp_new();
  400256:	4b0b      	ldr	r3, [pc, #44]	; (400284 <echo_init+0x30>)
  400258:	4798      	blx	r3
  40025a:	4b0b      	ldr	r3, [pc, #44]	; (400288 <echo_init+0x34>)
  40025c:	6018      	str	r0, [r3, #0]
  if (echo_pcb != NULL)
  40025e:	b128      	cbz	r0, 40026c <echo_init+0x18>
    err = tcp_bind(echo_pcb, IP_ADDR_ANY, 3000);
  400260:	f640 32b8 	movw	r2, #3000	; 0xbb8
  400264:	4909      	ldr	r1, [pc, #36]	; (40028c <echo_init+0x38>)
  400266:	4b0a      	ldr	r3, [pc, #40]	; (400290 <echo_init+0x3c>)
  400268:	4798      	blx	r3
    if (err == ERR_OK)
  40026a:	b100      	cbz	r0, 40026e <echo_init+0x1a>
  40026c:	bd10      	pop	{r4, pc}
      echo_pcb = tcp_listen(echo_pcb);
  40026e:	4c06      	ldr	r4, [pc, #24]	; (400288 <echo_init+0x34>)
  400270:	21ff      	movs	r1, #255	; 0xff
  400272:	6820      	ldr	r0, [r4, #0]
  400274:	4b07      	ldr	r3, [pc, #28]	; (400294 <echo_init+0x40>)
  400276:	4798      	blx	r3
  400278:	6020      	str	r0, [r4, #0]
      tcp_accept(echo_pcb, echo_accept);
  40027a:	4907      	ldr	r1, [pc, #28]	; (400298 <echo_init+0x44>)
  40027c:	4b07      	ldr	r3, [pc, #28]	; (40029c <echo_init+0x48>)
  40027e:	4798      	blx	r3
}
  400280:	e7f4      	b.n	40026c <echo_init+0x18>
  400282:	bf00      	nop
  400284:	004038d9 	.word	0x004038d9
  400288:	204009fc 	.word	0x204009fc
  40028c:	0040a764 	.word	0x0040a764
  400290:	00402d69 	.word	0x00402d69
  400294:	00402e21 	.word	0x00402e21
  400298:	004001d5 	.word	0x004001d5
  40029c:	00403019 	.word	0x00403019

004002a0 <echo_send>:
  return ERR_OK;
}

void
echo_send(struct tcp_pcb *tpcb, struct echo_state *es)
{
  4002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 
  while ((wr_err == ERR_OK) &&
         (es->p != NULL) && 
  4002a4:	688c      	ldr	r4, [r1, #8]
  while ((wr_err == ERR_OK) &&
  4002a6:	b36c      	cbz	r4, 400304 <echo_send+0x64>
         (es->p->len <= tcp_sndbuf(tpcb)))
  4002a8:	8962      	ldrh	r2, [r4, #10]
         (es->p != NULL) && 
  4002aa:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
  4002ae:	4293      	cmp	r3, r2
  4002b0:	d328      	bcc.n	400304 <echo_send+0x64>
  4002b2:	460f      	mov	r7, r1
  4002b4:	4606      	mov	r6, r0
  {
  ptr = es->p;

  /* enqueue data for transmission */
  wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
  4002b6:	f8df 8060 	ldr.w	r8, [pc, #96]	; 400318 <echo_send+0x78>
     /* continue with next pbuf in chain (if any) */
     es->p = ptr->next;
     if(es->p != NULL)
     {
       /* new reference! */
       pbuf_ref(es->p);
  4002ba:	f8df 9060 	ldr.w	r9, [pc, #96]	; 40031c <echo_send+0x7c>
     }
     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
  4002be:	4d14      	ldr	r5, [pc, #80]	; (400310 <echo_send+0x70>)
  4002c0:	e00e      	b.n	4002e0 <echo_send+0x40>
  4002c2:	4620      	mov	r0, r4
  4002c4:	47a8      	blx	r5
      }
      while(freed == 0);
  4002c6:	2800      	cmp	r0, #0
  4002c8:	d0fb      	beq.n	4002c2 <echo_send+0x22>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
  4002ca:	4651      	mov	r1, sl
  4002cc:	4630      	mov	r0, r6
  4002ce:	4b11      	ldr	r3, [pc, #68]	; (400314 <echo_send+0x74>)
  4002d0:	4798      	blx	r3
         (es->p != NULL) && 
  4002d2:	68bc      	ldr	r4, [r7, #8]
  while ((wr_err == ERR_OK) &&
  4002d4:	b18c      	cbz	r4, 4002fa <echo_send+0x5a>
         (es->p->len <= tcp_sndbuf(tpcb)))
  4002d6:	8962      	ldrh	r2, [r4, #10]
         (es->p != NULL) && 
  4002d8:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
  4002dc:	4293      	cmp	r3, r2
  4002de:	d311      	bcc.n	400304 <echo_send+0x64>
  wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
  4002e0:	2301      	movs	r3, #1
  4002e2:	6861      	ldr	r1, [r4, #4]
  4002e4:	4630      	mov	r0, r6
  4002e6:	47c0      	blx	r8
  if (wr_err == ERR_OK)
  4002e8:	b948      	cbnz	r0, 4002fe <echo_send+0x5e>
     plen = ptr->len;
  4002ea:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
     es->p = ptr->next;
  4002ee:	6820      	ldr	r0, [r4, #0]
  4002f0:	60b8      	str	r0, [r7, #8]
     if(es->p != NULL)
  4002f2:	2800      	cmp	r0, #0
  4002f4:	d0e5      	beq.n	4002c2 <echo_send+0x22>
       pbuf_ref(es->p);
  4002f6:	47c8      	blx	r9
  4002f8:	e7e3      	b.n	4002c2 <echo_send+0x22>
  4002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   }
   else if(wr_err == ERR_MEM)
  4002fe:	f1b0 3fff 	cmp.w	r0, #4294967295
  400302:	d001      	beq.n	400308 <echo_send+0x68>
  400304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
  400308:	60bc      	str	r4, [r7, #8]
  40030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40030e:	bf00      	nop
  400310:	00402861 	.word	0x00402861
  400314:	00402f31 	.word	0x00402f31
  400318:	004052c9 	.word	0x004052c9
  40031c:	00402a77 	.word	0x00402a77

00400320 <echo_close>:
  }
}

void
echo_close(struct tcp_pcb *tpcb, struct echo_state *es)
{
  400320:	b538      	push	{r3, r4, r5, lr}
  400322:	4604      	mov	r4, r0
  400324:	460d      	mov	r5, r1
  tcp_arg(tpcb, NULL);
  400326:	2100      	movs	r1, #0
  400328:	4b0d      	ldr	r3, [pc, #52]	; (400360 <echo_close+0x40>)
  40032a:	4798      	blx	r3
  tcp_sent(tpcb, NULL);
  40032c:	2100      	movs	r1, #0
  40032e:	4620      	mov	r0, r4
  400330:	4b0c      	ldr	r3, [pc, #48]	; (400364 <echo_close+0x44>)
  400332:	4798      	blx	r3
  tcp_recv(tpcb, NULL);
  400334:	2100      	movs	r1, #0
  400336:	4620      	mov	r0, r4
  400338:	4b0b      	ldr	r3, [pc, #44]	; (400368 <echo_close+0x48>)
  40033a:	4798      	blx	r3
  tcp_err(tpcb, NULL);
  40033c:	2100      	movs	r1, #0
  40033e:	4620      	mov	r0, r4
  400340:	4b0a      	ldr	r3, [pc, #40]	; (40036c <echo_close+0x4c>)
  400342:	4798      	blx	r3
  tcp_poll(tpcb, NULL, 0);
  400344:	2200      	movs	r2, #0
  400346:	4611      	mov	r1, r2
  400348:	4620      	mov	r0, r4
  40034a:	4b09      	ldr	r3, [pc, #36]	; (400370 <echo_close+0x50>)
  40034c:	4798      	blx	r3
  
  if (es != NULL)
  40034e:	b115      	cbz	r5, 400356 <echo_close+0x36>
  {
    mem_free(es);
  400350:	4628      	mov	r0, r5
  400352:	4b08      	ldr	r3, [pc, #32]	; (400374 <echo_close+0x54>)
  400354:	4798      	blx	r3
  }  
  tcp_close(tpcb);
  400356:	4620      	mov	r0, r4
  400358:	4b07      	ldr	r3, [pc, #28]	; (400378 <echo_close+0x58>)
  40035a:	4798      	blx	r3
  40035c:	bd38      	pop	{r3, r4, r5, pc}
  40035e:	bf00      	nop
  400360:	00403005 	.word	0x00403005
  400364:	0040300f 	.word	0x0040300f
  400368:	00403009 	.word	0x00403009
  40036c:	00403013 	.word	0x00403013
  400370:	0040301d 	.word	0x0040301d
  400374:	00402389 	.word	0x00402389
  400378:	0040392d 	.word	0x0040392d

0040037c <echo_recv>:
{
  40037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40037e:	4605      	mov	r5, r0
  400380:	460f      	mov	r7, r1
  if (p == NULL)
  400382:	b192      	cbz	r2, 4003aa <echo_recv+0x2e>
  400384:	461c      	mov	r4, r3
  400386:	4616      	mov	r6, r2
  else if(err != ERR_OK)
  400388:	bb1b      	cbnz	r3, 4003d2 <echo_recv+0x56>
  else if(es->state == ES_ACCEPTED)
  40038a:	7803      	ldrb	r3, [r0, #0]
  40038c:	2b01      	cmp	r3, #1
  40038e:	d027      	beq.n	4003e0 <echo_recv+0x64>
  else if (es->state == ES_RECEIVED)
  400390:	2b02      	cmp	r3, #2
  400392:	d032      	beq.n	4003fa <echo_recv+0x7e>
    tcp_recved(tpcb, p->tot_len);
  400394:	8911      	ldrh	r1, [r2, #8]
  400396:	4638      	mov	r0, r7
  400398:	4b21      	ldr	r3, [pc, #132]	; (400420 <echo_recv+0xa4>)
  40039a:	4798      	blx	r3
    es->p = NULL;
  40039c:	2300      	movs	r3, #0
  40039e:	60ab      	str	r3, [r5, #8]
    pbuf_free(p);
  4003a0:	4630      	mov	r0, r6
  4003a2:	4b20      	ldr	r3, [pc, #128]	; (400424 <echo_recv+0xa8>)
  4003a4:	4798      	blx	r3
    ret_err = ERR_OK;
  4003a6:	4620      	mov	r0, r4
}
  4003a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    es->state = ES_CLOSING;
  4003aa:	2303      	movs	r3, #3
  4003ac:	7003      	strb	r3, [r0, #0]
    if(es->p == NULL)
  4003ae:	6883      	ldr	r3, [r0, #8]
  4003b0:	b14b      	cbz	r3, 4003c6 <echo_recv+0x4a>
      tcp_sent(tpcb, echo_sent);
  4003b2:	491d      	ldr	r1, [pc, #116]	; (400428 <echo_recv+0xac>)
  4003b4:	4638      	mov	r0, r7
  4003b6:	4b1d      	ldr	r3, [pc, #116]	; (40042c <echo_recv+0xb0>)
  4003b8:	4798      	blx	r3
      echo_send(tpcb, es);
  4003ba:	4629      	mov	r1, r5
  4003bc:	4638      	mov	r0, r7
  4003be:	4b1c      	ldr	r3, [pc, #112]	; (400430 <echo_recv+0xb4>)
  4003c0:	4798      	blx	r3
    ret_err = ERR_OK;
  4003c2:	2000      	movs	r0, #0
  4003c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       echo_close(tpcb, es);
  4003c6:	4601      	mov	r1, r0
  4003c8:	4638      	mov	r0, r7
  4003ca:	4b1a      	ldr	r3, [pc, #104]	; (400434 <echo_recv+0xb8>)
  4003cc:	4798      	blx	r3
    ret_err = ERR_OK;
  4003ce:	2000      	movs	r0, #0
  4003d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      es->p = NULL;
  4003d2:	2300      	movs	r3, #0
  4003d4:	6083      	str	r3, [r0, #8]
      pbuf_free(p);
  4003d6:	4610      	mov	r0, r2
  4003d8:	4b12      	ldr	r3, [pc, #72]	; (400424 <echo_recv+0xa8>)
  4003da:	4798      	blx	r3
    ret_err = err;
  4003dc:	4620      	mov	r0, r4
  4003de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    es->state = ES_RECEIVED;
  4003e0:	2302      	movs	r3, #2
  4003e2:	7003      	strb	r3, [r0, #0]
    es->p = p;
  4003e4:	60aa      	str	r2, [r5, #8]
    tcp_sent(tpcb, echo_sent);
  4003e6:	4910      	ldr	r1, [pc, #64]	; (400428 <echo_recv+0xac>)
  4003e8:	4638      	mov	r0, r7
  4003ea:	4b10      	ldr	r3, [pc, #64]	; (40042c <echo_recv+0xb0>)
  4003ec:	4798      	blx	r3
    echo_send(tpcb, es);
  4003ee:	4629      	mov	r1, r5
  4003f0:	4638      	mov	r0, r7
  4003f2:	4b0f      	ldr	r3, [pc, #60]	; (400430 <echo_recv+0xb4>)
  4003f4:	4798      	blx	r3
    ret_err = ERR_OK;
  4003f6:	4620      	mov	r0, r4
  4003f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(es->p == NULL)
  4003fa:	6880      	ldr	r0, [r0, #8]
  4003fc:	b120      	cbz	r0, 400408 <echo_recv+0x8c>
      pbuf_chain(ptr,p);
  4003fe:	4611      	mov	r1, r2
  400400:	4b0d      	ldr	r3, [pc, #52]	; (400438 <echo_recv+0xbc>)
  400402:	4798      	blx	r3
    ret_err = ERR_OK;
  400404:	4620      	mov	r0, r4
  400406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      es->p = p;
  400408:	60aa      	str	r2, [r5, #8]
      tcp_sent(tpcb, echo_sent);
  40040a:	4907      	ldr	r1, [pc, #28]	; (400428 <echo_recv+0xac>)
  40040c:	4638      	mov	r0, r7
  40040e:	4b07      	ldr	r3, [pc, #28]	; (40042c <echo_recv+0xb0>)
  400410:	4798      	blx	r3
      echo_send(tpcb, es);
  400412:	4629      	mov	r1, r5
  400414:	4638      	mov	r0, r7
  400416:	4b06      	ldr	r3, [pc, #24]	; (400430 <echo_recv+0xb4>)
  400418:	4798      	blx	r3
    ret_err = ERR_OK;
  40041a:	4620      	mov	r0, r4
  40041c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40041e:	bf00      	nop
  400420:	00402f31 	.word	0x00402f31
  400424:	00402861 	.word	0x00402861
  400428:	00400495 	.word	0x00400495
  40042c:	0040300f 	.word	0x0040300f
  400430:	004002a1 	.word	0x004002a1
  400434:	00400321 	.word	0x00400321
  400438:	00402ad1 	.word	0x00402ad1

0040043c <echo_poll>:
{
  40043c:	b538      	push	{r3, r4, r5, lr}
  40043e:	460d      	mov	r5, r1
  if (es != NULL)
  400440:	b1b8      	cbz	r0, 400472 <echo_poll+0x36>
  400442:	4604      	mov	r4, r0
    if (es->p != NULL)
  400444:	6883      	ldr	r3, [r0, #8]
  400446:	b14b      	cbz	r3, 40045c <echo_poll+0x20>
      tcp_sent(tpcb, echo_sent);
  400448:	490d      	ldr	r1, [pc, #52]	; (400480 <echo_poll+0x44>)
  40044a:	4628      	mov	r0, r5
  40044c:	4b0d      	ldr	r3, [pc, #52]	; (400484 <echo_poll+0x48>)
  40044e:	4798      	blx	r3
      echo_send(tpcb, es);
  400450:	4621      	mov	r1, r4
  400452:	4628      	mov	r0, r5
  400454:	4b0c      	ldr	r3, [pc, #48]	; (400488 <echo_poll+0x4c>)
  400456:	4798      	blx	r3
    ret_err = ERR_OK;
  400458:	2000      	movs	r0, #0
  40045a:	bd38      	pop	{r3, r4, r5, pc}
      if(es->state == ES_CLOSING)
  40045c:	7803      	ldrb	r3, [r0, #0]
  40045e:	2b03      	cmp	r3, #3
  400460:	d001      	beq.n	400466 <echo_poll+0x2a>
    ret_err = ERR_OK;
  400462:	2000      	movs	r0, #0
}
  400464:	bd38      	pop	{r3, r4, r5, pc}
        echo_close(tpcb, es);
  400466:	4601      	mov	r1, r0
  400468:	4628      	mov	r0, r5
  40046a:	4b08      	ldr	r3, [pc, #32]	; (40048c <echo_poll+0x50>)
  40046c:	4798      	blx	r3
    ret_err = ERR_OK;
  40046e:	2000      	movs	r0, #0
  400470:	bd38      	pop	{r3, r4, r5, pc}
    tcp_abort(tpcb);
  400472:	4608      	mov	r0, r1
  400474:	4b06      	ldr	r3, [pc, #24]	; (400490 <echo_poll+0x54>)
  400476:	4798      	blx	r3
    ret_err = ERR_ABRT;
  400478:	f06f 0009 	mvn.w	r0, #9
  40047c:	bd38      	pop	{r3, r4, r5, pc}
  40047e:	bf00      	nop
  400480:	00400495 	.word	0x00400495
  400484:	0040300f 	.word	0x0040300f
  400488:	004002a1 	.word	0x004002a1
  40048c:	00400321 	.word	0x00400321
  400490:	00403759 	.word	0x00403759

00400494 <echo_sent>:
{
  400494:	b538      	push	{r3, r4, r5, lr}
  400496:	4604      	mov	r4, r0
  400498:	460d      	mov	r5, r1
  es->retries = 0;
  40049a:	2300      	movs	r3, #0
  40049c:	7043      	strb	r3, [r0, #1]
  if(es->p != NULL)
  40049e:	6883      	ldr	r3, [r0, #8]
  4004a0:	b14b      	cbz	r3, 4004b6 <echo_sent+0x22>
    tcp_sent(tpcb, echo_sent);
  4004a2:	4909      	ldr	r1, [pc, #36]	; (4004c8 <echo_sent+0x34>)
  4004a4:	4628      	mov	r0, r5
  4004a6:	4b09      	ldr	r3, [pc, #36]	; (4004cc <echo_sent+0x38>)
  4004a8:	4798      	blx	r3
    echo_send(tpcb, es);
  4004aa:	4621      	mov	r1, r4
  4004ac:	4628      	mov	r0, r5
  4004ae:	4b08      	ldr	r3, [pc, #32]	; (4004d0 <echo_sent+0x3c>)
  4004b0:	4798      	blx	r3
}
  4004b2:	2000      	movs	r0, #0
  4004b4:	bd38      	pop	{r3, r4, r5, pc}
    if(es->state == ES_CLOSING)
  4004b6:	7803      	ldrb	r3, [r0, #0]
  4004b8:	2b03      	cmp	r3, #3
  4004ba:	d1fa      	bne.n	4004b2 <echo_sent+0x1e>
      echo_close(tpcb, es);
  4004bc:	4601      	mov	r1, r0
  4004be:	4628      	mov	r0, r5
  4004c0:	4b04      	ldr	r3, [pc, #16]	; (4004d4 <echo_sent+0x40>)
  4004c2:	4798      	blx	r3
  4004c4:	e7f5      	b.n	4004b2 <echo_sent+0x1e>
  4004c6:	bf00      	nop
  4004c8:	00400495 	.word	0x00400495
  4004cc:	0040300f 	.word	0x0040300f
  4004d0:	004002a1 	.word	0x004002a1
  4004d4:	00400321 	.word	0x00400321

004004d8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004d8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  4004da:	4810      	ldr	r0, [pc, #64]	; (40051c <sysclk_init+0x44>)
  4004dc:	4b10      	ldr	r3, [pc, #64]	; (400520 <sysclk_init+0x48>)
  4004de:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4004e0:	213e      	movs	r1, #62	; 0x3e
  4004e2:	2000      	movs	r0, #0
  4004e4:	4b0f      	ldr	r3, [pc, #60]	; (400524 <sysclk_init+0x4c>)
  4004e6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4004e8:	4c0f      	ldr	r4, [pc, #60]	; (400528 <sysclk_init+0x50>)
  4004ea:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4004ec:	2800      	cmp	r0, #0
  4004ee:	d0fc      	beq.n	4004ea <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4004f0:	4b0e      	ldr	r3, [pc, #56]	; (40052c <sysclk_init+0x54>)
  4004f2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4004f4:	4a0e      	ldr	r2, [pc, #56]	; (400530 <sysclk_init+0x58>)
  4004f6:	4b0f      	ldr	r3, [pc, #60]	; (400534 <sysclk_init+0x5c>)
  4004f8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4004fa:	4c0f      	ldr	r4, [pc, #60]	; (400538 <sysclk_init+0x60>)
  4004fc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4004fe:	2800      	cmp	r0, #0
  400500:	d0fc      	beq.n	4004fc <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400502:	2002      	movs	r0, #2
  400504:	4b0d      	ldr	r3, [pc, #52]	; (40053c <sysclk_init+0x64>)
  400506:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400508:	2010      	movs	r0, #16
  40050a:	4b0d      	ldr	r3, [pc, #52]	; (400540 <sysclk_init+0x68>)
  40050c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40050e:	4b0d      	ldr	r3, [pc, #52]	; (400544 <sysclk_init+0x6c>)
  400510:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  400512:	480d      	ldr	r0, [pc, #52]	; (400548 <sysclk_init+0x70>)
  400514:	4b02      	ldr	r3, [pc, #8]	; (400520 <sysclk_init+0x48>)
  400516:	4798      	blx	r3
  400518:	bd10      	pop	{r4, pc}
  40051a:	bf00      	nop
  40051c:	08f0d180 	.word	0x08f0d180
  400520:	004012a1 	.word	0x004012a1
  400524:	00400e4d 	.word	0x00400e4d
  400528:	00400ea1 	.word	0x00400ea1
  40052c:	00400eb1 	.word	0x00400eb1
  400530:	20183f01 	.word	0x20183f01
  400534:	400e0600 	.word	0x400e0600
  400538:	00400ec1 	.word	0x00400ec1
  40053c:	00400db1 	.word	0x00400db1
  400540:	00400de9 	.word	0x00400de9
  400544:	00401195 	.word	0x00401195
  400548:	047868c0 	.word	0x047868c0

0040054c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40054c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400550:	b980      	cbnz	r0, 400574 <_read+0x28>
  400552:	460c      	mov	r4, r1
  400554:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400556:	2a00      	cmp	r2, #0
  400558:	dd0f      	ble.n	40057a <_read+0x2e>
  40055a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40055c:	4e08      	ldr	r6, [pc, #32]	; (400580 <_read+0x34>)
  40055e:	4d09      	ldr	r5, [pc, #36]	; (400584 <_read+0x38>)
  400560:	6830      	ldr	r0, [r6, #0]
  400562:	4621      	mov	r1, r4
  400564:	682b      	ldr	r3, [r5, #0]
  400566:	4798      	blx	r3
		ptr++;
  400568:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40056a:	42bc      	cmp	r4, r7
  40056c:	d1f8      	bne.n	400560 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40056e:	4640      	mov	r0, r8
  400570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400574:	f04f 38ff 	mov.w	r8, #4294967295
  400578:	e7f9      	b.n	40056e <_read+0x22>
	for (; len > 0; --len) {
  40057a:	4680      	mov	r8, r0
  40057c:	e7f7      	b.n	40056e <_read+0x22>
  40057e:	bf00      	nop
  400580:	20403994 	.word	0x20403994
  400584:	2040398c 	.word	0x2040398c

00400588 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400588:	3801      	subs	r0, #1
  40058a:	2802      	cmp	r0, #2
  40058c:	d815      	bhi.n	4005ba <_write+0x32>
{
  40058e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400592:	460e      	mov	r6, r1
  400594:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400596:	b19a      	cbz	r2, 4005c0 <_write+0x38>
  400598:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40059a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4005d4 <_write+0x4c>
  40059e:	4f0c      	ldr	r7, [pc, #48]	; (4005d0 <_write+0x48>)
  4005a0:	f8d8 0000 	ldr.w	r0, [r8]
  4005a4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4005a8:	683b      	ldr	r3, [r7, #0]
  4005aa:	4798      	blx	r3
  4005ac:	2800      	cmp	r0, #0
  4005ae:	db0a      	blt.n	4005c6 <_write+0x3e>
  4005b0:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4005b2:	3c01      	subs	r4, #1
  4005b4:	d1f4      	bne.n	4005a0 <_write+0x18>
  4005b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4005ba:	f04f 30ff 	mov.w	r0, #4294967295
  4005be:	4770      	bx	lr
	for (; len != 0; --len) {
  4005c0:	4610      	mov	r0, r2
  4005c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4005c6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4005ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4005ce:	bf00      	nop
  4005d0:	20403990 	.word	0x20403990
  4005d4:	20403994 	.word	0x20403994

004005d8 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4005d8:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4005da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4005de:	4b3c      	ldr	r3, [pc, #240]	; (4006d0 <board_init+0xf8>)
  4005e0:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4005e2:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
  4005e6:	4a3b      	ldr	r2, [pc, #236]	; (4006d4 <board_init+0xfc>)
  4005e8:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4005ea:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  4005ee:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4005f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4005f4:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4005f8:	4b37      	ldr	r3, [pc, #220]	; (4006d8 <board_init+0x100>)
  4005fa:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4005fe:	f022 0201 	bic.w	r2, r2, #1
  400602:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400606:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  40060a:	f022 0201 	bic.w	r2, r2, #1
  40060e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  400612:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400616:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40061a:	200a      	movs	r0, #10
  40061c:	4c2f      	ldr	r4, [pc, #188]	; (4006dc <board_init+0x104>)
  40061e:	47a0      	blx	r4
  400620:	200b      	movs	r0, #11
  400622:	47a0      	blx	r4
  400624:	200c      	movs	r0, #12
  400626:	47a0      	blx	r4
  400628:	2010      	movs	r0, #16
  40062a:	47a0      	blx	r4
  40062c:	2011      	movs	r0, #17
  40062e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400630:	4b2b      	ldr	r3, [pc, #172]	; (4006e0 <board_init+0x108>)
  400632:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400636:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400638:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40063c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40063e:	4929      	ldr	r1, [pc, #164]	; (4006e4 <board_init+0x10c>)
  400640:	f44f 7200 	mov.w	r2, #512	; 0x200
  400644:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400646:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40064a:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40064c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40064e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400652:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400654:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400658:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40065a:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40065c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400660:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400662:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  400666:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400668:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40066a:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  40066e:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400670:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400674:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400678:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  40067c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400680:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400682:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400686:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400688:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40068a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40068e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400690:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400694:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400696:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400698:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40069c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40069e:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4006a0:	4a11      	ldr	r2, [pc, #68]	; (4006e8 <board_init+0x110>)
  4006a2:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4006a6:	f043 0310 	orr.w	r3, r3, #16
  4006aa:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4006ae:	4b0f      	ldr	r3, [pc, #60]	; (4006ec <board_init+0x114>)
  4006b0:	2210      	movs	r2, #16
  4006b2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4006b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006b8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4006ba:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4006bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4006c0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4006c2:	4311      	orrs	r1, r2
  4006c4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4006c6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4006c8:	4311      	orrs	r1, r2
  4006ca:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4006cc:	605a      	str	r2, [r3, #4]
  4006ce:	bd10      	pop	{r4, pc}
  4006d0:	400e1850 	.word	0x400e1850
  4006d4:	5a00080c 	.word	0x5a00080c
  4006d8:	e000ed00 	.word	0xe000ed00
  4006dc:	00400ed1 	.word	0x00400ed1
  4006e0:	400e0e00 	.word	0x400e0e00
  4006e4:	400e1200 	.word	0x400e1200
  4006e8:	40088000 	.word	0x40088000
  4006ec:	400e1000 	.word	0x400e1000

004006f0 <ethernet_phy_set_link>:
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_set_link(Gmac *p_gmac, uint8_t uc_phy_addr,
		uint8_t uc_apply_setting_flag)
{
  4006f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4006f2:	b083      	sub	sp, #12
  4006f4:	4604      	mov	r4, r0
  4006f6:	460f      	mov	r7, r1
  4006f8:	4616      	mov	r6, r2
 * \param uc_enable   0 to disable GMAC management, else to enable it.
 */
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  4006fa:	6803      	ldr	r3, [r0, #0]
  4006fc:	f043 0310 	orr.w	r3, r3, #16
  400700:	6003      	str	r3, [r0, #0]

	gmac_enable_management(p_gmac, true);

	uc_phy_address = uc_phy_addr;

	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_stat1);
  400702:	ab01      	add	r3, sp, #4
  400704:	2201      	movs	r2, #1
  400706:	4d36      	ldr	r5, [pc, #216]	; (4007e0 <ethernet_phy_set_link+0xf0>)
  400708:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  40070a:	b958      	cbnz	r0, 400724 <ethernet_phy_set_link+0x34>
		gmac_enable_management(p_gmac, false);

		return uc_rc;
	}

	if ((ul_stat1 & GMII_LINK_STATUS) == 0) {
  40070c:	9b01      	ldr	r3, [sp, #4]
  40070e:	f013 0f04 	tst.w	r3, #4
  400712:	d10d      	bne.n	400730 <ethernet_phy_set_link+0x40>
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400714:	6823      	ldr	r3, [r4, #0]
  400716:	f023 0310 	bic.w	r3, r3, #16
  40071a:	6023      	str	r3, [r4, #0]
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);

		return GMAC_INVALID;
  40071c:	23ff      	movs	r3, #255	; 0xff
	gmac_enable_full_duplex(p_gmac, uc_fd);

	/* Start the GMAC transfers */
	gmac_enable_management(p_gmac, false);
	return uc_rc;
}
  40071e:	4618      	mov	r0, r3
  400720:	b003      	add	sp, #12
  400722:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400724:	4603      	mov	r3, r0
  400726:	6822      	ldr	r2, [r4, #0]
  400728:	f022 0210 	bic.w	r2, r2, #16
  40072c:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40072e:	e7f6      	b.n	40071e <ethernet_phy_set_link+0x2e>
	if (uc_apply_setting_flag == 0) {
  400730:	b92e      	cbnz	r6, 40073e <ethernet_phy_set_link+0x4e>
  400732:	6823      	ldr	r3, [r4, #0]
  400734:	f023 0310 	bic.w	r3, r3, #16
  400738:	6023      	str	r3, [r4, #0]
		return uc_rc;
  40073a:	4633      	mov	r3, r6
  40073c:	e7ef      	b.n	40071e <ethernet_phy_set_link+0x2e>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_PCR1, &ul_stat2);
  40073e:	466b      	mov	r3, sp
  400740:	221e      	movs	r2, #30
  400742:	4639      	mov	r1, r7
  400744:	4620      	mov	r0, r4
  400746:	4d26      	ldr	r5, [pc, #152]	; (4007e0 <ethernet_phy_set_link+0xf0>)
  400748:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  40074a:	4603      	mov	r3, r0
  40074c:	b950      	cbnz	r0, 400764 <ethernet_phy_set_link+0x74>
	if ((ul_stat1 & GMII_100BASE_TX_FD) && (ul_stat2 & GMII_OMI_100BASE_TX_FD)) {
  40074e:	9a01      	ldr	r2, [sp, #4]
	if ((ul_stat1 & GMII_10BASE_T_FD) && (ul_stat2 & GMII_OMI_10BASE_T_FD)) {
  400750:	f412 5f80 	tst.w	r2, #4096	; 0x1000
  400754:	d00b      	beq.n	40076e <ethernet_phy_set_link+0x7e>
  400756:	9900      	ldr	r1, [sp, #0]
  400758:	f011 0f05 	tst.w	r1, #5
  40075c:	bf0c      	ite	eq
  40075e:	2101      	moveq	r1, #1
  400760:	2100      	movne	r1, #0
  400762:	e005      	b.n	400770 <ethernet_phy_set_link+0x80>
  400764:	6822      	ldr	r2, [r4, #0]
  400766:	f022 0210 	bic.w	r2, r2, #16
  40076a:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40076c:	e7d7      	b.n	40071e <ethernet_phy_set_link+0x2e>
  40076e:	2101      	movs	r1, #1
	if ((ul_stat1 & GMII_100BASE_TX_HD) && (ul_stat2 & GMII_OMI_100BASE_TX_HD)) {
  400770:	f412 5f00 	tst.w	r2, #8192	; 0x2000
  400774:	d003      	beq.n	40077e <ethernet_phy_set_link+0x8e>
  400776:	9800      	ldr	r0, [sp, #0]
  400778:	f010 0f02 	tst.w	r0, #2
  40077c:	d127      	bne.n	4007ce <ethernet_phy_set_link+0xde>
	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  40077e:	f412 6f00 	tst.w	r2, #2048	; 0x800
  400782:	d003      	beq.n	40078c <ethernet_phy_set_link+0x9c>
  400784:	9a00      	ldr	r2, [sp, #0]
  400786:	f012 0f01 	tst.w	r2, #1
  40078a:	d111      	bne.n	4007b0 <ethernet_phy_set_link+0xc0>
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
 */
static inline void gmac_set_speed(Gmac* p_gmac, uint8_t uc_speed)
{
	if (uc_speed) {
  40078c:	b191      	cbz	r1, 4007b4 <ethernet_phy_set_link+0xc4>
  40078e:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  400790:	6861      	ldr	r1, [r4, #4]
  400792:	f041 0101 	orr.w	r1, r1, #1
  400796:	6061      	str	r1, [r4, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable the Full-Duplex mode, else to enable it.
 */
static inline void gmac_enable_full_duplex(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
  400798:	b1a2      	cbz	r2, 4007c4 <ethernet_phy_set_link+0xd4>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  40079a:	6862      	ldr	r2, [r4, #4]
  40079c:	f042 0202 	orr.w	r2, r2, #2
  4007a0:	6062      	str	r2, [r4, #4]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4007a2:	6822      	ldr	r2, [r4, #0]
  4007a4:	f022 0210 	bic.w	r2, r2, #16
  4007a8:	6022      	str	r2, [r4, #0]
	return uc_rc;
  4007aa:	e7b8      	b.n	40071e <ethernet_phy_set_link+0x2e>
		uc_fd = false;
  4007ac:	461a      	mov	r2, r3
  4007ae:	e7ef      	b.n	400790 <ethernet_phy_set_link+0xa0>
		uc_fd = false;
  4007b0:	461a      	mov	r2, r3
  4007b2:	e000      	b.n	4007b6 <ethernet_phy_set_link+0xc6>
	if (uc_speed) {
  4007b4:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  4007b6:	6861      	ldr	r1, [r4, #4]
  4007b8:	f021 0101 	bic.w	r1, r1, #1
  4007bc:	6061      	str	r1, [r4, #4]
  4007be:	e7eb      	b.n	400798 <ethernet_phy_set_link+0xa8>
  4007c0:	461a      	mov	r2, r3
  4007c2:	e7f8      	b.n	4007b6 <ethernet_phy_set_link+0xc6>
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  4007c4:	6862      	ldr	r2, [r4, #4]
  4007c6:	f022 0202 	bic.w	r2, r2, #2
  4007ca:	6062      	str	r2, [r4, #4]
  4007cc:	e7e9      	b.n	4007a2 <ethernet_phy_set_link+0xb2>
	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  4007ce:	f412 6f00 	tst.w	r2, #2048	; 0x800
  4007d2:	d0eb      	beq.n	4007ac <ethernet_phy_set_link+0xbc>
  4007d4:	9a00      	ldr	r2, [sp, #0]
  4007d6:	f012 0f01 	tst.w	r2, #1
  4007da:	d1f1      	bne.n	4007c0 <ethernet_phy_set_link+0xd0>
		uc_fd = false;
  4007dc:	461a      	mov	r2, r3
  4007de:	e7d7      	b.n	400790 <ethernet_phy_set_link+0xa0>
  4007e0:	00400b51 	.word	0x00400b51

004007e4 <ethernet_phy_auto_negotiate>:
 * \param uc_phy_addr PHY address.
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_auto_negotiate(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  4007e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4007e8:	b082      	sub	sp, #8
  4007ea:	4604      	mov	r4, r0
  4007ec:	460d      	mov	r5, r1
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  4007ee:	6803      	ldr	r3, [r0, #0]
  4007f0:	f043 0310 	orr.w	r3, r3, #16
  4007f4:	6003      	str	r3, [r0, #0]
	uint8_t uc_rc;

	gmac_enable_management(p_gmac, true);

	/* Set up control register */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  4007f6:	ab01      	add	r3, sp, #4
  4007f8:	2200      	movs	r2, #0
  4007fa:	4e5d      	ldr	r6, [pc, #372]	; (400970 <ethernet_phy_auto_negotiate+0x18c>)
  4007fc:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  4007fe:	b140      	cbz	r0, 400812 <ethernet_phy_auto_negotiate+0x2e>
  400800:	4603      	mov	r3, r0
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400802:	6822      	ldr	r2, [r4, #0]
  400804:	f022 0210 	bic.w	r2, r2, #16
  400808:	6022      	str	r2, [r4, #0]
	gmac_enable_transmit(GMAC, true);
	gmac_enable_receive(GMAC, true);

	gmac_enable_management(p_gmac, false);
	return uc_rc;
}
  40080a:	4618      	mov	r0, r3
  40080c:	b002      	add	sp, #8
  40080e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ul_value &= ~(uint32_t)(GMII_LOOPBACK | GMII_POWER_DOWN);
  400812:	9b01      	ldr	r3, [sp, #4]
  400814:	f423 43b0 	bic.w	r3, r3, #22528	; 0x5800
	ul_value |= (uint32_t)GMII_ISOLATE; /* Electrically isolate PHY */
  400818:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  40081c:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  40081e:	2200      	movs	r2, #0
  400820:	4629      	mov	r1, r5
  400822:	4620      	mov	r0, r4
  400824:	4e53      	ldr	r6, [pc, #332]	; (400974 <ethernet_phy_auto_negotiate+0x190>)
  400826:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  400828:	4603      	mov	r3, r0
  40082a:	b120      	cbz	r0, 400836 <ethernet_phy_auto_negotiate+0x52>
  40082c:	6822      	ldr	r2, [r4, #0]
  40082e:	f022 0210 	bic.w	r2, r2, #16
  400832:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400834:	e7e9      	b.n	40080a <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_ANAR, ul_phy_anar);
  400836:	f240 13e1 	movw	r3, #481	; 0x1e1
  40083a:	2204      	movs	r2, #4
  40083c:	4629      	mov	r1, r5
  40083e:	4620      	mov	r0, r4
  400840:	4e4c      	ldr	r6, [pc, #304]	; (400974 <ethernet_phy_auto_negotiate+0x190>)
  400842:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  400844:	4603      	mov	r3, r0
  400846:	b120      	cbz	r0, 400852 <ethernet_phy_auto_negotiate+0x6e>
  400848:	6822      	ldr	r2, [r4, #0]
  40084a:	f022 0210 	bic.w	r2, r2, #16
  40084e:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400850:	e7db      	b.n	40080a <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  400852:	ab01      	add	r3, sp, #4
  400854:	2200      	movs	r2, #0
  400856:	4629      	mov	r1, r5
  400858:	4620      	mov	r0, r4
  40085a:	4e45      	ldr	r6, [pc, #276]	; (400970 <ethernet_phy_auto_negotiate+0x18c>)
  40085c:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  40085e:	4603      	mov	r3, r0
  400860:	b120      	cbz	r0, 40086c <ethernet_phy_auto_negotiate+0x88>
  400862:	6822      	ldr	r2, [r4, #0]
  400864:	f022 0210 	bic.w	r2, r2, #16
  400868:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40086a:	e7ce      	b.n	40080a <ethernet_phy_auto_negotiate+0x26>
	ul_value |= GMII_SPEED_SELECT | GMII_AUTONEG | GMII_DUPLEX_MODE;
  40086c:	9b01      	ldr	r3, [sp, #4]
  40086e:	f443 5344 	orr.w	r3, r3, #12544	; 0x3100
  400872:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  400874:	2200      	movs	r2, #0
  400876:	4629      	mov	r1, r5
  400878:	4620      	mov	r0, r4
  40087a:	4e3e      	ldr	r6, [pc, #248]	; (400974 <ethernet_phy_auto_negotiate+0x190>)
  40087c:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  40087e:	4603      	mov	r3, r0
  400880:	b120      	cbz	r0, 40088c <ethernet_phy_auto_negotiate+0xa8>
  400882:	6822      	ldr	r2, [r4, #0]
  400884:	f022 0210 	bic.w	r2, r2, #16
  400888:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40088a:	e7be      	b.n	40080a <ethernet_phy_auto_negotiate+0x26>
	ul_value &= ~(uint32_t)GMII_ISOLATE;
  40088c:	9b01      	ldr	r3, [sp, #4]
  40088e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  400892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  400896:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  400898:	2200      	movs	r2, #0
  40089a:	4629      	mov	r1, r5
  40089c:	4620      	mov	r0, r4
  40089e:	4e35      	ldr	r6, [pc, #212]	; (400974 <ethernet_phy_auto_negotiate+0x190>)
  4008a0:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  4008a2:	4603      	mov	r3, r0
  4008a4:	b9b0      	cbnz	r0, 4008d4 <ethernet_phy_auto_negotiate+0xf0>
  4008a6:	4e34      	ldr	r6, [pc, #208]	; (400978 <ethernet_phy_auto_negotiate+0x194>)
		uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMSR, &ul_value);
  4008a8:	f04f 0801 	mov.w	r8, #1
  4008ac:	4f30      	ldr	r7, [pc, #192]	; (400970 <ethernet_phy_auto_negotiate+0x18c>)
  4008ae:	ab01      	add	r3, sp, #4
  4008b0:	4642      	mov	r2, r8
  4008b2:	4629      	mov	r1, r5
  4008b4:	4620      	mov	r0, r4
  4008b6:	47b8      	blx	r7
		if (uc_rc != GMAC_OK) {
  4008b8:	4603      	mov	r3, r0
  4008ba:	b980      	cbnz	r0, 4008de <ethernet_phy_auto_negotiate+0xfa>
		if (ul_value & GMII_AUTONEG_COMP) {
  4008bc:	9b01      	ldr	r3, [sp, #4]
  4008be:	f013 0f20 	tst.w	r3, #32
  4008c2:	d111      	bne.n	4008e8 <ethernet_phy_auto_negotiate+0x104>
			if (++ul_retry_count >= ul_retry_max) {
  4008c4:	3e01      	subs	r6, #1
  4008c6:	d1f2      	bne.n	4008ae <ethernet_phy_auto_negotiate+0xca>
  4008c8:	6823      	ldr	r3, [r4, #0]
  4008ca:	f023 0310 	bic.w	r3, r3, #16
  4008ce:	6023      	str	r3, [r4, #0]
				return GMAC_TIMEOUT;
  4008d0:	2301      	movs	r3, #1
  4008d2:	e79a      	b.n	40080a <ethernet_phy_auto_negotiate+0x26>
  4008d4:	6822      	ldr	r2, [r4, #0]
  4008d6:	f022 0210 	bic.w	r2, r2, #16
  4008da:	6022      	str	r2, [r4, #0]
		return uc_rc;
  4008dc:	e795      	b.n	40080a <ethernet_phy_auto_negotiate+0x26>
  4008de:	6822      	ldr	r2, [r4, #0]
  4008e0:	f022 0210 	bic.w	r2, r2, #16
  4008e4:	6022      	str	r2, [r4, #0]
			return uc_rc;
  4008e6:	e790      	b.n	40080a <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_ANLPAR, &ul_phy_analpar);
  4008e8:	466b      	mov	r3, sp
  4008ea:	2205      	movs	r2, #5
  4008ec:	4629      	mov	r1, r5
  4008ee:	4620      	mov	r0, r4
  4008f0:	4d1f      	ldr	r5, [pc, #124]	; (400970 <ethernet_phy_auto_negotiate+0x18c>)
  4008f2:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  4008f4:	4603      	mov	r3, r0
  4008f6:	b980      	cbnz	r0, 40091a <ethernet_phy_auto_negotiate+0x136>
	if ((ul_phy_anar & ul_phy_analpar) & GMII_100TX_FDX) {
  4008f8:	9a00      	ldr	r2, [sp, #0]
  4008fa:	f412 7f80 	tst.w	r2, #256	; 0x100
  4008fe:	d113      	bne.n	400928 <ethernet_phy_auto_negotiate+0x144>
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_10_FDX) {
  400900:	f012 0f40 	tst.w	r2, #64	; 0x40
  400904:	d12c      	bne.n	400960 <ethernet_phy_auto_negotiate+0x17c>
	if (uc_speed) {
  400906:	f012 0f80 	tst.w	r2, #128	; 0x80
		uc_fd = false;
  40090a:	bf08      	it	eq
  40090c:	4602      	moveq	r2, r0
  40090e:	d109      	bne.n	400924 <ethernet_phy_auto_negotiate+0x140>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  400910:	6861      	ldr	r1, [r4, #4]
  400912:	f021 0101 	bic.w	r1, r1, #1
  400916:	6061      	str	r1, [r4, #4]
  400918:	e00b      	b.n	400932 <ethernet_phy_auto_negotiate+0x14e>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  40091a:	6822      	ldr	r2, [r4, #0]
  40091c:	f022 0210 	bic.w	r2, r2, #16
  400920:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400922:	e772      	b.n	40080a <ethernet_phy_auto_negotiate+0x26>
		uc_fd = false;
  400924:	4602      	mov	r2, r0
  400926:	e000      	b.n	40092a <ethernet_phy_auto_negotiate+0x146>
		uc_fd = true;
  400928:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  40092a:	6861      	ldr	r1, [r4, #4]
  40092c:	f041 0101 	orr.w	r1, r1, #1
  400930:	6061      	str	r1, [r4, #4]
	if (uc_enable) {
  400932:	b1ba      	cbz	r2, 400964 <ethernet_phy_auto_negotiate+0x180>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  400934:	6862      	ldr	r2, [r4, #4]
  400936:	f042 0202 	orr.w	r2, r2, #2
  40093a:	6062      	str	r2, [r4, #4]
			p_gmac->GMAC_UR |= GMAC_UR_RMII;
			break;

		case GMAC_PHY_RMII:
		default:
			p_gmac->GMAC_UR &= ~GMAC_UR_RMII;
  40093c:	68e2      	ldr	r2, [r4, #12]
  40093e:	f022 0201 	bic.w	r2, r2, #1
  400942:	60e2      	str	r2, [r4, #12]
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  400944:	4a0d      	ldr	r2, [pc, #52]	; (40097c <ethernet_phy_auto_negotiate+0x198>)
  400946:	6811      	ldr	r1, [r2, #0]
  400948:	f041 0108 	orr.w	r1, r1, #8
  40094c:	6011      	str	r1, [r2, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  40094e:	6811      	ldr	r1, [r2, #0]
  400950:	f041 0104 	orr.w	r1, r1, #4
  400954:	6011      	str	r1, [r2, #0]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400956:	6822      	ldr	r2, [r4, #0]
  400958:	f022 0210 	bic.w	r2, r2, #16
  40095c:	6022      	str	r2, [r4, #0]
	return uc_rc;
  40095e:	e754      	b.n	40080a <ethernet_phy_auto_negotiate+0x26>
		uc_fd = true;
  400960:	2201      	movs	r2, #1
  400962:	e7d5      	b.n	400910 <ethernet_phy_auto_negotiate+0x12c>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  400964:	6862      	ldr	r2, [r4, #4]
  400966:	f022 0202 	bic.w	r2, r2, #2
  40096a:	6062      	str	r2, [r4, #4]
  40096c:	e7e6      	b.n	40093c <ethernet_phy_auto_negotiate+0x158>
  40096e:	bf00      	nop
  400970:	00400b51 	.word	0x00400b51
  400974:	00400bb1 	.word	0x00400bb1
  400978:	000f4240 	.word	0x000f4240
  40097c:	40050000 	.word	0x40050000

00400980 <ethernet_phy_reset>:
 * \param uc_phy_addr PHY address.
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_reset(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  400980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400984:	b083      	sub	sp, #12
  400986:	4605      	mov	r5, r0
  400988:	4689      	mov	r9, r1
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  40098a:	6803      	ldr	r3, [r0, #0]
  40098c:	f043 0310 	orr.w	r3, r3, #16
  400990:	6003      	str	r3, [r0, #0]
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
	uint8_t uc_rc = GMAC_TIMEOUT;

	gmac_enable_management(p_gmac, true);

	ul_bmcr = GMII_RESET;
  400992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400996:	ae02      	add	r6, sp, #8
  400998:	f846 3d04 	str.w	r3, [r6, #-4]!
	gmac_phy_write(p_gmac, uc_phy_address, GMII_BMCR, ul_bmcr);
  40099c:	2200      	movs	r2, #0
  40099e:	4c0e      	ldr	r4, [pc, #56]	; (4009d8 <ethernet_phy_reset+0x58>)
  4009a0:	47a0      	blx	r4
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
  4009a2:	240a      	movs	r4, #10

	do {
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMCR, &ul_bmcr);
  4009a4:	f04f 0800 	mov.w	r8, #0
  4009a8:	4f0c      	ldr	r7, [pc, #48]	; (4009dc <ethernet_phy_reset+0x5c>)
  4009aa:	4633      	mov	r3, r6
  4009ac:	4642      	mov	r2, r8
  4009ae:	4649      	mov	r1, r9
  4009b0:	4628      	mov	r0, r5
  4009b2:	47b8      	blx	r7
		ul_timeout--;
	} while ((ul_bmcr & GMII_RESET) && ul_timeout);
  4009b4:	3c01      	subs	r4, #1
  4009b6:	bf14      	ite	ne
  4009b8:	2001      	movne	r0, #1
  4009ba:	2000      	moveq	r0, #0
  4009bc:	9b01      	ldr	r3, [sp, #4]
  4009be:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4009c2:	d001      	beq.n	4009c8 <ethernet_phy_reset+0x48>
  4009c4:	2800      	cmp	r0, #0
  4009c6:	d1f0      	bne.n	4009aa <ethernet_phy_reset+0x2a>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4009c8:	682b      	ldr	r3, [r5, #0]
  4009ca:	f023 0310 	bic.w	r3, r3, #16
  4009ce:	602b      	str	r3, [r5, #0]
	if (!ul_timeout) {
		uc_rc = GMAC_OK;
	}

	return (uc_rc);
}
  4009d0:	b003      	add	sp, #12
  4009d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4009d6:	bf00      	nop
  4009d8:	00400bb1 	.word	0x00400bb1
  4009dc:	00400b51 	.word	0x00400b51

004009e0 <ethernet_phy_init>:
{
  4009e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4009e4:	b085      	sub	sp, #20
  4009e6:	4606      	mov	r6, r0
  4009e8:	4688      	mov	r8, r1
  4009ea:	4615      	mov	r5, r2
	pio_set_output(PIN_GMAC_RESET_PIO, PIN_GMAC_RESET_MASK, 1,  false, true);
  4009ec:	2401      	movs	r4, #1
  4009ee:	9400      	str	r4, [sp, #0]
  4009f0:	2300      	movs	r3, #0
  4009f2:	4622      	mov	r2, r4
  4009f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4009f8:	4846      	ldr	r0, [pc, #280]	; (400b14 <ethernet_phy_init+0x134>)
  4009fa:	4f47      	ldr	r7, [pc, #284]	; (400b18 <ethernet_phy_init+0x138>)
  4009fc:	47b8      	blx	r7
	pio_set_input(PIN_GMAC_INT_PIO, PIN_GMAC_INT_MASK, PIO_PULLUP);
  4009fe:	4f47      	ldr	r7, [pc, #284]	; (400b1c <ethernet_phy_init+0x13c>)
  400a00:	4622      	mov	r2, r4
  400a02:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400a06:	4638      	mov	r0, r7
  400a08:	4c45      	ldr	r4, [pc, #276]	; (400b20 <ethernet_phy_init+0x140>)
  400a0a:	47a0      	blx	r4
	pio_set_input(PIN_GMAC_SIGDET_PIO, PIN_GMAC_SIGDET_MASK, PIO_DEFAULT);
  400a0c:	2200      	movs	r2, #0
  400a0e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400a12:	4638      	mov	r0, r7
  400a14:	47a0      	blx	r4
	pio_set_peripheral(PIN_GMAC_PIO, PIN_GMAC_PERIPH, PIN_GMAC_MASK);
  400a16:	f240 32ff 	movw	r2, #1023	; 0x3ff
  400a1a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a1e:	4841      	ldr	r0, [pc, #260]	; (400b24 <ethernet_phy_init+0x144>)
  400a20:	4b41      	ldr	r3, [pc, #260]	; (400b28 <ethernet_phy_init+0x148>)
  400a22:	4798      	blx	r3
	ethernet_phy_reset(GMAC,uc_phy_addr);
  400a24:	4641      	mov	r1, r8
  400a26:	4841      	ldr	r0, [pc, #260]	; (400b2c <ethernet_phy_init+0x14c>)
  400a28:	4b41      	ldr	r3, [pc, #260]	; (400b30 <ethernet_phy_init+0x150>)
  400a2a:	4798      	blx	r3
	if (ul_mck > GMAC_MCK_SPEED_240MHZ) {
  400a2c:	4b41      	ldr	r3, [pc, #260]	; (400b34 <ethernet_phy_init+0x154>)
  400a2e:	429d      	cmp	r5, r3
  400a30:	d85d      	bhi.n	400aee <ethernet_phy_init+0x10e>
	} else if (ul_mck > GMAC_MCK_SPEED_160MHZ) {
  400a32:	4b41      	ldr	r3, [pc, #260]	; (400b38 <ethernet_phy_init+0x158>)
  400a34:	429d      	cmp	r5, r3
  400a36:	d80f      	bhi.n	400a58 <ethernet_phy_init+0x78>
	} else if (ul_mck > GMAC_MCK_SPEED_120MHZ) {
  400a38:	4b40      	ldr	r3, [pc, #256]	; (400b3c <ethernet_phy_init+0x15c>)
  400a3a:	429d      	cmp	r5, r3
  400a3c:	d83e      	bhi.n	400abc <ethernet_phy_init+0xdc>
	} else if (ul_mck > GMAC_MCK_SPEED_80MHZ) {
  400a3e:	4b40      	ldr	r3, [pc, #256]	; (400b40 <ethernet_phy_init+0x160>)
  400a40:	429d      	cmp	r5, r3
  400a42:	d83e      	bhi.n	400ac2 <ethernet_phy_init+0xe2>
	} else if (ul_mck > GMAC_MCK_SPEED_40MHZ) {
  400a44:	4b3f      	ldr	r3, [pc, #252]	; (400b44 <ethernet_phy_init+0x164>)
  400a46:	429d      	cmp	r5, r3
  400a48:	d83e      	bhi.n	400ac8 <ethernet_phy_init+0xe8>
		ul_clk = GMAC_NCFGR_CLK_MCK_8;
  400a4a:	4b3f      	ldr	r3, [pc, #252]	; (400b48 <ethernet_phy_init+0x168>)
  400a4c:	429d      	cmp	r5, r3
  400a4e:	bf8c      	ite	hi
  400a50:	f44f 2380 	movhi.w	r3, #262144	; 0x40000
  400a54:	2300      	movls	r3, #0
  400a56:	e001      	b.n	400a5c <ethernet_phy_init+0x7c>
		ul_clk = GMAC_NCFGR_CLK_MCK_96;
  400a58:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
	p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CLK_Msk;
  400a5c:	6872      	ldr	r2, [r6, #4]
  400a5e:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
  400a62:	6072      	str	r2, [r6, #4]
	p_gmac->GMAC_NCFGR |= ul_clk;
  400a64:	6875      	ldr	r5, [r6, #4]
  400a66:	431d      	orrs	r5, r3
  400a68:	6075      	str	r5, [r6, #4]
	uint32_t ul_value = 0;
  400a6a:	ab04      	add	r3, sp, #16
  400a6c:	2200      	movs	r2, #0
  400a6e:	f843 2d04 	str.w	r2, [r3, #-4]!
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  400a72:	6832      	ldr	r2, [r6, #0]
  400a74:	f042 0210 	orr.w	r2, r2, #16
  400a78:	6032      	str	r2, [r6, #0]
	gmac_phy_read(p_gmac, uc_phy_addr, GMII_PHYID1, &ul_value);
  400a7a:	2202      	movs	r2, #2
  400a7c:	4641      	mov	r1, r8
  400a7e:	4630      	mov	r0, r6
  400a80:	4c32      	ldr	r4, [pc, #200]	; (400b4c <ethernet_phy_init+0x16c>)
  400a82:	47a0      	blx	r4
	if (ul_value != GMII_OUI_MSB) {
  400a84:	9b03      	ldr	r3, [sp, #12]
  400a86:	2b22      	cmp	r3, #34	; 0x22
  400a88:	d035      	beq.n	400af6 <ethernet_phy_init+0x116>
  400a8a:	4644      	mov	r4, r8
  400a8c:	2520      	movs	r5, #32
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  400a8e:	f04f 0902 	mov.w	r9, #2
  400a92:	4f2e      	ldr	r7, [pc, #184]	; (400b4c <ethernet_phy_init+0x16c>)
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
  400a94:	3401      	adds	r4, #1
  400a96:	f004 041f 	and.w	r4, r4, #31
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  400a9a:	ab03      	add	r3, sp, #12
  400a9c:	464a      	mov	r2, r9
  400a9e:	4621      	mov	r1, r4
  400aa0:	4630      	mov	r0, r6
  400aa2:	47b8      	blx	r7
			if (ul_value == GMII_OUI_MSB) {
  400aa4:	9b03      	ldr	r3, [sp, #12]
  400aa6:	2b22      	cmp	r3, #34	; 0x22
  400aa8:	d011      	beq.n	400ace <ethernet_phy_init+0xee>
  400aaa:	1e6b      	subs	r3, r5, #1
		for (uc_cnt = uc_start_addr; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
  400aac:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
  400ab0:	d1f0      	bne.n	400a94 <ethernet_phy_init+0xb4>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400ab2:	6833      	ldr	r3, [r6, #0]
  400ab4:	f023 0310 	bic.w	r3, r3, #16
  400ab8:	6033      	str	r3, [r6, #0]
  400aba:	e018      	b.n	400aee <ethernet_phy_init+0x10e>
		ul_clk = GMAC_NCFGR_CLK_MCK_64;
  400abc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  400ac0:	e7cc      	b.n	400a5c <ethernet_phy_init+0x7c>
		ul_clk = GMAC_NCFGR_CLK_MCK_48;
  400ac2:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  400ac6:	e7c9      	b.n	400a5c <ethernet_phy_init+0x7c>
		ul_clk = GMAC_NCFGR_CLK_MCK_32;
  400ac8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400acc:	e7c6      	b.n	400a5c <ethernet_phy_init+0x7c>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400ace:	6833      	ldr	r3, [r6, #0]
  400ad0:	f023 0310 	bic.w	r3, r3, #16
  400ad4:	6033      	str	r3, [r6, #0]
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  400ad6:	ab03      	add	r3, sp, #12
  400ad8:	2201      	movs	r2, #1
  400ada:	4621      	mov	r1, r4
  400adc:	4630      	mov	r0, r6
  400ade:	4d1b      	ldr	r5, [pc, #108]	; (400b4c <ethernet_phy_init+0x16c>)
  400ae0:	47a8      	blx	r5
	if (uc_phy != uc_phy_addr) {
  400ae2:	45a0      	cmp	r8, r4
  400ae4:	d003      	beq.n	400aee <ethernet_phy_init+0x10e>
		ethernet_phy_reset(p_gmac, uc_phy_addr);
  400ae6:	4641      	mov	r1, r8
  400ae8:	4630      	mov	r0, r6
  400aea:	4b11      	ldr	r3, [pc, #68]	; (400b30 <ethernet_phy_init+0x150>)
  400aec:	4798      	blx	r3
}
  400aee:	2000      	movs	r0, #0
  400af0:	b005      	add	sp, #20
  400af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400af6:	6833      	ldr	r3, [r6, #0]
  400af8:	f023 0310 	bic.w	r3, r3, #16
  400afc:	6033      	str	r3, [r6, #0]
	if (uc_rc != 0xFF) {
  400afe:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  400b02:	d0f4      	beq.n	400aee <ethernet_phy_init+0x10e>
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  400b04:	ab03      	add	r3, sp, #12
  400b06:	2201      	movs	r2, #1
  400b08:	4641      	mov	r1, r8
  400b0a:	4630      	mov	r0, r6
  400b0c:	4c0f      	ldr	r4, [pc, #60]	; (400b4c <ethernet_phy_init+0x16c>)
  400b0e:	47a0      	blx	r4
  400b10:	e7ed      	b.n	400aee <ethernet_phy_init+0x10e>
  400b12:	bf00      	nop
  400b14:	400e1200 	.word	0x400e1200
  400b18:	00400ccd 	.word	0x00400ccd
  400b1c:	400e0e00 	.word	0x400e0e00
  400b20:	00400c97 	.word	0x00400c97
  400b24:	400e1400 	.word	0x400e1400
  400b28:	00400c05 	.word	0x00400c05
  400b2c:	40050000 	.word	0x40050000
  400b30:	00400981 	.word	0x00400981
  400b34:	0e4e1c00 	.word	0x0e4e1c00
  400b38:	09896800 	.word	0x09896800
  400b3c:	07270e00 	.word	0x07270e00
  400b40:	04c4b400 	.word	0x04c4b400
  400b44:	02625a00 	.word	0x02625a00
  400b48:	01312d00 	.word	0x01312d00
  400b4c:	00400b51 	.word	0x00400b51

00400b50 <gmac_phy_read>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_read(Gmac* p_gmac, uint8_t uc_phy_address, uint8_t uc_address,
		uint32_t* p_value)
{
  400b50:	b410      	push	{r4}
  400b52:	b083      	sub	sp, #12
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  400b54:	6884      	ldr	r4, [r0, #8]
  400b56:	f014 0f04 	tst.w	r4, #4
  400b5a:	d0fb      	beq.n	400b54 <gmac_phy_read+0x4>
			| GMAC_MAN_REGA(uc_reg_addr)
  400b5c:	0492      	lsls	r2, r2, #18
  400b5e:	f402 04f8 	and.w	r4, r2, #8126464	; 0x7c0000
			| GMAC_MAN_DATA(us_data);
  400b62:	4a11      	ldr	r2, [pc, #68]	; (400ba8 <gmac_phy_read+0x58>)
  400b64:	4322      	orrs	r2, r4
			| GMAC_MAN_PHYA(uc_phy_addr)
  400b66:	05c9      	lsls	r1, r1, #23
  400b68:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
			| GMAC_MAN_DATA(us_data);
  400b6c:	430a      	orrs	r2, r1
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  400b6e:	6342      	str	r2, [r0, #52]	; 0x34
	volatile uint32_t ul_retry_count = 0;
  400b70:	2200      	movs	r2, #0
  400b72:	9201      	str	r2, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  400b74:	490d      	ldr	r1, [pc, #52]	; (400bac <gmac_phy_read+0x5c>)
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  400b76:	6882      	ldr	r2, [r0, #8]
	while (!gmac_is_phy_idle(p_gmac)) {
  400b78:	f012 0f04 	tst.w	r2, #4
  400b7c:	d107      	bne.n	400b8e <gmac_phy_read+0x3e>
		ul_retry_count++;
  400b7e:	9a01      	ldr	r2, [sp, #4]
  400b80:	3201      	adds	r2, #1
  400b82:	9201      	str	r2, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  400b84:	9a01      	ldr	r2, [sp, #4]
  400b86:	428a      	cmp	r2, r1
  400b88:	d9f5      	bls.n	400b76 <gmac_phy_read+0x26>
	gmac_maintain_phy(p_gmac, uc_phy_address, uc_address, 1, 0);

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
  400b8a:	2001      	movs	r0, #1
  400b8c:	e007      	b.n	400b9e <gmac_phy_read+0x4e>
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  400b8e:	6882      	ldr	r2, [r0, #8]
  400b90:	f012 0f04 	tst.w	r2, #4
  400b94:	d0fb      	beq.n	400b8e <gmac_phy_read+0x3e>
	return (uint16_t) (p_gmac->GMAC_MAN & GMAC_MAN_DATA_Msk);
  400b96:	6b42      	ldr	r2, [r0, #52]	; 0x34
	}
	*p_value = gmac_get_phy_data(p_gmac);
  400b98:	b292      	uxth	r2, r2
  400b9a:	601a      	str	r2, [r3, #0]
	return GMAC_OK;
  400b9c:	2000      	movs	r0, #0
}
  400b9e:	b003      	add	sp, #12
  400ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ba4:	4770      	bx	lr
  400ba6:	bf00      	nop
  400ba8:	60020000 	.word	0x60020000
  400bac:	000f423f 	.word	0x000f423f

00400bb0 <gmac_phy_write>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_write(Gmac* p_gmac, uint8_t uc_phy_address,
		uint8_t uc_address, uint32_t ul_value)
{
  400bb0:	b410      	push	{r4}
  400bb2:	b083      	sub	sp, #12
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  400bb4:	6884      	ldr	r4, [r0, #8]
  400bb6:	f014 0f04 	tst.w	r4, #4
  400bba:	d0fb      	beq.n	400bb4 <gmac_phy_write+0x4>
			| GMAC_MAN_REGA(uc_reg_addr)
  400bbc:	0492      	lsls	r2, r2, #18
  400bbe:	f402 04f8 	and.w	r4, r2, #8126464	; 0x7c0000
			| GMAC_MAN_DATA(us_data);
  400bc2:	4a0e      	ldr	r2, [pc, #56]	; (400bfc <gmac_phy_write+0x4c>)
  400bc4:	4322      	orrs	r2, r4
			| GMAC_MAN_PHYA(uc_phy_addr)
  400bc6:	05c9      	lsls	r1, r1, #23
  400bc8:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
			| GMAC_MAN_DATA(us_data);
  400bcc:	430a      	orrs	r2, r1
  400bce:	b29b      	uxth	r3, r3
  400bd0:	431a      	orrs	r2, r3
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  400bd2:	6342      	str	r2, [r0, #52]	; 0x34
	volatile uint32_t ul_retry_count = 0;
  400bd4:	2300      	movs	r3, #0
  400bd6:	9301      	str	r3, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  400bd8:	4a09      	ldr	r2, [pc, #36]	; (400c00 <gmac_phy_write+0x50>)
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  400bda:	6883      	ldr	r3, [r0, #8]
	while (!gmac_is_phy_idle(p_gmac)) {
  400bdc:	f013 0f04 	tst.w	r3, #4
  400be0:	d107      	bne.n	400bf2 <gmac_phy_write+0x42>
		ul_retry_count++;
  400be2:	9b01      	ldr	r3, [sp, #4]
  400be4:	3301      	adds	r3, #1
  400be6:	9301      	str	r3, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  400be8:	9b01      	ldr	r3, [sp, #4]
  400bea:	4293      	cmp	r3, r2
  400bec:	d9f5      	bls.n	400bda <gmac_phy_write+0x2a>
			return GMAC_TIMEOUT;
  400bee:	2001      	movs	r0, #1
  400bf0:	e000      	b.n	400bf4 <gmac_phy_write+0x44>
	return GMAC_OK;
  400bf2:	2000      	movs	r0, #0

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
	}
	return GMAC_OK;
}
  400bf4:	b003      	add	sp, #12
  400bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
  400bfa:	4770      	bx	lr
  400bfc:	50020000 	.word	0x50020000
  400c00:	000f423f 	.word	0x000f423f

00400c04 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400c04:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400c06:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400c0a:	d03a      	beq.n	400c82 <pio_set_peripheral+0x7e>
  400c0c:	d813      	bhi.n	400c36 <pio_set_peripheral+0x32>
  400c0e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400c12:	d025      	beq.n	400c60 <pio_set_peripheral+0x5c>
  400c14:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400c18:	d10a      	bne.n	400c30 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c1a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c1c:	4313      	orrs	r3, r2
  400c1e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400c20:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400c22:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400c24:	400b      	ands	r3, r1
  400c26:	ea23 0302 	bic.w	r3, r3, r2
  400c2a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400c2c:	6042      	str	r2, [r0, #4]
  400c2e:	4770      	bx	lr
	switch (ul_type) {
  400c30:	2900      	cmp	r1, #0
  400c32:	d1fb      	bne.n	400c2c <pio_set_peripheral+0x28>
  400c34:	4770      	bx	lr
  400c36:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400c3a:	d021      	beq.n	400c80 <pio_set_peripheral+0x7c>
  400c3c:	d809      	bhi.n	400c52 <pio_set_peripheral+0x4e>
  400c3e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400c42:	d1f3      	bne.n	400c2c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c44:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c46:	4313      	orrs	r3, r2
  400c48:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400c4a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400c4c:	4313      	orrs	r3, r2
  400c4e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400c50:	e7ec      	b.n	400c2c <pio_set_peripheral+0x28>
	switch (ul_type) {
  400c52:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400c56:	d013      	beq.n	400c80 <pio_set_peripheral+0x7c>
  400c58:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400c5c:	d010      	beq.n	400c80 <pio_set_peripheral+0x7c>
  400c5e:	e7e5      	b.n	400c2c <pio_set_peripheral+0x28>
{
  400c60:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c62:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400c64:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400c66:	43d3      	mvns	r3, r2
  400c68:	4021      	ands	r1, r4
  400c6a:	461c      	mov	r4, r3
  400c6c:	4019      	ands	r1, r3
  400c6e:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400c70:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400c72:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400c74:	400b      	ands	r3, r1
  400c76:	4023      	ands	r3, r4
  400c78:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400c7a:	6042      	str	r2, [r0, #4]
}
  400c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c80:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c82:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400c84:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400c86:	400b      	ands	r3, r1
  400c88:	ea23 0302 	bic.w	r3, r3, r2
  400c8c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400c8e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400c90:	4313      	orrs	r3, r2
  400c92:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400c94:	e7ca      	b.n	400c2c <pio_set_peripheral+0x28>

00400c96 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400c96:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400c98:	f012 0f01 	tst.w	r2, #1
  400c9c:	d10d      	bne.n	400cba <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400c9e:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400ca0:	f012 0f0a 	tst.w	r2, #10
  400ca4:	d00b      	beq.n	400cbe <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400ca6:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400ca8:	f012 0f02 	tst.w	r2, #2
  400cac:	d109      	bne.n	400cc2 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400cae:	f012 0f08 	tst.w	r2, #8
  400cb2:	d008      	beq.n	400cc6 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400cb4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400cb8:	e005      	b.n	400cc6 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400cba:	6641      	str	r1, [r0, #100]	; 0x64
  400cbc:	e7f0      	b.n	400ca0 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400cbe:	6241      	str	r1, [r0, #36]	; 0x24
  400cc0:	e7f2      	b.n	400ca8 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400cc2:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400cc6:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400cc8:	6001      	str	r1, [r0, #0]
  400cca:	4770      	bx	lr

00400ccc <pio_set_output>:
{
  400ccc:	b410      	push	{r4}
  400cce:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400cd0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400cd2:	b94c      	cbnz	r4, 400ce8 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400cd4:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400cd6:	b14b      	cbz	r3, 400cec <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400cd8:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400cda:	b94a      	cbnz	r2, 400cf0 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400cdc:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400cde:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400ce0:	6001      	str	r1, [r0, #0]
}
  400ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ce6:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400ce8:	6641      	str	r1, [r0, #100]	; 0x64
  400cea:	e7f4      	b.n	400cd6 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400cec:	6541      	str	r1, [r0, #84]	; 0x54
  400cee:	e7f4      	b.n	400cda <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400cf0:	6301      	str	r1, [r0, #48]	; 0x30
  400cf2:	e7f4      	b.n	400cde <pio_set_output+0x12>

00400cf4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400cf4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400cf6:	4770      	bx	lr

00400cf8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400cf8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400cfa:	4770      	bx	lr

00400cfc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400d00:	4604      	mov	r4, r0
  400d02:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400d04:	4b0e      	ldr	r3, [pc, #56]	; (400d40 <pio_handler_process+0x44>)
  400d06:	4798      	blx	r3
  400d08:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400d0a:	4620      	mov	r0, r4
  400d0c:	4b0d      	ldr	r3, [pc, #52]	; (400d44 <pio_handler_process+0x48>)
  400d0e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400d10:	4005      	ands	r5, r0
  400d12:	d013      	beq.n	400d3c <pio_handler_process+0x40>
  400d14:	4c0c      	ldr	r4, [pc, #48]	; (400d48 <pio_handler_process+0x4c>)
  400d16:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400d1a:	e003      	b.n	400d24 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400d1c:	42b4      	cmp	r4, r6
  400d1e:	d00d      	beq.n	400d3c <pio_handler_process+0x40>
  400d20:	3410      	adds	r4, #16
		while (status != 0) {
  400d22:	b15d      	cbz	r5, 400d3c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400d24:	6820      	ldr	r0, [r4, #0]
  400d26:	4540      	cmp	r0, r8
  400d28:	d1f8      	bne.n	400d1c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400d2a:	6861      	ldr	r1, [r4, #4]
  400d2c:	4229      	tst	r1, r5
  400d2e:	d0f5      	beq.n	400d1c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400d30:	68e3      	ldr	r3, [r4, #12]
  400d32:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400d34:	6863      	ldr	r3, [r4, #4]
  400d36:	ea25 0503 	bic.w	r5, r5, r3
  400d3a:	e7ef      	b.n	400d1c <pio_handler_process+0x20>
  400d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400d40:	00400cf5 	.word	0x00400cf5
  400d44:	00400cf9 	.word	0x00400cf9
  400d48:	20400a00 	.word	0x20400a00

00400d4c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400d4c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400d4e:	210a      	movs	r1, #10
  400d50:	4801      	ldr	r0, [pc, #4]	; (400d58 <PIOA_Handler+0xc>)
  400d52:	4b02      	ldr	r3, [pc, #8]	; (400d5c <PIOA_Handler+0x10>)
  400d54:	4798      	blx	r3
  400d56:	bd08      	pop	{r3, pc}
  400d58:	400e0e00 	.word	0x400e0e00
  400d5c:	00400cfd 	.word	0x00400cfd

00400d60 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400d60:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400d62:	210b      	movs	r1, #11
  400d64:	4801      	ldr	r0, [pc, #4]	; (400d6c <PIOB_Handler+0xc>)
  400d66:	4b02      	ldr	r3, [pc, #8]	; (400d70 <PIOB_Handler+0x10>)
  400d68:	4798      	blx	r3
  400d6a:	bd08      	pop	{r3, pc}
  400d6c:	400e1000 	.word	0x400e1000
  400d70:	00400cfd 	.word	0x00400cfd

00400d74 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400d74:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400d76:	210c      	movs	r1, #12
  400d78:	4801      	ldr	r0, [pc, #4]	; (400d80 <PIOC_Handler+0xc>)
  400d7a:	4b02      	ldr	r3, [pc, #8]	; (400d84 <PIOC_Handler+0x10>)
  400d7c:	4798      	blx	r3
  400d7e:	bd08      	pop	{r3, pc}
  400d80:	400e1200 	.word	0x400e1200
  400d84:	00400cfd 	.word	0x00400cfd

00400d88 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400d88:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400d8a:	2110      	movs	r1, #16
  400d8c:	4801      	ldr	r0, [pc, #4]	; (400d94 <PIOD_Handler+0xc>)
  400d8e:	4b02      	ldr	r3, [pc, #8]	; (400d98 <PIOD_Handler+0x10>)
  400d90:	4798      	blx	r3
  400d92:	bd08      	pop	{r3, pc}
  400d94:	400e1400 	.word	0x400e1400
  400d98:	00400cfd 	.word	0x00400cfd

00400d9c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400d9c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400d9e:	2111      	movs	r1, #17
  400da0:	4801      	ldr	r0, [pc, #4]	; (400da8 <PIOE_Handler+0xc>)
  400da2:	4b02      	ldr	r3, [pc, #8]	; (400dac <PIOE_Handler+0x10>)
  400da4:	4798      	blx	r3
  400da6:	bd08      	pop	{r3, pc}
  400da8:	400e1600 	.word	0x400e1600
  400dac:	00400cfd 	.word	0x00400cfd

00400db0 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400db0:	2803      	cmp	r0, #3
  400db2:	d011      	beq.n	400dd8 <pmc_mck_set_division+0x28>
  400db4:	2804      	cmp	r0, #4
  400db6:	d012      	beq.n	400dde <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400db8:	2802      	cmp	r0, #2
  400dba:	bf0c      	ite	eq
  400dbc:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400dc0:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400dc2:	4a08      	ldr	r2, [pc, #32]	; (400de4 <pmc_mck_set_division+0x34>)
  400dc4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400dca:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400dcc:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400dce:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400dd0:	f013 0f08 	tst.w	r3, #8
  400dd4:	d0fb      	beq.n	400dce <pmc_mck_set_division+0x1e>
}
  400dd6:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400dd8:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400ddc:	e7f1      	b.n	400dc2 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400dde:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400de2:	e7ee      	b.n	400dc2 <pmc_mck_set_division+0x12>
  400de4:	400e0600 	.word	0x400e0600

00400de8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400de8:	4a17      	ldr	r2, [pc, #92]	; (400e48 <pmc_switch_mck_to_pllack+0x60>)
  400dea:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400df0:	4318      	orrs	r0, r3
  400df2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400df4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400df6:	f013 0f08 	tst.w	r3, #8
  400dfa:	d10a      	bne.n	400e12 <pmc_switch_mck_to_pllack+0x2a>
  400dfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400e00:	4911      	ldr	r1, [pc, #68]	; (400e48 <pmc_switch_mck_to_pllack+0x60>)
  400e02:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400e04:	f012 0f08 	tst.w	r2, #8
  400e08:	d103      	bne.n	400e12 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400e0a:	3b01      	subs	r3, #1
  400e0c:	d1f9      	bne.n	400e02 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400e0e:	2001      	movs	r0, #1
  400e10:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400e12:	4a0d      	ldr	r2, [pc, #52]	; (400e48 <pmc_switch_mck_to_pllack+0x60>)
  400e14:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400e16:	f023 0303 	bic.w	r3, r3, #3
  400e1a:	f043 0302 	orr.w	r3, r3, #2
  400e1e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e20:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e22:	f013 0f08 	tst.w	r3, #8
  400e26:	d10a      	bne.n	400e3e <pmc_switch_mck_to_pllack+0x56>
  400e28:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400e2c:	4906      	ldr	r1, [pc, #24]	; (400e48 <pmc_switch_mck_to_pllack+0x60>)
  400e2e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400e30:	f012 0f08 	tst.w	r2, #8
  400e34:	d105      	bne.n	400e42 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400e36:	3b01      	subs	r3, #1
  400e38:	d1f9      	bne.n	400e2e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400e3a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400e3c:	4770      	bx	lr
	return 0;
  400e3e:	2000      	movs	r0, #0
  400e40:	4770      	bx	lr
  400e42:	2000      	movs	r0, #0
  400e44:	4770      	bx	lr
  400e46:	bf00      	nop
  400e48:	400e0600 	.word	0x400e0600

00400e4c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400e4c:	b9a0      	cbnz	r0, 400e78 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e4e:	480e      	ldr	r0, [pc, #56]	; (400e88 <pmc_switch_mainck_to_xtal+0x3c>)
  400e50:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400e52:	0209      	lsls	r1, r1, #8
  400e54:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400e56:	4a0d      	ldr	r2, [pc, #52]	; (400e8c <pmc_switch_mainck_to_xtal+0x40>)
  400e58:	401a      	ands	r2, r3
  400e5a:	4b0d      	ldr	r3, [pc, #52]	; (400e90 <pmc_switch_mainck_to_xtal+0x44>)
  400e5c:	4313      	orrs	r3, r2
  400e5e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e60:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400e62:	4602      	mov	r2, r0
  400e64:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e66:	f013 0f01 	tst.w	r3, #1
  400e6a:	d0fb      	beq.n	400e64 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400e6c:	4a06      	ldr	r2, [pc, #24]	; (400e88 <pmc_switch_mainck_to_xtal+0x3c>)
  400e6e:	6a11      	ldr	r1, [r2, #32]
  400e70:	4b08      	ldr	r3, [pc, #32]	; (400e94 <pmc_switch_mainck_to_xtal+0x48>)
  400e72:	430b      	orrs	r3, r1
  400e74:	6213      	str	r3, [r2, #32]
  400e76:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e78:	4903      	ldr	r1, [pc, #12]	; (400e88 <pmc_switch_mainck_to_xtal+0x3c>)
  400e7a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400e7c:	4a06      	ldr	r2, [pc, #24]	; (400e98 <pmc_switch_mainck_to_xtal+0x4c>)
  400e7e:	401a      	ands	r2, r3
  400e80:	4b06      	ldr	r3, [pc, #24]	; (400e9c <pmc_switch_mainck_to_xtal+0x50>)
  400e82:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e84:	620b      	str	r3, [r1, #32]
  400e86:	4770      	bx	lr
  400e88:	400e0600 	.word	0x400e0600
  400e8c:	ffc8fffc 	.word	0xffc8fffc
  400e90:	00370001 	.word	0x00370001
  400e94:	01370000 	.word	0x01370000
  400e98:	fec8fffc 	.word	0xfec8fffc
  400e9c:	01370002 	.word	0x01370002

00400ea0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400ea0:	4b02      	ldr	r3, [pc, #8]	; (400eac <pmc_osc_is_ready_mainck+0xc>)
  400ea2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400ea4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400ea8:	4770      	bx	lr
  400eaa:	bf00      	nop
  400eac:	400e0600 	.word	0x400e0600

00400eb0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400eb0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400eb4:	4b01      	ldr	r3, [pc, #4]	; (400ebc <pmc_disable_pllack+0xc>)
  400eb6:	629a      	str	r2, [r3, #40]	; 0x28
  400eb8:	4770      	bx	lr
  400eba:	bf00      	nop
  400ebc:	400e0600 	.word	0x400e0600

00400ec0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400ec0:	4b02      	ldr	r3, [pc, #8]	; (400ecc <pmc_is_locked_pllack+0xc>)
  400ec2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400ec4:	f000 0002 	and.w	r0, r0, #2
  400ec8:	4770      	bx	lr
  400eca:	bf00      	nop
  400ecc:	400e0600 	.word	0x400e0600

00400ed0 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  400ed0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400ed4:	4b05      	ldr	r3, [pc, #20]	; (400eec <pmc_enable_periph_clk+0x1c>)
  400ed6:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  400eda:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400ede:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  400ee2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400ee6:	2000      	movs	r0, #0
  400ee8:	4770      	bx	lr
  400eea:	bf00      	nop
  400eec:	400e0600 	.word	0x400e0600

00400ef0 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400ef0:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400ef2:	0189      	lsls	r1, r1, #6
  400ef4:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400ef6:	2402      	movs	r4, #2
  400ef8:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400efa:	f04f 31ff 	mov.w	r1, #4294967295
  400efe:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400f00:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400f02:	605a      	str	r2, [r3, #4]
}
  400f04:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f08:	4770      	bx	lr

00400f0a <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400f0a:	0189      	lsls	r1, r1, #6
  400f0c:	2305      	movs	r3, #5
  400f0e:	5043      	str	r3, [r0, r1]
  400f10:	4770      	bx	lr

00400f12 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400f12:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400f16:	61ca      	str	r2, [r1, #28]
  400f18:	4770      	bx	lr

00400f1a <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400f1a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400f1e:	624a      	str	r2, [r1, #36]	; 0x24
  400f20:	4770      	bx	lr

00400f22 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400f22:	b4f0      	push	{r4, r5, r6, r7}
  400f24:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400f26:	2402      	movs	r4, #2
  400f28:	9401      	str	r4, [sp, #4]
  400f2a:	2408      	movs	r4, #8
  400f2c:	9402      	str	r4, [sp, #8]
  400f2e:	2420      	movs	r4, #32
  400f30:	9403      	str	r4, [sp, #12]
  400f32:	2480      	movs	r4, #128	; 0x80
  400f34:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400f36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400f38:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400f3a:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400f3c:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400f40:	d814      	bhi.n	400f6c <tc_find_mck_divisor+0x4a>
  400f42:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400f44:	42a0      	cmp	r0, r4
  400f46:	d217      	bcs.n	400f78 <tc_find_mck_divisor+0x56>
  400f48:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400f4a:	af01      	add	r7, sp, #4
  400f4c:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400f50:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400f54:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400f56:	4284      	cmp	r4, r0
  400f58:	d30a      	bcc.n	400f70 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400f5a:	4286      	cmp	r6, r0
  400f5c:	d90d      	bls.n	400f7a <tc_find_mck_divisor+0x58>
			ul_index++) {
  400f5e:	3501      	adds	r5, #1
	for (ul_index = 0;
  400f60:	2d05      	cmp	r5, #5
  400f62:	d1f3      	bne.n	400f4c <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400f64:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400f66:	b006      	add	sp, #24
  400f68:	bcf0      	pop	{r4, r5, r6, r7}
  400f6a:	4770      	bx	lr
			return 0;
  400f6c:	2000      	movs	r0, #0
  400f6e:	e7fa      	b.n	400f66 <tc_find_mck_divisor+0x44>
  400f70:	2000      	movs	r0, #0
  400f72:	e7f8      	b.n	400f66 <tc_find_mck_divisor+0x44>
	return 1;
  400f74:	2001      	movs	r0, #1
  400f76:	e7f6      	b.n	400f66 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400f78:	2500      	movs	r5, #0
	if (p_uldiv) {
  400f7a:	b12a      	cbz	r2, 400f88 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400f7c:	a906      	add	r1, sp, #24
  400f7e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400f82:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400f86:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400f88:	2b00      	cmp	r3, #0
  400f8a:	d0f3      	beq.n	400f74 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400f8c:	601d      	str	r5, [r3, #0]
	return 1;
  400f8e:	2001      	movs	r0, #1
  400f90:	e7e9      	b.n	400f66 <tc_find_mck_divisor+0x44>

00400f92 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400f92:	6943      	ldr	r3, [r0, #20]
  400f94:	f013 0f02 	tst.w	r3, #2
  400f98:	d002      	beq.n	400fa0 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400f9a:	61c1      	str	r1, [r0, #28]
	return 0;
  400f9c:	2000      	movs	r0, #0
  400f9e:	4770      	bx	lr
		return 1;
  400fa0:	2001      	movs	r0, #1
}
  400fa2:	4770      	bx	lr

00400fa4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400fa4:	6943      	ldr	r3, [r0, #20]
  400fa6:	f013 0f01 	tst.w	r3, #1
  400faa:	d003      	beq.n	400fb4 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400fac:	6983      	ldr	r3, [r0, #24]
  400fae:	700b      	strb	r3, [r1, #0]
	return 0;
  400fb0:	2000      	movs	r0, #0
  400fb2:	4770      	bx	lr
		return 1;
  400fb4:	2001      	movs	r0, #1
}
  400fb6:	4770      	bx	lr

00400fb8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400fb8:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400fba:	010b      	lsls	r3, r1, #4
  400fbc:	4293      	cmp	r3, r2
  400fbe:	d914      	bls.n	400fea <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400fc0:	00c9      	lsls	r1, r1, #3
  400fc2:	084b      	lsrs	r3, r1, #1
  400fc4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400fc8:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400fcc:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400fce:	1e5c      	subs	r4, r3, #1
  400fd0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400fd4:	428c      	cmp	r4, r1
  400fd6:	d901      	bls.n	400fdc <usart_set_async_baudrate+0x24>
		return 1;
  400fd8:	2001      	movs	r0, #1
  400fda:	e017      	b.n	40100c <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400fdc:	6841      	ldr	r1, [r0, #4]
  400fde:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400fe2:	6041      	str	r1, [r0, #4]
  400fe4:	e00c      	b.n	401000 <usart_set_async_baudrate+0x48>
		return 1;
  400fe6:	2001      	movs	r0, #1
  400fe8:	e010      	b.n	40100c <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400fea:	0859      	lsrs	r1, r3, #1
  400fec:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400ff0:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400ff4:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400ff6:	1e5c      	subs	r4, r3, #1
  400ff8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400ffc:	428c      	cmp	r4, r1
  400ffe:	d8f2      	bhi.n	400fe6 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401000:	0412      	lsls	r2, r2, #16
  401002:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401006:	431a      	orrs	r2, r3
  401008:	6202      	str	r2, [r0, #32]

	return 0;
  40100a:	2000      	movs	r0, #0
}
  40100c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401010:	4770      	bx	lr
	...

00401014 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401014:	4b08      	ldr	r3, [pc, #32]	; (401038 <usart_reset+0x24>)
  401016:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40101a:	2300      	movs	r3, #0
  40101c:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40101e:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401020:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401022:	2388      	movs	r3, #136	; 0x88
  401024:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401026:	2324      	movs	r3, #36	; 0x24
  401028:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40102a:	f44f 7380 	mov.w	r3, #256	; 0x100
  40102e:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401030:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401034:	6003      	str	r3, [r0, #0]
  401036:	4770      	bx	lr
  401038:	55534100 	.word	0x55534100

0040103c <usart_init_rs232>:
{
  40103c:	b570      	push	{r4, r5, r6, lr}
  40103e:	4605      	mov	r5, r0
  401040:	460c      	mov	r4, r1
  401042:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401044:	4b0f      	ldr	r3, [pc, #60]	; (401084 <usart_init_rs232+0x48>)
  401046:	4798      	blx	r3
	ul_reg_val = 0;
  401048:	2200      	movs	r2, #0
  40104a:	4b0f      	ldr	r3, [pc, #60]	; (401088 <usart_init_rs232+0x4c>)
  40104c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40104e:	b1a4      	cbz	r4, 40107a <usart_init_rs232+0x3e>
  401050:	4632      	mov	r2, r6
  401052:	6821      	ldr	r1, [r4, #0]
  401054:	4628      	mov	r0, r5
  401056:	4b0d      	ldr	r3, [pc, #52]	; (40108c <usart_init_rs232+0x50>)
  401058:	4798      	blx	r3
  40105a:	4602      	mov	r2, r0
  40105c:	b978      	cbnz	r0, 40107e <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40105e:	6863      	ldr	r3, [r4, #4]
  401060:	68a1      	ldr	r1, [r4, #8]
  401062:	430b      	orrs	r3, r1
  401064:	6921      	ldr	r1, [r4, #16]
  401066:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401068:	68e1      	ldr	r1, [r4, #12]
  40106a:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40106c:	4906      	ldr	r1, [pc, #24]	; (401088 <usart_init_rs232+0x4c>)
  40106e:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401070:	6869      	ldr	r1, [r5, #4]
  401072:	430b      	orrs	r3, r1
  401074:	606b      	str	r3, [r5, #4]
}
  401076:	4610      	mov	r0, r2
  401078:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  40107a:	2201      	movs	r2, #1
  40107c:	e7fb      	b.n	401076 <usart_init_rs232+0x3a>
  40107e:	2201      	movs	r2, #1
  401080:	e7f9      	b.n	401076 <usart_init_rs232+0x3a>
  401082:	bf00      	nop
  401084:	00401015 	.word	0x00401015
  401088:	20400a70 	.word	0x20400a70
  40108c:	00400fb9 	.word	0x00400fb9

00401090 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401090:	2340      	movs	r3, #64	; 0x40
  401092:	6003      	str	r3, [r0, #0]
  401094:	4770      	bx	lr

00401096 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401096:	2310      	movs	r3, #16
  401098:	6003      	str	r3, [r0, #0]
  40109a:	4770      	bx	lr

0040109c <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40109c:	6943      	ldr	r3, [r0, #20]
  40109e:	f013 0f02 	tst.w	r3, #2
  4010a2:	d004      	beq.n	4010ae <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4010a4:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4010a8:	61c1      	str	r1, [r0, #28]
	return 0;
  4010aa:	2000      	movs	r0, #0
  4010ac:	4770      	bx	lr
		return 1;
  4010ae:	2001      	movs	r0, #1
}
  4010b0:	4770      	bx	lr

004010b2 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4010b2:	6943      	ldr	r3, [r0, #20]
  4010b4:	f013 0f01 	tst.w	r3, #1
  4010b8:	d005      	beq.n	4010c6 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4010ba:	6983      	ldr	r3, [r0, #24]
  4010bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4010c0:	600b      	str	r3, [r1, #0]
	return 0;
  4010c2:	2000      	movs	r0, #0
  4010c4:	4770      	bx	lr
		return 1;
  4010c6:	2001      	movs	r0, #1
}
  4010c8:	4770      	bx	lr

004010ca <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4010ca:	e7fe      	b.n	4010ca <Dummy_Handler>

004010cc <Reset_Handler>:
{
  4010cc:	b500      	push	{lr}
  4010ce:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4010d0:	4b25      	ldr	r3, [pc, #148]	; (401168 <Reset_Handler+0x9c>)
  4010d2:	4a26      	ldr	r2, [pc, #152]	; (40116c <Reset_Handler+0xa0>)
  4010d4:	429a      	cmp	r2, r3
  4010d6:	d010      	beq.n	4010fa <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4010d8:	4b25      	ldr	r3, [pc, #148]	; (401170 <Reset_Handler+0xa4>)
  4010da:	4a23      	ldr	r2, [pc, #140]	; (401168 <Reset_Handler+0x9c>)
  4010dc:	429a      	cmp	r2, r3
  4010de:	d20c      	bcs.n	4010fa <Reset_Handler+0x2e>
  4010e0:	3b01      	subs	r3, #1
  4010e2:	1a9b      	subs	r3, r3, r2
  4010e4:	f023 0303 	bic.w	r3, r3, #3
  4010e8:	3304      	adds	r3, #4
  4010ea:	4413      	add	r3, r2
  4010ec:	491f      	ldr	r1, [pc, #124]	; (40116c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4010ee:	f851 0b04 	ldr.w	r0, [r1], #4
  4010f2:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4010f6:	429a      	cmp	r2, r3
  4010f8:	d1f9      	bne.n	4010ee <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4010fa:	4b1e      	ldr	r3, [pc, #120]	; (401174 <Reset_Handler+0xa8>)
  4010fc:	4a1e      	ldr	r2, [pc, #120]	; (401178 <Reset_Handler+0xac>)
  4010fe:	429a      	cmp	r2, r3
  401100:	d20a      	bcs.n	401118 <Reset_Handler+0x4c>
  401102:	3b01      	subs	r3, #1
  401104:	1a9b      	subs	r3, r3, r2
  401106:	f023 0303 	bic.w	r3, r3, #3
  40110a:	3304      	adds	r3, #4
  40110c:	4413      	add	r3, r2
                *pDest++ = 0;
  40110e:	2100      	movs	r1, #0
  401110:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401114:	4293      	cmp	r3, r2
  401116:	d1fb      	bne.n	401110 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401118:	4a18      	ldr	r2, [pc, #96]	; (40117c <Reset_Handler+0xb0>)
  40111a:	4b19      	ldr	r3, [pc, #100]	; (401180 <Reset_Handler+0xb4>)
  40111c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401120:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401122:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401126:	fab3 f383 	clz	r3, r3
  40112a:	095b      	lsrs	r3, r3, #5
  40112c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40112e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  401130:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401134:	2200      	movs	r2, #0
  401136:	4b13      	ldr	r3, [pc, #76]	; (401184 <Reset_Handler+0xb8>)
  401138:	701a      	strb	r2, [r3, #0]
	return flags;
  40113a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  40113c:	4a12      	ldr	r2, [pc, #72]	; (401188 <Reset_Handler+0xbc>)
  40113e:	6813      	ldr	r3, [r2, #0]
  401140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401144:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  401146:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40114a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40114e:	b129      	cbz	r1, 40115c <Reset_Handler+0x90>
		cpu_irq_enable();
  401150:	2201      	movs	r2, #1
  401152:	4b0c      	ldr	r3, [pc, #48]	; (401184 <Reset_Handler+0xb8>)
  401154:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  401156:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40115a:	b662      	cpsie	i
        __libc_init_array();
  40115c:	4b0b      	ldr	r3, [pc, #44]	; (40118c <Reset_Handler+0xc0>)
  40115e:	4798      	blx	r3
        main();
  401160:	4b0b      	ldr	r3, [pc, #44]	; (401190 <Reset_Handler+0xc4>)
  401162:	4798      	blx	r3
  401164:	e7fe      	b.n	401164 <Reset_Handler+0x98>
  401166:	bf00      	nop
  401168:	20400000 	.word	0x20400000
  40116c:	0040c2b0 	.word	0x0040c2b0
  401170:	204009e0 	.word	0x204009e0
  401174:	20404a48 	.word	0x20404a48
  401178:	204009e0 	.word	0x204009e0
  40117c:	e000ed00 	.word	0xe000ed00
  401180:	00400000 	.word	0x00400000
  401184:	20400000 	.word	0x20400000
  401188:	e000ed88 	.word	0xe000ed88
  40118c:	00407239 	.word	0x00407239
  401190:	0040715d 	.word	0x0040715d

00401194 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401194:	4b3b      	ldr	r3, [pc, #236]	; (401284 <SystemCoreClockUpdate+0xf0>)
  401196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401198:	f003 0303 	and.w	r3, r3, #3
  40119c:	2b01      	cmp	r3, #1
  40119e:	d01d      	beq.n	4011dc <SystemCoreClockUpdate+0x48>
  4011a0:	b183      	cbz	r3, 4011c4 <SystemCoreClockUpdate+0x30>
  4011a2:	2b02      	cmp	r3, #2
  4011a4:	d036      	beq.n	401214 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4011a6:	4b37      	ldr	r3, [pc, #220]	; (401284 <SystemCoreClockUpdate+0xf0>)
  4011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4011aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011ae:	2b70      	cmp	r3, #112	; 0x70
  4011b0:	d05f      	beq.n	401272 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4011b2:	4b34      	ldr	r3, [pc, #208]	; (401284 <SystemCoreClockUpdate+0xf0>)
  4011b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4011b6:	4934      	ldr	r1, [pc, #208]	; (401288 <SystemCoreClockUpdate+0xf4>)
  4011b8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4011bc:	680b      	ldr	r3, [r1, #0]
  4011be:	40d3      	lsrs	r3, r2
  4011c0:	600b      	str	r3, [r1, #0]
  4011c2:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4011c4:	4b31      	ldr	r3, [pc, #196]	; (40128c <SystemCoreClockUpdate+0xf8>)
  4011c6:	695b      	ldr	r3, [r3, #20]
  4011c8:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4011cc:	bf14      	ite	ne
  4011ce:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4011d2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4011d6:	4b2c      	ldr	r3, [pc, #176]	; (401288 <SystemCoreClockUpdate+0xf4>)
  4011d8:	601a      	str	r2, [r3, #0]
  4011da:	e7e4      	b.n	4011a6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4011dc:	4b29      	ldr	r3, [pc, #164]	; (401284 <SystemCoreClockUpdate+0xf0>)
  4011de:	6a1b      	ldr	r3, [r3, #32]
  4011e0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4011e4:	d003      	beq.n	4011ee <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4011e6:	4a2a      	ldr	r2, [pc, #168]	; (401290 <SystemCoreClockUpdate+0xfc>)
  4011e8:	4b27      	ldr	r3, [pc, #156]	; (401288 <SystemCoreClockUpdate+0xf4>)
  4011ea:	601a      	str	r2, [r3, #0]
  4011ec:	e7db      	b.n	4011a6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4011ee:	4a29      	ldr	r2, [pc, #164]	; (401294 <SystemCoreClockUpdate+0x100>)
  4011f0:	4b25      	ldr	r3, [pc, #148]	; (401288 <SystemCoreClockUpdate+0xf4>)
  4011f2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4011f4:	4b23      	ldr	r3, [pc, #140]	; (401284 <SystemCoreClockUpdate+0xf0>)
  4011f6:	6a1b      	ldr	r3, [r3, #32]
  4011f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011fc:	2b10      	cmp	r3, #16
  4011fe:	d005      	beq.n	40120c <SystemCoreClockUpdate+0x78>
  401200:	2b20      	cmp	r3, #32
  401202:	d1d0      	bne.n	4011a6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401204:	4a22      	ldr	r2, [pc, #136]	; (401290 <SystemCoreClockUpdate+0xfc>)
  401206:	4b20      	ldr	r3, [pc, #128]	; (401288 <SystemCoreClockUpdate+0xf4>)
  401208:	601a      	str	r2, [r3, #0]
          break;
  40120a:	e7cc      	b.n	4011a6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  40120c:	4a22      	ldr	r2, [pc, #136]	; (401298 <SystemCoreClockUpdate+0x104>)
  40120e:	4b1e      	ldr	r3, [pc, #120]	; (401288 <SystemCoreClockUpdate+0xf4>)
  401210:	601a      	str	r2, [r3, #0]
          break;
  401212:	e7c8      	b.n	4011a6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401214:	4b1b      	ldr	r3, [pc, #108]	; (401284 <SystemCoreClockUpdate+0xf0>)
  401216:	6a1b      	ldr	r3, [r3, #32]
  401218:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40121c:	d016      	beq.n	40124c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40121e:	4a1c      	ldr	r2, [pc, #112]	; (401290 <SystemCoreClockUpdate+0xfc>)
  401220:	4b19      	ldr	r3, [pc, #100]	; (401288 <SystemCoreClockUpdate+0xf4>)
  401222:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401224:	4b17      	ldr	r3, [pc, #92]	; (401284 <SystemCoreClockUpdate+0xf0>)
  401226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401228:	f003 0303 	and.w	r3, r3, #3
  40122c:	2b02      	cmp	r3, #2
  40122e:	d1ba      	bne.n	4011a6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401230:	4a14      	ldr	r2, [pc, #80]	; (401284 <SystemCoreClockUpdate+0xf0>)
  401232:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401234:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401236:	4814      	ldr	r0, [pc, #80]	; (401288 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401238:	f3c1 410a 	ubfx	r1, r1, #16, #11
  40123c:	6803      	ldr	r3, [r0, #0]
  40123e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401242:	b2d2      	uxtb	r2, r2
  401244:	fbb3 f3f2 	udiv	r3, r3, r2
  401248:	6003      	str	r3, [r0, #0]
  40124a:	e7ac      	b.n	4011a6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40124c:	4a11      	ldr	r2, [pc, #68]	; (401294 <SystemCoreClockUpdate+0x100>)
  40124e:	4b0e      	ldr	r3, [pc, #56]	; (401288 <SystemCoreClockUpdate+0xf4>)
  401250:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401252:	4b0c      	ldr	r3, [pc, #48]	; (401284 <SystemCoreClockUpdate+0xf0>)
  401254:	6a1b      	ldr	r3, [r3, #32]
  401256:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40125a:	2b10      	cmp	r3, #16
  40125c:	d005      	beq.n	40126a <SystemCoreClockUpdate+0xd6>
  40125e:	2b20      	cmp	r3, #32
  401260:	d1e0      	bne.n	401224 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401262:	4a0b      	ldr	r2, [pc, #44]	; (401290 <SystemCoreClockUpdate+0xfc>)
  401264:	4b08      	ldr	r3, [pc, #32]	; (401288 <SystemCoreClockUpdate+0xf4>)
  401266:	601a      	str	r2, [r3, #0]
          break;
  401268:	e7dc      	b.n	401224 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40126a:	4a0b      	ldr	r2, [pc, #44]	; (401298 <SystemCoreClockUpdate+0x104>)
  40126c:	4b06      	ldr	r3, [pc, #24]	; (401288 <SystemCoreClockUpdate+0xf4>)
  40126e:	601a      	str	r2, [r3, #0]
          break;
  401270:	e7d8      	b.n	401224 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401272:	4a05      	ldr	r2, [pc, #20]	; (401288 <SystemCoreClockUpdate+0xf4>)
  401274:	6813      	ldr	r3, [r2, #0]
  401276:	4909      	ldr	r1, [pc, #36]	; (40129c <SystemCoreClockUpdate+0x108>)
  401278:	fba1 1303 	umull	r1, r3, r1, r3
  40127c:	085b      	lsrs	r3, r3, #1
  40127e:	6013      	str	r3, [r2, #0]
  401280:	4770      	bx	lr
  401282:	bf00      	nop
  401284:	400e0600 	.word	0x400e0600
  401288:	20400004 	.word	0x20400004
  40128c:	400e1810 	.word	0x400e1810
  401290:	00b71b00 	.word	0x00b71b00
  401294:	003d0900 	.word	0x003d0900
  401298:	007a1200 	.word	0x007a1200
  40129c:	aaaaaaab 	.word	0xaaaaaaab

004012a0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4012a0:	4b16      	ldr	r3, [pc, #88]	; (4012fc <system_init_flash+0x5c>)
  4012a2:	4298      	cmp	r0, r3
  4012a4:	d913      	bls.n	4012ce <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4012a6:	4b16      	ldr	r3, [pc, #88]	; (401300 <system_init_flash+0x60>)
  4012a8:	4298      	cmp	r0, r3
  4012aa:	d915      	bls.n	4012d8 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4012ac:	4b15      	ldr	r3, [pc, #84]	; (401304 <system_init_flash+0x64>)
  4012ae:	4298      	cmp	r0, r3
  4012b0:	d916      	bls.n	4012e0 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4012b2:	4b15      	ldr	r3, [pc, #84]	; (401308 <system_init_flash+0x68>)
  4012b4:	4298      	cmp	r0, r3
  4012b6:	d917      	bls.n	4012e8 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4012b8:	4b14      	ldr	r3, [pc, #80]	; (40130c <system_init_flash+0x6c>)
  4012ba:	4298      	cmp	r0, r3
  4012bc:	d918      	bls.n	4012f0 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4012be:	4b14      	ldr	r3, [pc, #80]	; (401310 <system_init_flash+0x70>)
  4012c0:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4012c2:	bf94      	ite	ls
  4012c4:	4a13      	ldrls	r2, [pc, #76]	; (401314 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4012c6:	4a14      	ldrhi	r2, [pc, #80]	; (401318 <system_init_flash+0x78>)
  4012c8:	4b14      	ldr	r3, [pc, #80]	; (40131c <system_init_flash+0x7c>)
  4012ca:	601a      	str	r2, [r3, #0]
  4012cc:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4012ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4012d2:	4b12      	ldr	r3, [pc, #72]	; (40131c <system_init_flash+0x7c>)
  4012d4:	601a      	str	r2, [r3, #0]
  4012d6:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4012d8:	4a11      	ldr	r2, [pc, #68]	; (401320 <system_init_flash+0x80>)
  4012da:	4b10      	ldr	r3, [pc, #64]	; (40131c <system_init_flash+0x7c>)
  4012dc:	601a      	str	r2, [r3, #0]
  4012de:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4012e0:	4a10      	ldr	r2, [pc, #64]	; (401324 <system_init_flash+0x84>)
  4012e2:	4b0e      	ldr	r3, [pc, #56]	; (40131c <system_init_flash+0x7c>)
  4012e4:	601a      	str	r2, [r3, #0]
  4012e6:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4012e8:	4a0f      	ldr	r2, [pc, #60]	; (401328 <system_init_flash+0x88>)
  4012ea:	4b0c      	ldr	r3, [pc, #48]	; (40131c <system_init_flash+0x7c>)
  4012ec:	601a      	str	r2, [r3, #0]
  4012ee:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4012f0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4012f4:	4b09      	ldr	r3, [pc, #36]	; (40131c <system_init_flash+0x7c>)
  4012f6:	601a      	str	r2, [r3, #0]
  4012f8:	4770      	bx	lr
  4012fa:	bf00      	nop
  4012fc:	015ef3bf 	.word	0x015ef3bf
  401300:	02bde77f 	.word	0x02bde77f
  401304:	041cdb3f 	.word	0x041cdb3f
  401308:	057bceff 	.word	0x057bceff
  40130c:	06dac2bf 	.word	0x06dac2bf
  401310:	0839b67f 	.word	0x0839b67f
  401314:	04000500 	.word	0x04000500
  401318:	04000600 	.word	0x04000600
  40131c:	400e0c00 	.word	0x400e0c00
  401320:	04000100 	.word	0x04000100
  401324:	04000200 	.word	0x04000200
  401328:	04000300 	.word	0x04000300

0040132c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  40132c:	4b0a      	ldr	r3, [pc, #40]	; (401358 <_sbrk+0x2c>)
  40132e:	681b      	ldr	r3, [r3, #0]
  401330:	b153      	cbz	r3, 401348 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401332:	4b09      	ldr	r3, [pc, #36]	; (401358 <_sbrk+0x2c>)
  401334:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401336:	181a      	adds	r2, r3, r0
  401338:	4908      	ldr	r1, [pc, #32]	; (40135c <_sbrk+0x30>)
  40133a:	4291      	cmp	r1, r2
  40133c:	db08      	blt.n	401350 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40133e:	4610      	mov	r0, r2
  401340:	4a05      	ldr	r2, [pc, #20]	; (401358 <_sbrk+0x2c>)
  401342:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401344:	4618      	mov	r0, r3
  401346:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401348:	4a05      	ldr	r2, [pc, #20]	; (401360 <_sbrk+0x34>)
  40134a:	4b03      	ldr	r3, [pc, #12]	; (401358 <_sbrk+0x2c>)
  40134c:	601a      	str	r2, [r3, #0]
  40134e:	e7f0      	b.n	401332 <_sbrk+0x6>
		return (caddr_t) -1;	
  401350:	f04f 30ff 	mov.w	r0, #4294967295
}
  401354:	4770      	bx	lr
  401356:	bf00      	nop
  401358:	20400a74 	.word	0x20400a74
  40135c:	2045fffc 	.word	0x2045fffc
  401360:	20405048 	.word	0x20405048

00401364 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401364:	f04f 30ff 	mov.w	r0, #4294967295
  401368:	4770      	bx	lr

0040136a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40136a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40136e:	604b      	str	r3, [r1, #4]

	return 0;
}
  401370:	2000      	movs	r0, #0
  401372:	4770      	bx	lr

00401374 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401374:	2001      	movs	r0, #1
  401376:	4770      	bx	lr

00401378 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401378:	2000      	movs	r0, #0
  40137a:	4770      	bx	lr

0040137c <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
  40137c:	0a03      	lsrs	r3, r0, #8
  40137e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
  401382:	b280      	uxth	r0, r0
  401384:	4770      	bx	lr

00401386 <lwip_ntohs>:
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
  401386:	0a03      	lsrs	r3, r0, #8
  401388:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 */
u16_t
lwip_ntohs(u16_t n)
{
  return lwip_htons(n);
}
  40138c:	b280      	uxth	r0, r0
  40138e:	4770      	bx	lr

00401390 <lwip_htonl>:
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
  401390:	0e03      	lsrs	r3, r0, #24
    ((n & 0xff0000UL) >> 8) |
  401392:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    ((n & 0xff00) << 8) |
  401396:	0202      	lsls	r2, r0, #8
  401398:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    ((n & 0xff0000UL) >> 8) |
  40139c:	4313      	orrs	r3, r2
  40139e:	0a00      	lsrs	r0, r0, #8
  4013a0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
}
  4013a4:	4318      	orrs	r0, r3
  4013a6:	4770      	bx	lr

004013a8 <lwip_ntohl>:
 * @param n u32_t in network byte order
 * @return n in host byte order
 */
u32_t
lwip_ntohl(u32_t n)
{
  4013a8:	b508      	push	{r3, lr}
  return lwip_htonl(n);
  4013aa:	4b01      	ldr	r3, [pc, #4]	; (4013b0 <lwip_ntohl+0x8>)
  4013ac:	4798      	blx	r3
}
  4013ae:	bd08      	pop	{r3, pc}
  4013b0:	00401391 	.word	0x00401391

004013b4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
  4013b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4013b8:	b085      	sub	sp, #20
  4013ba:	4680      	mov	r8, r0
  4013bc:	4689      	mov	r9, r1
  4013be:	4615      	mov	r5, r2
  /* we can use the echo header here */
  struct icmp_echo_hdr *icmphdr;
  ip_addr_t iphdr_src;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
  4013c0:	2200      	movs	r2, #0
  4013c2:	2124      	movs	r1, #36	; 0x24
  4013c4:	2001      	movs	r0, #1
  4013c6:	4b22      	ldr	r3, [pc, #136]	; (401450 <icmp_send_response+0x9c>)
  4013c8:	4798      	blx	r3
                 PBUF_RAM);
  if (q == NULL) {
  4013ca:	2800      	cmp	r0, #0
  4013cc:	d03d      	beq.n	40144a <icmp_send_response+0x96>
  4013ce:	4606      	mov	r6, r0
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
  4013d0:	f8d8 7004 	ldr.w	r7, [r8, #4]
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  4013d4:	6844      	ldr	r4, [r0, #4]
  icmphdr->type = type;
  4013d6:	f884 9000 	strb.w	r9, [r4]
  icmphdr->code = code;
  4013da:	7065      	strb	r5, [r4, #1]
  icmphdr->id = 0;
  4013dc:	2500      	movs	r5, #0
  4013de:	7125      	strb	r5, [r4, #4]
  4013e0:	7165      	strb	r5, [r4, #5]
  icmphdr->seqno = 0;
  4013e2:	71a5      	strb	r5, [r4, #6]
  4013e4:	71e5      	strb	r5, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
  4013e6:	f8d0 c004 	ldr.w	ip, [r0, #4]
  4013ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4013ee:	f8d3 e000 	ldr.w	lr, [r3]
  4013f2:	6858      	ldr	r0, [r3, #4]
  4013f4:	6899      	ldr	r1, [r3, #8]
  4013f6:	f8d3 800c 	ldr.w	r8, [r3, #12]
  4013fa:	f8cc e008 	str.w	lr, [ip, #8]
  4013fe:	f8cc 000c 	str.w	r0, [ip, #12]
  401402:	f8cc 1010 	str.w	r1, [ip, #16]
  401406:	f8cc 8014 	str.w	r8, [ip, #20]
  40140a:	f8d3 e010 	ldr.w	lr, [r3, #16]
  40140e:	6958      	ldr	r0, [r3, #20]
  401410:	6999      	ldr	r1, [r3, #24]
  401412:	f8cc e018 	str.w	lr, [ip, #24]
  401416:	f8cc 001c 	str.w	r0, [ip, #28]
  40141a:	f8cc 1020 	str.w	r1, [ip, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
  40141e:	70a5      	strb	r5, [r4, #2]
  401420:	70e5      	strb	r5, [r4, #3]
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
  401422:	8971      	ldrh	r1, [r6, #10]
  401424:	4620      	mov	r0, r4
  401426:	4b0b      	ldr	r3, [pc, #44]	; (401454 <icmp_send_response+0xa0>)
  401428:	4798      	blx	r3
  40142a:	8060      	strh	r0, [r4, #2]
  ICMP_STATS_INC(icmp.xmit);
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
  40142c:	68fb      	ldr	r3, [r7, #12]
  40142e:	aa04      	add	r2, sp, #16
  401430:	f842 3d04 	str.w	r3, [r2, #-4]!
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
  401434:	2301      	movs	r3, #1
  401436:	9301      	str	r3, [sp, #4]
  401438:	9500      	str	r5, [sp, #0]
  40143a:	23ff      	movs	r3, #255	; 0xff
  40143c:	4629      	mov	r1, r5
  40143e:	4630      	mov	r0, r6
  401440:	4c05      	ldr	r4, [pc, #20]	; (401458 <icmp_send_response+0xa4>)
  401442:	47a0      	blx	r4
  pbuf_free(q);
  401444:	4630      	mov	r0, r6
  401446:	4b05      	ldr	r3, [pc, #20]	; (40145c <icmp_send_response+0xa8>)
  401448:	4798      	blx	r3
}
  40144a:	b005      	add	sp, #20
  40144c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401450:	004028b9 	.word	0x004028b9
  401454:	004016ed 	.word	0x004016ed
  401458:	00401a59 	.word	0x00401a59
  40145c:	00402861 	.word	0x00402861

00401460 <icmp_input>:
{
  401460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401464:	b085      	sub	sp, #20
  401466:	4606      	mov	r6, r0
  401468:	4688      	mov	r8, r1
  iphdr = (struct ip_hdr *)p->payload;
  40146a:	6847      	ldr	r7, [r0, #4]
  hlen = IPH_HL(iphdr) * 4;
  40146c:	783c      	ldrb	r4, [r7, #0]
  40146e:	f004 040f 	and.w	r4, r4, #15
  401472:	00a4      	lsls	r4, r4, #2
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
  401474:	4265      	negs	r5, r4
  401476:	b22d      	sxth	r5, r5
  401478:	4629      	mov	r1, r5
  40147a:	4b45      	ldr	r3, [pc, #276]	; (401590 <icmp_input+0x130>)
  40147c:	4798      	blx	r3
  40147e:	b9a0      	cbnz	r0, 4014aa <icmp_input+0x4a>
  401480:	8933      	ldrh	r3, [r6, #8]
  401482:	2b03      	cmp	r3, #3
  401484:	d911      	bls.n	4014aa <icmp_input+0x4a>
  type = *((u8_t *)p->payload);
  401486:	6873      	ldr	r3, [r6, #4]
  switch (type) {
  401488:	781b      	ldrb	r3, [r3, #0]
  40148a:	2b08      	cmp	r3, #8
  40148c:	d16f      	bne.n	40156e <icmp_input+0x10e>
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
  40148e:	4b41      	ldr	r3, [pc, #260]	; (401594 <icmp_input+0x134>)
  401490:	6818      	ldr	r0, [r3, #0]
  401492:	f000 09f0 	and.w	r9, r0, #240	; 0xf0
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
  401496:	4641      	mov	r1, r8
  401498:	4b3f      	ldr	r3, [pc, #252]	; (401598 <icmp_input+0x138>)
  40149a:	4798      	blx	r3
  40149c:	b958      	cbnz	r0, 4014b6 <icmp_input+0x56>
      if (!accepted) {
  40149e:	f1b9 0fe0 	cmp.w	r9, #224	; 0xe0
  4014a2:	d008      	beq.n	4014b6 <icmp_input+0x56>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
  4014a4:	8933      	ldrh	r3, [r6, #8]
  4014a6:	2b07      	cmp	r3, #7
  4014a8:	d809      	bhi.n	4014be <icmp_input+0x5e>
  pbuf_free(p);
  4014aa:	4630      	mov	r0, r6
  4014ac:	4b3b      	ldr	r3, [pc, #236]	; (40159c <icmp_input+0x13c>)
  4014ae:	4798      	blx	r3
}
  4014b0:	b005      	add	sp, #20
  4014b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        pbuf_free(p);
  4014b6:	4630      	mov	r0, r6
  4014b8:	4b38      	ldr	r3, [pc, #224]	; (40159c <icmp_input+0x13c>)
  4014ba:	4798      	blx	r3
        return;
  4014bc:	e7f8      	b.n	4014b0 <icmp_input+0x50>
    if (inet_chksum_pbuf(p) != 0) {
  4014be:	4630      	mov	r0, r6
  4014c0:	4b37      	ldr	r3, [pc, #220]	; (4015a0 <icmp_input+0x140>)
  4014c2:	4798      	blx	r3
  4014c4:	b970      	cbnz	r0, 4014e4 <icmp_input+0x84>
  hlen = IPH_HL(iphdr) * 4;
  4014c6:	b224      	sxth	r4, r4
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
  4014c8:	2122      	movs	r1, #34	; 0x22
  4014ca:	4630      	mov	r0, r6
  4014cc:	4b30      	ldr	r3, [pc, #192]	; (401590 <icmp_input+0x130>)
  4014ce:	4798      	blx	r3
  4014d0:	b330      	cbz	r0, 401520 <icmp_input+0xc0>
      if (pbuf_header(p, hlen)) {
  4014d2:	4621      	mov	r1, r4
  4014d4:	4630      	mov	r0, r6
  4014d6:	4b2e      	ldr	r3, [pc, #184]	; (401590 <icmp_input+0x130>)
  4014d8:	4798      	blx	r3
  4014da:	b138      	cbz	r0, 4014ec <icmp_input+0x8c>
  pbuf_free(p);
  4014dc:	4630      	mov	r0, r6
  4014de:	4b2f      	ldr	r3, [pc, #188]	; (40159c <icmp_input+0x13c>)
  4014e0:	4798      	blx	r3
  return;
  4014e2:	e7e5      	b.n	4014b0 <icmp_input+0x50>
      pbuf_free(p);
  4014e4:	4630      	mov	r0, r6
  4014e6:	4b2d      	ldr	r3, [pc, #180]	; (40159c <icmp_input+0x13c>)
  4014e8:	4798      	blx	r3
      return;
  4014ea:	e7e1      	b.n	4014b0 <icmp_input+0x50>
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  4014ec:	2200      	movs	r2, #0
  4014ee:	8931      	ldrh	r1, [r6, #8]
  4014f0:	2002      	movs	r0, #2
  4014f2:	4b2c      	ldr	r3, [pc, #176]	; (4015a4 <icmp_input+0x144>)
  4014f4:	4798      	blx	r3
      if (r == NULL) {
  4014f6:	4681      	mov	r9, r0
  4014f8:	2800      	cmp	r0, #0
  4014fa:	d0ef      	beq.n	4014dc <icmp_input+0x7c>
      if (pbuf_copy(r, p) != ERR_OK) {
  4014fc:	4631      	mov	r1, r6
  4014fe:	4b2a      	ldr	r3, [pc, #168]	; (4015a8 <icmp_input+0x148>)
  401500:	4798      	blx	r3
  401502:	2800      	cmp	r0, #0
  401504:	d1ea      	bne.n	4014dc <icmp_input+0x7c>
      iphdr = (struct ip_hdr *)r->payload;
  401506:	f8d9 7004 	ldr.w	r7, [r9, #4]
      if (pbuf_header(r, -hlen)) {
  40150a:	4629      	mov	r1, r5
  40150c:	4648      	mov	r0, r9
  40150e:	4b20      	ldr	r3, [pc, #128]	; (401590 <icmp_input+0x130>)
  401510:	4798      	blx	r3
  401512:	2800      	cmp	r0, #0
  401514:	d1e2      	bne.n	4014dc <icmp_input+0x7c>
      pbuf_free(p);
  401516:	4630      	mov	r0, r6
  401518:	4b20      	ldr	r3, [pc, #128]	; (40159c <icmp_input+0x13c>)
  40151a:	4798      	blx	r3
      p = r;
  40151c:	464e      	mov	r6, r9
  40151e:	e006      	b.n	40152e <icmp_input+0xce>
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
  401520:	f06f 0121 	mvn.w	r1, #33	; 0x21
  401524:	4630      	mov	r0, r6
  401526:	4b1a      	ldr	r3, [pc, #104]	; (401590 <icmp_input+0x130>)
  401528:	4798      	blx	r3
  40152a:	2800      	cmp	r0, #0
  40152c:	d1d6      	bne.n	4014dc <icmp_input+0x7c>
    iecho = (struct icmp_echo_hdr *)p->payload;
  40152e:	6872      	ldr	r2, [r6, #4]
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
  401530:	4b18      	ldr	r3, [pc, #96]	; (401594 <icmp_input+0x134>)
  401532:	681b      	ldr	r3, [r3, #0]
  401534:	60fb      	str	r3, [r7, #12]
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
  401536:	4b1d      	ldr	r3, [pc, #116]	; (4015ac <icmp_input+0x14c>)
  401538:	681b      	ldr	r3, [r3, #0]
  40153a:	613b      	str	r3, [r7, #16]
    ICMPH_TYPE_SET(iecho, ICMP_ER);
  40153c:	2300      	movs	r3, #0
  40153e:	7013      	strb	r3, [r2, #0]
    if (iecho->chksum >= PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
  401540:	8853      	ldrh	r3, [r2, #2]
  401542:	f64f 71f6 	movw	r1, #65526	; 0xfff6
  401546:	428b      	cmp	r3, r1
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
  401548:	bf8c      	ite	hi
  40154a:	3309      	addhi	r3, #9
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
  40154c:	3308      	addls	r3, #8
  40154e:	8053      	strh	r3, [r2, #2]
    IPH_TTL_SET(iphdr, ICMP_TTL);
  401550:	23ff      	movs	r3, #255	; 0xff
  401552:	723b      	strb	r3, [r7, #8]
    IPH_CHKSUM_SET(iphdr, 0);
  401554:	2300      	movs	r3, #0
  401556:	72bb      	strb	r3, [r7, #10]
  401558:	72fb      	strb	r3, [r7, #11]
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  40155a:	2114      	movs	r1, #20
  40155c:	4638      	mov	r0, r7
  40155e:	4b14      	ldr	r3, [pc, #80]	; (4015b0 <icmp_input+0x150>)
  401560:	4798      	blx	r3
  401562:	8178      	strh	r0, [r7, #10]
    if(pbuf_header(p, hlen)) {
  401564:	4621      	mov	r1, r4
  401566:	4630      	mov	r0, r6
  401568:	4b09      	ldr	r3, [pc, #36]	; (401590 <icmp_input+0x130>)
  40156a:	4798      	blx	r3
  40156c:	b118      	cbz	r0, 401576 <icmp_input+0x116>
  pbuf_free(p);
  40156e:	4630      	mov	r0, r6
  401570:	4b0a      	ldr	r3, [pc, #40]	; (40159c <icmp_input+0x13c>)
  401572:	4798      	blx	r3
  return;
  401574:	e79c      	b.n	4014b0 <icmp_input+0x50>
      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
  401576:	f8cd 8008 	str.w	r8, [sp, #8]
  40157a:	2301      	movs	r3, #1
  40157c:	9301      	str	r3, [sp, #4]
  40157e:	2200      	movs	r2, #0
  401580:	9200      	str	r2, [sp, #0]
  401582:	23ff      	movs	r3, #255	; 0xff
  401584:	4903      	ldr	r1, [pc, #12]	; (401594 <icmp_input+0x134>)
  401586:	4630      	mov	r0, r6
  401588:	4c0a      	ldr	r4, [pc, #40]	; (4015b4 <icmp_input+0x154>)
  40158a:	47a0      	blx	r4
  40158c:	e7ef      	b.n	40156e <icmp_input+0x10e>
  40158e:	bf00      	nop
  401590:	004027d5 	.word	0x004027d5
  401594:	204039a0 	.word	0x204039a0
  401598:	00401a99 	.word	0x00401a99
  40159c:	00402861 	.word	0x00402861
  4015a0:	004016fd 	.word	0x004016fd
  4015a4:	004028b9 	.word	0x004028b9
  4015a8:	00402ae9 	.word	0x00402ae9
  4015ac:	20403998 	.word	0x20403998
  4015b0:	004016ed 	.word	0x004016ed
  4015b4:	0040195d 	.word	0x0040195d

004015b8 <icmp_dest_unreach>:
{
  4015b8:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_DUR, t);
  4015ba:	460a      	mov	r2, r1
  4015bc:	2103      	movs	r1, #3
  4015be:	4b01      	ldr	r3, [pc, #4]	; (4015c4 <icmp_dest_unreach+0xc>)
  4015c0:	4798      	blx	r3
  4015c2:	bd08      	pop	{r3, pc}
  4015c4:	004013b5 	.word	0x004013b5

004015c8 <icmp_time_exceeded>:
{
  4015c8:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_TE, t);
  4015ca:	460a      	mov	r2, r1
  4015cc:	210b      	movs	r1, #11
  4015ce:	4b01      	ldr	r3, [pc, #4]	; (4015d4 <icmp_time_exceeded+0xc>)
  4015d0:	4798      	blx	r3
  4015d2:	bd08      	pop	{r3, pc}
  4015d4:	004013b5 	.word	0x004013b5

004015d8 <lwip_standard_chksum>:
 * @return host order (!) lwip checksum (non-inverted Internet sum) 
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
  4015d8:	b470      	push	{r4, r5, r6}
  4015da:	b083      	sub	sp, #12
  u8_t *pb = (u8_t *)dataptr;
  u16_t *ps, t = 0;
  4015dc:	2300      	movs	r3, #0
  4015de:	f8ad 3006 	strh.w	r3, [sp, #6]
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
  4015e2:	f010 0601 	ands.w	r6, r0, #1
  4015e6:	d030      	beq.n	40164a <lwip_standard_chksum+0x72>
  4015e8:	4299      	cmp	r1, r3
  4015ea:	dd2e      	ble.n	40164a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[1] = *pb++;
  4015ec:	1c45      	adds	r5, r0, #1
  4015ee:	7803      	ldrb	r3, [r0, #0]
  4015f0:	f88d 3007 	strb.w	r3, [sp, #7]
    len--;
  4015f4:	3901      	subs	r1, #1
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  while (len > 1) {
  4015f6:	2901      	cmp	r1, #1
  4015f8:	dd29      	ble.n	40164e <lwip_standard_chksum+0x76>
  4015fa:	4628      	mov	r0, r5
  4015fc:	460b      	mov	r3, r1
  4015fe:	2200      	movs	r2, #0
    sum += *ps++;
  401600:	f830 4b02 	ldrh.w	r4, [r0], #2
  401604:	4422      	add	r2, r4
    len -= 2;
  401606:	3b02      	subs	r3, #2
  while (len > 1) {
  401608:	2b01      	cmp	r3, #1
  40160a:	dcf9      	bgt.n	401600 <lwip_standard_chksum+0x28>
  40160c:	3902      	subs	r1, #2
  40160e:	f021 0301 	bic.w	r3, r1, #1
  401612:	3302      	adds	r3, #2
  401614:	441d      	add	r5, r3
  401616:	f001 0101 	and.w	r1, r1, #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
  40161a:	2900      	cmp	r1, #0
  40161c:	dd02      	ble.n	401624 <lwip_standard_chksum+0x4c>
    ((u8_t *)&t)[0] = *(u8_t *)ps;
  40161e:	782b      	ldrb	r3, [r5, #0]
  401620:	f88d 3006 	strb.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
  401624:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  401628:	4402      	add	r2, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
  40162a:	b290      	uxth	r0, r2
  40162c:	eb00 4212 	add.w	r2, r0, r2, lsr #16
  sum = FOLD_U32T(sum);
  401630:	b290      	uxth	r0, r2
  401632:	eb00 4012 	add.w	r0, r0, r2, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
  401636:	b126      	cbz	r6, 401642 <lwip_standard_chksum+0x6a>
    sum = SWAP_BYTES_IN_WORD(sum);
  401638:	0203      	lsls	r3, r0, #8
  40163a:	b29b      	uxth	r3, r3
  40163c:	f3c0 2007 	ubfx	r0, r0, #8, #8
  401640:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
  401642:	b280      	uxth	r0, r0
  401644:	b003      	add	sp, #12
  401646:	bc70      	pop	{r4, r5, r6}
  401648:	4770      	bx	lr
  u8_t *pb = (u8_t *)dataptr;
  40164a:	4605      	mov	r5, r0
  40164c:	e7d3      	b.n	4015f6 <lwip_standard_chksum+0x1e>
  u32_t sum = 0;
  40164e:	2200      	movs	r2, #0
  401650:	e7e3      	b.n	40161a <lwip_standard_chksum+0x42>
	...

00401654 <inet_chksum_pseudo>:
 */
u16_t
inet_chksum_pseudo(struct pbuf *p,
       ip_addr_t *src, ip_addr_t *dest,
       u8_t proto, u16_t proto_len)
{
  401654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401658:	468a      	mov	sl, r1
  40165a:	4691      	mov	r9, r2
  40165c:	4698      	mov	r8, r3
  u8_t swapped;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
  40165e:	2800      	cmp	r0, #0
  401660:	d03e      	beq.n	4016e0 <inet_chksum_pseudo+0x8c>
  401662:	4605      	mov	r5, r0
  401664:	2600      	movs	r6, #0
  401666:	4634      	mov	r4, r6
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
  401668:	4f1e      	ldr	r7, [pc, #120]	; (4016e4 <inet_chksum_pseudo+0x90>)
  40166a:	e001      	b.n	401670 <inet_chksum_pseudo+0x1c>
  for(q = p; q != NULL; q = q->next) {
  40166c:	682d      	ldr	r5, [r5, #0]
  40166e:	b19d      	cbz	r5, 401698 <inet_chksum_pseudo+0x44>
    acc += LWIP_CHKSUM(q->payload, q->len);
  401670:	8969      	ldrh	r1, [r5, #10]
  401672:	6868      	ldr	r0, [r5, #4]
  401674:	47b8      	blx	r7
  401676:	4404      	add	r4, r0
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
  401678:	b2a0      	uxth	r0, r4
  40167a:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
  40167e:	896b      	ldrh	r3, [r5, #10]
  401680:	f013 0f01 	tst.w	r3, #1
  401684:	d0f2      	beq.n	40166c <inet_chksum_pseudo+0x18>
      swapped = 1 - swapped;
  401686:	f1c6 0601 	rsb	r6, r6, #1
  40168a:	b2f6      	uxtb	r6, r6
      acc = SWAP_BYTES_IN_WORD(acc);
  40168c:	0223      	lsls	r3, r4, #8
  40168e:	b29b      	uxth	r3, r3
  401690:	f3c4 2407 	ubfx	r4, r4, #8, #8
  401694:	431c      	orrs	r4, r3
  401696:	e7e9      	b.n	40166c <inet_chksum_pseudo+0x18>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  401698:	b126      	cbz	r6, 4016a4 <inet_chksum_pseudo+0x50>
    acc = SWAP_BYTES_IN_WORD(acc);
  40169a:	0223      	lsls	r3, r4, #8
  40169c:	b29b      	uxth	r3, r3
  40169e:	f3c4 2407 	ubfx	r4, r4, #8, #8
  4016a2:	431c      	orrs	r4, r3
  }
  addr = ip4_addr_get_u32(src);
  4016a4:	f8da 2000 	ldr.w	r2, [sl]
  acc += (addr & 0xffffUL);
  acc += ((addr >> 16) & 0xffffUL);
  addr = ip4_addr_get_u32(dest);
  4016a8:	f8d9 3000 	ldr.w	r3, [r9]
  acc += (addr & 0xffffUL);
  acc += ((addr >> 16) & 0xffffUL);
  4016ac:	0c18      	lsrs	r0, r3, #16
  4016ae:	fa10 f083 	uxtah	r0, r0, r3
  4016b2:	fa10 f082 	uxtah	r0, r0, r2
  4016b6:	eb00 4012 	add.w	r0, r0, r2, lsr #16
  4016ba:	4404      	add	r4, r0
  acc += (u32_t)htons((u16_t)proto);
  4016bc:	4640      	mov	r0, r8
  4016be:	4d0a      	ldr	r5, [pc, #40]	; (4016e8 <inet_chksum_pseudo+0x94>)
  4016c0:	47a8      	blx	r5
  4016c2:	4404      	add	r4, r0
  acc += (u32_t)htons(proto_len);
  4016c4:	f8bd 0020 	ldrh.w	r0, [sp, #32]
  4016c8:	47a8      	blx	r5
  4016ca:	4420      	add	r0, r4

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
  4016cc:	b284      	uxth	r4, r0
  4016ce:	eb04 4410 	add.w	r4, r4, r0, lsr #16
  acc = FOLD_U32T(acc);
  4016d2:	b2a0      	uxth	r0, r4
  4016d4:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  4016d8:	43c0      	mvns	r0, r0
}
  4016da:	b280      	uxth	r0, r0
  4016dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  acc = 0;
  4016e0:	2400      	movs	r4, #0
  4016e2:	e7df      	b.n	4016a4 <inet_chksum_pseudo+0x50>
  4016e4:	004015d9 	.word	0x004015d9
  4016e8:	0040137d 	.word	0x0040137d

004016ec <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
  4016ec:	b508      	push	{r3, lr}
  return ~LWIP_CHKSUM(dataptr, len);
  4016ee:	4b02      	ldr	r3, [pc, #8]	; (4016f8 <inet_chksum+0xc>)
  4016f0:	4798      	blx	r3
  4016f2:	43c0      	mvns	r0, r0
}
  4016f4:	b280      	uxth	r0, r0
  4016f6:	bd08      	pop	{r3, pc}
  4016f8:	004015d9 	.word	0x004015d9

004016fc <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
  4016fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
  4016fe:	b318      	cbz	r0, 401748 <inet_chksum_pbuf+0x4c>
  401700:	4605      	mov	r5, r0
  401702:	2600      	movs	r6, #0
  401704:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
  401706:	4f11      	ldr	r7, [pc, #68]	; (40174c <inet_chksum_pbuf+0x50>)
  401708:	e001      	b.n	40170e <inet_chksum_pbuf+0x12>
  for(q = p; q != NULL; q = q->next) {
  40170a:	682d      	ldr	r5, [r5, #0]
  40170c:	b19d      	cbz	r5, 401736 <inet_chksum_pbuf+0x3a>
    acc += LWIP_CHKSUM(q->payload, q->len);
  40170e:	8969      	ldrh	r1, [r5, #10]
  401710:	6868      	ldr	r0, [r5, #4]
  401712:	47b8      	blx	r7
  401714:	4420      	add	r0, r4
    acc = FOLD_U32T(acc);
  401716:	b284      	uxth	r4, r0
  401718:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    if (q->len % 2 != 0) {
  40171c:	896b      	ldrh	r3, [r5, #10]
  40171e:	f013 0f01 	tst.w	r3, #1
  401722:	d0f2      	beq.n	40170a <inet_chksum_pbuf+0xe>
      swapped = 1 - swapped;
  401724:	f1c6 0601 	rsb	r6, r6, #1
  401728:	b2f6      	uxtb	r6, r6
      acc = SWAP_BYTES_IN_WORD(acc);
  40172a:	0223      	lsls	r3, r4, #8
  40172c:	b29b      	uxth	r3, r3
  40172e:	f3c4 2407 	ubfx	r4, r4, #8, #8
  401732:	431c      	orrs	r4, r3
  401734:	e7e9      	b.n	40170a <inet_chksum_pbuf+0xe>
    }
  }

  if (swapped) {
  401736:	b126      	cbz	r6, 401742 <inet_chksum_pbuf+0x46>
    acc = SWAP_BYTES_IN_WORD(acc);
  401738:	0223      	lsls	r3, r4, #8
  40173a:	b29b      	uxth	r3, r3
  40173c:	f3c4 2407 	ubfx	r4, r4, #8, #8
  401740:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
  401742:	43e0      	mvns	r0, r4
}
  401744:	b280      	uxth	r0, r0
  401746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  acc = 0;
  401748:	2400      	movs	r4, #0
  40174a:	e7fa      	b.n	401742 <inet_chksum_pbuf+0x46>
  40174c:	004015d9 	.word	0x004015d9

00401750 <ip_route>:
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  401750:	4b0e      	ldr	r3, [pc, #56]	; (40178c <ip_route+0x3c>)
  401752:	681b      	ldr	r3, [r3, #0]
  401754:	b973      	cbnz	r3, 401774 <ip_route+0x24>
        /* return netif on which to forward IP packet */
        return netif;
      }
    }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
  401756:	4b0e      	ldr	r3, [pc, #56]	; (401790 <ip_route+0x40>)
  401758:	681b      	ldr	r3, [r3, #0]
  40175a:	b133      	cbz	r3, 40176a <ip_route+0x1a>
  40175c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
  401760:	f002 0201 	and.w	r2, r2, #1
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    snmp_inc_ipoutnoroutes();
    return NULL;
  401764:	2a00      	cmp	r2, #0
  401766:	bf08      	it	eq
  401768:	2300      	moveq	r3, #0
  }
  /* no matching netif found, use default netif */
  return netif_default;
}
  40176a:	4618      	mov	r0, r3
  40176c:	4770      	bx	lr
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  40176e:	681b      	ldr	r3, [r3, #0]
  401770:	2b00      	cmp	r3, #0
  401772:	d0f0      	beq.n	401756 <ip_route+0x6>
    if (netif_is_up(netif)) {
  401774:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
  401778:	f012 0f01 	tst.w	r2, #1
  40177c:	d0f7      	beq.n	40176e <ip_route+0x1e>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
  40177e:	6802      	ldr	r2, [r0, #0]
  401780:	6859      	ldr	r1, [r3, #4]
  401782:	404a      	eors	r2, r1
  401784:	6899      	ldr	r1, [r3, #8]
  401786:	420a      	tst	r2, r1
  401788:	d1f1      	bne.n	40176e <ip_route+0x1e>
  40178a:	e7ee      	b.n	40176a <ip_route+0x1a>
  40178c:	204049bc 	.word	0x204049bc
  401790:	204049c0 	.word	0x204049c0

00401794 <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
  401794:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401798:	4605      	mov	r5, r0

  IP_STATS_INC(ip.recv);
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  40179a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
  40179e:	f898 3000 	ldrb.w	r3, [r8]
  4017a2:	091a      	lsrs	r2, r3, #4
  4017a4:	2a04      	cmp	r2, #4
  4017a6:	d004      	beq.n	4017b2 <ip_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
  4017a8:	4b5c      	ldr	r3, [pc, #368]	; (40191c <ip_input+0x188>)
  4017aa:	4798      	blx	r3
  current_header = NULL;
  ip_addr_set_any(&current_iphdr_src);
  ip_addr_set_any(&current_iphdr_dest);

  return ERR_OK;
}
  4017ac:	2000      	movs	r0, #0
  4017ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4017b2:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL(iphdr);
  4017b4:	f003 030f 	and.w	r3, r3, #15
  iphdr_hlen *= 4;
  4017b8:	009c      	lsls	r4, r3, #2
  iphdr_len = ntohs(IPH_LEN(iphdr));
  4017ba:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  4017be:	4b58      	ldr	r3, [pc, #352]	; (401920 <ip_input+0x18c>)
  4017c0:	4798      	blx	r3
  4017c2:	4606      	mov	r6, r0
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
  4017c4:	896b      	ldrh	r3, [r5, #10]
  4017c6:	42a3      	cmp	r3, r4
  4017c8:	d302      	bcc.n	4017d0 <ip_input+0x3c>
  4017ca:	892b      	ldrh	r3, [r5, #8]
  4017cc:	4283      	cmp	r3, r0
  4017ce:	d203      	bcs.n	4017d8 <ip_input+0x44>
    pbuf_free(p);
  4017d0:	4628      	mov	r0, r5
  4017d2:	4b52      	ldr	r3, [pc, #328]	; (40191c <ip_input+0x188>)
  4017d4:	4798      	blx	r3
    return ERR_OK;
  4017d6:	e7e9      	b.n	4017ac <ip_input+0x18>
  if (inet_chksum(iphdr, iphdr_hlen) != 0) {
  4017d8:	4621      	mov	r1, r4
  4017da:	4640      	mov	r0, r8
  4017dc:	4b51      	ldr	r3, [pc, #324]	; (401924 <ip_input+0x190>)
  4017de:	4798      	blx	r3
  4017e0:	b9a0      	cbnz	r0, 40180c <ip_input+0x78>
  pbuf_realloc(p, iphdr_len);
  4017e2:	4631      	mov	r1, r6
  4017e4:	4628      	mov	r0, r5
  4017e6:	4b50      	ldr	r3, [pc, #320]	; (401928 <ip_input+0x194>)
  4017e8:	4798      	blx	r3
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
  4017ea:	f8d8 2010 	ldr.w	r2, [r8, #16]
  4017ee:	4b4f      	ldr	r3, [pc, #316]	; (40192c <ip_input+0x198>)
  4017f0:	601a      	str	r2, [r3, #0]
  ip_addr_copy(current_iphdr_src, iphdr->src);
  4017f2:	f8d8 200c 	ldr.w	r2, [r8, #12]
  4017f6:	4b4e      	ldr	r3, [pc, #312]	; (401930 <ip_input+0x19c>)
  4017f8:	601a      	str	r2, [r3, #0]
    netif = inp;
  4017fa:	463c      	mov	r4, r7
    int first = 1;
  4017fc:	2601      	movs	r6, #1
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  4017fe:	f8df a12c 	ldr.w	sl, [pc, #300]	; 40192c <ip_input+0x198>
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
  401802:	f8df b130 	ldr.w	fp, [pc, #304]	; 401934 <ip_input+0x1a0>
        netif = netif_list;
  401806:	f8df 9150 	ldr.w	r9, [pc, #336]	; 401958 <ip_input+0x1c4>
  40180a:	e00c      	b.n	401826 <ip_input+0x92>
    pbuf_free(p);
  40180c:	4628      	mov	r0, r5
  40180e:	4b43      	ldr	r3, [pc, #268]	; (40191c <ip_input+0x188>)
  401810:	4798      	blx	r3
    return ERR_OK;
  401812:	e7cb      	b.n	4017ac <ip_input+0x18>
      if (first) {
  401814:	2e00      	cmp	r6, #0
  401816:	d05e      	beq.n	4018d6 <ip_input+0x142>
        netif = netif_list;
  401818:	f8d9 4000 	ldr.w	r4, [r9]
      if (netif == inp) {
  40181c:	42bc      	cmp	r4, r7
        netif = netif->next;
  40181e:	bf08      	it	eq
  401820:	6824      	ldreq	r4, [r4, #0]
  401822:	2600      	movs	r6, #0
    } while(netif != NULL);
  401824:	b194      	cbz	r4, 40184c <ip_input+0xb8>
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
  401826:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
  40182a:	f013 0f01 	tst.w	r3, #1
  40182e:	d0f1      	beq.n	401814 <ip_input+0x80>
  401830:	f114 0f04 	cmn.w	r4, #4
  401834:	d0ee      	beq.n	401814 <ip_input+0x80>
  401836:	6863      	ldr	r3, [r4, #4]
  401838:	2b00      	cmp	r3, #0
  40183a:	d0eb      	beq.n	401814 <ip_input+0x80>
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  40183c:	f8da 0000 	ldr.w	r0, [sl]
  401840:	4283      	cmp	r3, r0
  401842:	d003      	beq.n	40184c <ip_input+0xb8>
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
  401844:	4621      	mov	r1, r4
  401846:	47d8      	blx	fp
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  401848:	2800      	cmp	r0, #0
  40184a:	d0e3      	beq.n	401814 <ip_input+0x80>
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
  40184c:	4639      	mov	r1, r7
  40184e:	4b38      	ldr	r3, [pc, #224]	; (401930 <ip_input+0x19c>)
  401850:	6818      	ldr	r0, [r3, #0]
  401852:	4b38      	ldr	r3, [pc, #224]	; (401934 <ip_input+0x1a0>)
  401854:	4798      	blx	r3
  401856:	2800      	cmp	r0, #0
  401858:	d13f      	bne.n	4018da <ip_input+0x146>
         (ip_addr_ismulticast(&current_iphdr_src))) {
  40185a:	4b35      	ldr	r3, [pc, #212]	; (401930 <ip_input+0x19c>)
  40185c:	681b      	ldr	r3, [r3, #0]
  40185e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
  401862:	2be0      	cmp	r3, #224	; 0xe0
  401864:	d039      	beq.n	4018da <ip_input+0x146>
  if (netif == NULL) {
  401866:	2c00      	cmp	r4, #0
  401868:	d03b      	beq.n	4018e2 <ip_input+0x14e>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
  40186a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
  40186e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  401872:	b29b      	uxth	r3, r3
  401874:	b13b      	cbz	r3, 401886 <ip_input+0xf2>
    p = ip_reass(p);
  401876:	4628      	mov	r0, r5
  401878:	4b2f      	ldr	r3, [pc, #188]	; (401938 <ip_input+0x1a4>)
  40187a:	4798      	blx	r3
    if (p == NULL) {
  40187c:	4605      	mov	r5, r0
  40187e:	2800      	cmp	r0, #0
  401880:	d094      	beq.n	4017ac <ip_input+0x18>
    iphdr = (struct ip_hdr *)p->payload;
  401882:	f8d0 8004 	ldr.w	r8, [r0, #4]
  current_netif = inp;
  401886:	4b2d      	ldr	r3, [pc, #180]	; (40193c <ip_input+0x1a8>)
  401888:	601f      	str	r7, [r3, #0]
  current_header = iphdr;
  40188a:	4b2d      	ldr	r3, [pc, #180]	; (401940 <ip_input+0x1ac>)
  40188c:	f8c3 8000 	str.w	r8, [r3]
  if (raw_input(p, inp) == 0)
  401890:	4639      	mov	r1, r7
  401892:	4628      	mov	r0, r5
  401894:	4b2b      	ldr	r3, [pc, #172]	; (401944 <ip_input+0x1b0>)
  401896:	4798      	blx	r3
  401898:	bb58      	cbnz	r0, 4018f2 <ip_input+0x15e>
    switch (IPH_PROTO(iphdr)) {
  40189a:	f898 3009 	ldrb.w	r3, [r8, #9]
  40189e:	2b06      	cmp	r3, #6
  4018a0:	d031      	beq.n	401906 <ip_input+0x172>
  4018a2:	2b11      	cmp	r3, #17
  4018a4:	d021      	beq.n	4018ea <ip_input+0x156>
  4018a6:	2b01      	cmp	r3, #1
  4018a8:	d032      	beq.n	401910 <ip_input+0x17c>
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
  4018aa:	4639      	mov	r1, r7
  4018ac:	4b1f      	ldr	r3, [pc, #124]	; (40192c <ip_input+0x198>)
  4018ae:	6818      	ldr	r0, [r3, #0]
  4018b0:	4b20      	ldr	r3, [pc, #128]	; (401934 <ip_input+0x1a0>)
  4018b2:	4798      	blx	r3
  4018b4:	b958      	cbnz	r0, 4018ce <ip_input+0x13a>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
  4018b6:	4b1d      	ldr	r3, [pc, #116]	; (40192c <ip_input+0x198>)
  4018b8:	681b      	ldr	r3, [r3, #0]
  4018ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
  4018be:	2be0      	cmp	r3, #224	; 0xe0
  4018c0:	d005      	beq.n	4018ce <ip_input+0x13a>
        p->payload = iphdr;
  4018c2:	f8c5 8004 	str.w	r8, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
  4018c6:	2102      	movs	r1, #2
  4018c8:	4628      	mov	r0, r5
  4018ca:	4b1f      	ldr	r3, [pc, #124]	; (401948 <ip_input+0x1b4>)
  4018cc:	4798      	blx	r3
      pbuf_free(p);
  4018ce:	4628      	mov	r0, r5
  4018d0:	4b12      	ldr	r3, [pc, #72]	; (40191c <ip_input+0x188>)
  4018d2:	4798      	blx	r3
  4018d4:	e00d      	b.n	4018f2 <ip_input+0x15e>
        netif = netif->next;
  4018d6:	6824      	ldr	r4, [r4, #0]
  4018d8:	e7a0      	b.n	40181c <ip_input+0x88>
      pbuf_free(p);
  4018da:	4628      	mov	r0, r5
  4018dc:	4b0f      	ldr	r3, [pc, #60]	; (40191c <ip_input+0x188>)
  4018de:	4798      	blx	r3
      return ERR_OK;
  4018e0:	e764      	b.n	4017ac <ip_input+0x18>
    pbuf_free(p);
  4018e2:	4628      	mov	r0, r5
  4018e4:	4b0d      	ldr	r3, [pc, #52]	; (40191c <ip_input+0x188>)
  4018e6:	4798      	blx	r3
    return ERR_OK;
  4018e8:	e760      	b.n	4017ac <ip_input+0x18>
      udp_input(p, inp);
  4018ea:	4639      	mov	r1, r7
  4018ec:	4628      	mov	r0, r5
  4018ee:	4b17      	ldr	r3, [pc, #92]	; (40194c <ip_input+0x1b8>)
  4018f0:	4798      	blx	r3
  current_netif = NULL;
  4018f2:	2300      	movs	r3, #0
  4018f4:	4a11      	ldr	r2, [pc, #68]	; (40193c <ip_input+0x1a8>)
  4018f6:	6013      	str	r3, [r2, #0]
  current_header = NULL;
  4018f8:	4a11      	ldr	r2, [pc, #68]	; (401940 <ip_input+0x1ac>)
  4018fa:	6013      	str	r3, [r2, #0]
  ip_addr_set_any(&current_iphdr_src);
  4018fc:	4a0c      	ldr	r2, [pc, #48]	; (401930 <ip_input+0x19c>)
  4018fe:	6013      	str	r3, [r2, #0]
  ip_addr_set_any(&current_iphdr_dest);
  401900:	4a0a      	ldr	r2, [pc, #40]	; (40192c <ip_input+0x198>)
  401902:	6013      	str	r3, [r2, #0]
  return ERR_OK;
  401904:	e752      	b.n	4017ac <ip_input+0x18>
      tcp_input(p, inp);
  401906:	4639      	mov	r1, r7
  401908:	4628      	mov	r0, r5
  40190a:	4b11      	ldr	r3, [pc, #68]	; (401950 <ip_input+0x1bc>)
  40190c:	4798      	blx	r3
      break;
  40190e:	e7f0      	b.n	4018f2 <ip_input+0x15e>
      icmp_input(p, inp);
  401910:	4639      	mov	r1, r7
  401912:	4628      	mov	r0, r5
  401914:	4b0f      	ldr	r3, [pc, #60]	; (401954 <ip_input+0x1c0>)
  401916:	4798      	blx	r3
      break;
  401918:	e7eb      	b.n	4018f2 <ip_input+0x15e>
  40191a:	bf00      	nop
  40191c:	00402861 	.word	0x00402861
  401920:	00401387 	.word	0x00401387
  401924:	004016ed 	.word	0x004016ed
  401928:	00402a01 	.word	0x00402a01
  40192c:	204039a0 	.word	0x204039a0
  401930:	20403998 	.word	0x20403998
  401934:	00401a99 	.word	0x00401a99
  401938:	00401d09 	.word	0x00401d09
  40193c:	2040399c 	.word	0x2040399c
  401940:	204039a4 	.word	0x204039a4
  401944:	00402c81 	.word	0x00402c81
  401948:	004015b9 	.word	0x004015b9
  40194c:	00405db5 	.word	0x00405db5
  401950:	004046b1 	.word	0x004046b1
  401954:	00401461 	.word	0x00401461
  401958:	204049bc 	.word	0x204049bc

0040195c <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  40195c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401960:	b087      	sub	sp, #28
  401962:	4605      	mov	r5, r0
  401964:	9102      	str	r1, [sp, #8]
  401966:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
  40196a:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
  40196e:	9e12      	ldr	r6, [sp, #72]	; 0x48
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
  401970:	9201      	str	r2, [sp, #4]
  401972:	2a00      	cmp	r2, #0
  401974:	d057      	beq.n	401a26 <ip_output_if+0xca>
  401976:	469a      	mov	sl, r3
  401978:	4617      	mov	r7, r2
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
  40197a:	2114      	movs	r1, #20
  40197c:	4b32      	ldr	r3, [pc, #200]	; (401a48 <ip_output_if+0xec>)
  40197e:	4798      	blx	r3
  401980:	2800      	cmp	r0, #0
  401982:	d15d      	bne.n	401a40 <ip_output_if+0xe4>
      IP_STATS_INC(ip.err);
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
  401984:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
  401986:	f884 a008 	strb.w	sl, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
  40198a:	f884 b009 	strb.w	fp, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
  40198e:	683b      	ldr	r3, [r7, #0]
  401990:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
  401992:	b29a      	uxth	r2, r3
  401994:	9203      	str	r2, [sp, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
  401996:	ea4f 4913 	mov.w	r9, r3, lsr #16
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
  40199a:	2345      	movs	r3, #69	; 0x45
  40199c:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
  40199e:	f884 8001 	strb.w	r8, [r4, #1]
    chk_sum += LWIP_MAKE_U16(proto, ttl);
  4019a2:	ea4a 2a0b 	orr.w	sl, sl, fp, lsl #8
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
  4019a6:	ea4f 2808 	mov.w	r8, r8, lsl #8
  4019aa:	ea48 0803 	orr.w	r8, r8, r3
  4019ae:	eb0a 0b08 	add.w	fp, sl, r8
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
  4019b2:	8928      	ldrh	r0, [r5, #8]
  4019b4:	4f25      	ldr	r7, [pc, #148]	; (401a4c <ip_output_if+0xf0>)
  4019b6:	47b8      	blx	r7
  4019b8:	4682      	mov	sl, r0
  4019ba:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
  4019bc:	2300      	movs	r3, #0
  4019be:	71a3      	strb	r3, [r4, #6]
  4019c0:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, htons(ip_id));
  4019c2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 401a54 <ip_output_if+0xf8>
  4019c6:	f8b8 0000 	ldrh.w	r0, [r8]
  4019ca:	47b8      	blx	r7
  4019cc:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
  4019ce:	f8b8 3000 	ldrh.w	r3, [r8]
  4019d2:	3301      	adds	r3, #1
  4019d4:	f8a8 3000 	strh.w	r3, [r8]

    if (ip_addr_isany(src)) {
  4019d8:	9b02      	ldr	r3, [sp, #8]
  4019da:	b10b      	cbz	r3, 4019e0 <ip_output_if+0x84>
  4019dc:	681b      	ldr	r3, [r3, #0]
  4019de:	bb03      	cbnz	r3, 401a22 <ip_output_if+0xc6>
      ip_addr_copy(iphdr->src, netif->ip_addr);
  4019e0:	6873      	ldr	r3, [r6, #4]
  4019e2:	60e3      	str	r3, [r4, #12]
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
  4019e4:	68e2      	ldr	r2, [r4, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
  4019e6:	fa1b f382 	uxtah	r3, fp, r2
  4019ea:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4019ee:	9a03      	ldr	r2, [sp, #12]
  4019f0:	4413      	add	r3, r2
  4019f2:	444b      	add	r3, r9
  4019f4:	449a      	add	sl, r3
  4019f6:	4450      	add	r0, sl
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
  4019f8:	fa1f fa80 	uxth.w	sl, r0
  4019fc:	eb0a 4010 	add.w	r0, sl, r0, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
  401a00:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    chk_sum = ~chk_sum;
    iphdr->_chksum = chk_sum; /* network order */
  401a04:	43c0      	mvns	r0, r0
  401a06:	8160      	strh	r0, [r4, #10]
  }
#endif /* LWIP_IGMP */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
  401a08:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
  401a0a:	b113      	cbz	r3, 401a12 <ip_output_if+0xb6>
  401a0c:	892a      	ldrh	r2, [r5, #8]
  401a0e:	429a      	cmp	r2, r3
  401a10:	d810      	bhi.n	401a34 <ip_output_if+0xd8>
    return ip_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
  401a12:	6973      	ldr	r3, [r6, #20]
  401a14:	9a01      	ldr	r2, [sp, #4]
  401a16:	4629      	mov	r1, r5
  401a18:	4630      	mov	r0, r6
  401a1a:	4798      	blx	r3
}
  401a1c:	b007      	add	sp, #28
  401a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ip_addr_copy(iphdr->src, *src);
  401a22:	60e3      	str	r3, [r4, #12]
  401a24:	e7de      	b.n	4019e4 <ip_output_if+0x88>
    ip_addr_copy(dest_addr, iphdr->dest);
  401a26:	6843      	ldr	r3, [r0, #4]
  401a28:	691b      	ldr	r3, [r3, #16]
  401a2a:	aa06      	add	r2, sp, #24
  401a2c:	f842 3d04 	str.w	r3, [r2, #-4]!
  401a30:	9201      	str	r2, [sp, #4]
  401a32:	e7e9      	b.n	401a08 <ip_output_if+0xac>
    return ip_frag(p, netif, dest);
  401a34:	9a01      	ldr	r2, [sp, #4]
  401a36:	4631      	mov	r1, r6
  401a38:	4628      	mov	r0, r5
  401a3a:	4b05      	ldr	r3, [pc, #20]	; (401a50 <ip_output_if+0xf4>)
  401a3c:	4798      	blx	r3
  401a3e:	e7ed      	b.n	401a1c <ip_output_if+0xc0>
      return ERR_BUF;
  401a40:	f06f 0001 	mvn.w	r0, #1
  401a44:	e7ea      	b.n	401a1c <ip_output_if+0xc0>
  401a46:	bf00      	nop
  401a48:	004027d5 	.word	0x004027d5
  401a4c:	0040137d 	.word	0x0040137d
  401a50:	0040206d 	.word	0x0040206d
  401a54:	20400a78 	.word	0x20400a78

00401a58 <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
  401a58:	b5f0      	push	{r4, r5, r6, r7, lr}
  401a5a:	b085      	sub	sp, #20
  401a5c:	4605      	mov	r5, r0
  401a5e:	460e      	mov	r6, r1
  401a60:	4614      	mov	r4, r2
  401a62:	461f      	mov	r7, r3

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(dest)) == NULL) {
  401a64:	4610      	mov	r0, r2
  401a66:	4b0a      	ldr	r3, [pc, #40]	; (401a90 <ip_output+0x38>)
  401a68:	4798      	blx	r3
  401a6a:	b170      	cbz	r0, 401a8a <ip_output+0x32>
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    return ERR_RTE;
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
  401a6c:	9002      	str	r0, [sp, #8]
  401a6e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
  401a72:	9301      	str	r3, [sp, #4]
  401a74:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  401a78:	9300      	str	r3, [sp, #0]
  401a7a:	463b      	mov	r3, r7
  401a7c:	4622      	mov	r2, r4
  401a7e:	4631      	mov	r1, r6
  401a80:	4628      	mov	r0, r5
  401a82:	4c04      	ldr	r4, [pc, #16]	; (401a94 <ip_output+0x3c>)
  401a84:	47a0      	blx	r4
}
  401a86:	b005      	add	sp, #20
  401a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_RTE;
  401a8a:	f06f 0003 	mvn.w	r0, #3
  401a8e:	e7fa      	b.n	401a86 <ip_output+0x2e>
  401a90:	00401751 	.word	0x00401751
  401a94:	0040195d 	.word	0x0040195d

00401a98 <ip4_addr_isbroadcast>:
{
  ip_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
  401a98:	1e43      	subs	r3, r0, #1
  401a9a:	f113 0f03 	cmn.w	r3, #3
  401a9e:	d812      	bhi.n	401ac6 <ip4_addr_isbroadcast+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
  401aa0:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
  401aa4:	f013 0f02 	tst.w	r3, #2
  401aa8:	d00f      	beq.n	401aca <ip4_addr_isbroadcast+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
  401aaa:	684b      	ldr	r3, [r1, #4]
  401aac:	4298      	cmp	r0, r3
  401aae:	d00e      	beq.n	401ace <ip4_addr_isbroadcast+0x36>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
  401ab0:	688a      	ldr	r2, [r1, #8]
  401ab2:	4043      	eors	r3, r0
  401ab4:	4213      	tst	r3, r2
  401ab6:	d10c      	bne.n	401ad2 <ip4_addr_isbroadcast+0x3a>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
  401ab8:	43d2      	mvns	r2, r2
  401aba:	ea32 0300 	bics.w	r3, r2, r0
    return 1;
  401abe:	bf0c      	ite	eq
  401ac0:	2001      	moveq	r0, #1
  401ac2:	2000      	movne	r0, #0
  401ac4:	4770      	bx	lr
  401ac6:	2001      	movs	r0, #1
  401ac8:	4770      	bx	lr
    return 0;
  401aca:	2000      	movs	r0, #0
  401acc:	4770      	bx	lr
    return 0;
  401ace:	2000      	movs	r0, #0
  401ad0:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  401ad2:	2000      	movs	r0, #0
  }
}
  401ad4:	4770      	bx	lr
	...

00401ad8 <ipaddr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *ipaddr_ntoa_r(const ip_addr_t *addr, char *buf, int buflen)
{
  401ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401adc:	b085      	sub	sp, #20
  401ade:	9101      	str	r1, [sp, #4]
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
  401ae0:	6803      	ldr	r3, [r0, #0]
  401ae2:	f10d 0c10 	add.w	ip, sp, #16
  401ae6:	f84c 3d04 	str.w	r3, [ip, #-4]!

  rp = buf;
  401aea:	460c      	mov	r4, r1
  int len = 0;
  401aec:	f04f 0800 	mov.w	r8, #0
  401af0:	46c1      	mov	r9, r8
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
  401af2:	4f27      	ldr	r7, [pc, #156]	; (401b90 <ipaddr_ntoa_r+0xb8>)
  401af4:	f102 0e01 	add.w	lr, r2, #1
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
      return NULL;
    }
    *rp++ = '.';
  401af8:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
  401afc:	4666      	mov	r6, ip
  401afe:	f89c 3000 	ldrb.w	r3, [ip]
  int len = 0;
  401b02:	4648      	mov	r0, r9
  401b04:	469a      	mov	sl, r3
  401b06:	e000      	b.n	401b0a <ipaddr_ntoa_r+0x32>
      inv[i++] = '0' + rem;
  401b08:	4628      	mov	r0, r5
      rem = *ap % (u8_t)10;
  401b0a:	fba7 310a 	umull	r3, r1, r7, sl
  401b0e:	08c9      	lsrs	r1, r1, #3
  401b10:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  401b14:	ebaa 0343 	sub.w	r3, sl, r3, lsl #1
      inv[i++] = '0' + rem;
  401b18:	1c45      	adds	r5, r0, #1
  401b1a:	b2ed      	uxtb	r5, r5
  401b1c:	3330      	adds	r3, #48	; 0x30
  401b1e:	f10d 0a10 	add.w	sl, sp, #16
  401b22:	4482      	add	sl, r0
  401b24:	f80a 3c08 	strb.w	r3, [sl, #-8]
    } while(*ap);
  401b28:	f001 0aff 	and.w	sl, r1, #255	; 0xff
  401b2c:	2900      	cmp	r1, #0
  401b2e:	d1eb      	bne.n	401b08 <ipaddr_ntoa_r+0x30>
  401b30:	f886 9000 	strb.w	r9, [r6]
  401b34:	f10c 0c01 	add.w	ip, ip, #1
    while(i--) {
  401b38:	b1ad      	cbz	r5, 401b66 <ipaddr_ntoa_r+0x8e>
      if (len++ >= buflen) {
  401b3a:	f108 0101 	add.w	r1, r8, #1
  401b3e:	4542      	cmp	r2, r8
  401b40:	dd21      	ble.n	401b86 <ipaddr_ntoa_r+0xae>
  401b42:	ab02      	add	r3, sp, #8
  401b44:	181d      	adds	r5, r3, r0
  401b46:	1e63      	subs	r3, r4, #1
  401b48:	4420      	add	r0, r4
  401b4a:	1c9e      	adds	r6, r3, #2
      *rp++ = inv[i];
  401b4c:	f815 4901 	ldrb.w	r4, [r5], #-1
  401b50:	f803 4f01 	strb.w	r4, [r3, #1]!
    while(i--) {
  401b54:	4298      	cmp	r0, r3
  401b56:	d008      	beq.n	401b6a <ipaddr_ntoa_r+0x92>
      if (len++ >= buflen) {
  401b58:	3101      	adds	r1, #1
  401b5a:	4571      	cmp	r1, lr
  401b5c:	d1f5      	bne.n	401b4a <ipaddr_ntoa_r+0x72>
        return NULL;
  401b5e:	2000      	movs	r0, #0
    ap++;
  }
  *--rp = 0;
  return buf;
}
  401b60:	b005      	add	sp, #20
  401b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while(i--) {
  401b66:	4641      	mov	r1, r8
  401b68:	4626      	mov	r6, r4
    if (len++ >= buflen) {
  401b6a:	f101 0801 	add.w	r8, r1, #1
  401b6e:	428a      	cmp	r2, r1
  401b70:	dd0b      	ble.n	401b8a <ipaddr_ntoa_r+0xb2>
    *rp++ = '.';
  401b72:	1c74      	adds	r4, r6, #1
  401b74:	f886 b000 	strb.w	fp, [r6]
  for(n = 0; n < 4; n++) {
  401b78:	ab04      	add	r3, sp, #16
  401b7a:	459c      	cmp	ip, r3
  401b7c:	d1be      	bne.n	401afc <ipaddr_ntoa_r+0x24>
  *--rp = 0;
  401b7e:	2300      	movs	r3, #0
  401b80:	7033      	strb	r3, [r6, #0]
  return buf;
  401b82:	9801      	ldr	r0, [sp, #4]
  401b84:	e7ec      	b.n	401b60 <ipaddr_ntoa_r+0x88>
        return NULL;
  401b86:	2000      	movs	r0, #0
  401b88:	e7ea      	b.n	401b60 <ipaddr_ntoa_r+0x88>
      return NULL;
  401b8a:	2000      	movs	r0, #0
  401b8c:	e7e8      	b.n	401b60 <ipaddr_ntoa_r+0x88>
  401b8e:	bf00      	nop
  401b90:	cccccccd 	.word	0xcccccccd

00401b94 <ipaddr_ntoa>:
{
  401b94:	b508      	push	{r3, lr}
  return ipaddr_ntoa_r(addr, str, 16);
  401b96:	2210      	movs	r2, #16
  401b98:	4901      	ldr	r1, [pc, #4]	; (401ba0 <ipaddr_ntoa+0xc>)
  401b9a:	4b02      	ldr	r3, [pc, #8]	; (401ba4 <ipaddr_ntoa+0x10>)
  401b9c:	4798      	blx	r3
}
  401b9e:	bd08      	pop	{r3, pc}
  401ba0:	20400a7c 	.word	0x20400a7c
  401ba4:	00401ad9 	.word	0x00401ad9

00401ba8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  401ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401bac:	4681      	mov	r9, r0
  401bae:	468a      	mov	sl, r1
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  }

  snmp_inc_ipreasmfails();
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
  401bb0:	6845      	ldr	r5, [r0, #4]
  401bb2:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
  401bb4:	889a      	ldrh	r2, [r3, #4]
  401bb6:	b322      	cbz	r2, 401c02 <ip_reass_free_complete_datagram+0x5a>
  u16_t pbufs_freed = 0;
  401bb8:	2400      	movs	r4, #0
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  401bba:	f8d9 6004 	ldr.w	r6, [r9, #4]
  while (p != NULL) {
  401bbe:	b16e      	cbz	r6, 401bdc <ip_reass_free_complete_datagram+0x34>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
    clen = pbuf_clen(pcur);
  401bc0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 401c58 <ip_reass_free_complete_datagram+0xb0>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
    pbuf_free(pcur);
  401bc4:	4f1f      	ldr	r7, [pc, #124]	; (401c44 <ip_reass_free_complete_datagram+0x9c>)
    iprh = (struct ip_reass_helper *)p->payload;
  401bc6:	6873      	ldr	r3, [r6, #4]
    p = iprh->next_pbuf;
  401bc8:	681d      	ldr	r5, [r3, #0]
    clen = pbuf_clen(pcur);
  401bca:	4630      	mov	r0, r6
  401bcc:	47c0      	blx	r8
    pbufs_freed += clen;
  401bce:	4404      	add	r4, r0
  401bd0:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
  401bd2:	4630      	mov	r0, r6
  401bd4:	47b8      	blx	r7
    p = iprh->next_pbuf;
  401bd6:	462e      	mov	r6, r5
  while (p != NULL) {
  401bd8:	2d00      	cmp	r5, #0
  401bda:	d1f4      	bne.n	401bc6 <ip_reass_free_complete_datagram+0x1e>
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
  401bdc:	4b1a      	ldr	r3, [pc, #104]	; (401c48 <ip_reass_free_complete_datagram+0xa0>)
  401bde:	681b      	ldr	r3, [r3, #0]
  401be0:	4599      	cmp	r9, r3
  401be2:	d029      	beq.n	401c38 <ip_reass_free_complete_datagram+0x90>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  401be4:	f8d9 3000 	ldr.w	r3, [r9]
  401be8:	f8ca 3000 	str.w	r3, [sl]
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
  401bec:	4649      	mov	r1, r9
  401bee:	2005      	movs	r0, #5
  401bf0:	4b16      	ldr	r3, [pc, #88]	; (401c4c <ip_reass_free_complete_datagram+0xa4>)
  401bf2:	4798      	blx	r3
  ip_reass_pbufcount -= pbufs_freed;
  401bf4:	4a16      	ldr	r2, [pc, #88]	; (401c50 <ip_reass_free_complete_datagram+0xa8>)
  401bf6:	8813      	ldrh	r3, [r2, #0]
  401bf8:	1b1b      	subs	r3, r3, r4
  401bfa:	8013      	strh	r3, [r2, #0]
}
  401bfc:	4620      	mov	r0, r4
  401bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ipr->p = iprh->next_pbuf;
  401c02:	681b      	ldr	r3, [r3, #0]
  401c04:	6043      	str	r3, [r0, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
  401c06:	686a      	ldr	r2, [r5, #4]
  401c08:	4603      	mov	r3, r0
  401c0a:	f853 1f08 	ldr.w	r1, [r3, #8]!
  401c0e:	685e      	ldr	r6, [r3, #4]
  401c10:	689c      	ldr	r4, [r3, #8]
  401c12:	68d8      	ldr	r0, [r3, #12]
  401c14:	6011      	str	r1, [r2, #0]
  401c16:	6056      	str	r6, [r2, #4]
  401c18:	6094      	str	r4, [r2, #8]
  401c1a:	60d0      	str	r0, [r2, #12]
  401c1c:	6919      	ldr	r1, [r3, #16]
  401c1e:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
  401c20:	2101      	movs	r1, #1
  401c22:	4628      	mov	r0, r5
  401c24:	4b0b      	ldr	r3, [pc, #44]	; (401c54 <ip_reass_free_complete_datagram+0xac>)
  401c26:	4798      	blx	r3
    clen = pbuf_clen(p);
  401c28:	4628      	mov	r0, r5
  401c2a:	4b0b      	ldr	r3, [pc, #44]	; (401c58 <ip_reass_free_complete_datagram+0xb0>)
  401c2c:	4798      	blx	r3
    pbufs_freed += clen;
  401c2e:	b284      	uxth	r4, r0
    pbuf_free(p);
  401c30:	4628      	mov	r0, r5
  401c32:	4b04      	ldr	r3, [pc, #16]	; (401c44 <ip_reass_free_complete_datagram+0x9c>)
  401c34:	4798      	blx	r3
  401c36:	e7c0      	b.n	401bba <ip_reass_free_complete_datagram+0x12>
    reassdatagrams = ipr->next;
  401c38:	f8d9 2000 	ldr.w	r2, [r9]
  401c3c:	4b02      	ldr	r3, [pc, #8]	; (401c48 <ip_reass_free_complete_datagram+0xa0>)
  401c3e:	601a      	str	r2, [r3, #0]
  401c40:	e7d4      	b.n	401bec <ip_reass_free_complete_datagram+0x44>
  401c42:	bf00      	nop
  401c44:	00402861 	.word	0x00402861
  401c48:	20400a90 	.word	0x20400a90
  401c4c:	00402689 	.word	0x00402689
  401c50:	20400a8c 	.word	0x20400a8c
  401c54:	004015c9 	.word	0x004015c9
  401c58:	00402a61 	.word	0x00402a61

00401c5c <ip_reass_remove_oldest_datagram>:
{
  401c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401c60:	4605      	mov	r5, r0
  401c62:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
  401c64:	2600      	movs	r6, #0
    r = reassdatagrams;
  401c66:	4f19      	ldr	r7, [pc, #100]	; (401ccc <ip_reass_remove_oldest_datagram+0x70>)
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
  401c68:	f8df 9064 	ldr.w	r9, [pc, #100]	; 401cd0 <ip_reass_remove_oldest_datagram+0x74>
  401c6c:	e022      	b.n	401cb4 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
  401c6e:	3401      	adds	r4, #1
        if (oldest == NULL) {
  401c70:	b1b8      	cbz	r0, 401ca2 <ip_reass_remove_oldest_datagram+0x46>
        } else if (r->timer <= oldest->timer) {
  401c72:	f893 c01f 	ldrb.w	ip, [r3, #31]
  401c76:	7fc2      	ldrb	r2, [r0, #31]
  401c78:	4594      	cmp	ip, r2
  401c7a:	bf98      	it	ls
  401c7c:	4618      	movls	r0, r3
      if (r->next != NULL) {
  401c7e:	681a      	ldr	r2, [r3, #0]
  401c80:	b18a      	cbz	r2, 401ca6 <ip_reass_remove_oldest_datagram+0x4a>
  401c82:	4619      	mov	r1, r3
  401c84:	4613      	mov	r3, r2
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  401c86:	695a      	ldr	r2, [r3, #20]
  401c88:	4572      	cmp	r2, lr
  401c8a:	d1f0      	bne.n	401c6e <ip_reass_remove_oldest_datagram+0x12>
  401c8c:	f8d5 c010 	ldr.w	ip, [r5, #16]
  401c90:	699a      	ldr	r2, [r3, #24]
  401c92:	4562      	cmp	r2, ip
  401c94:	d1eb      	bne.n	401c6e <ip_reass_remove_oldest_datagram+0x12>
  401c96:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
  401c9a:	88aa      	ldrh	r2, [r5, #4]
  401c9c:	4594      	cmp	ip, r2
  401c9e:	d1e6      	bne.n	401c6e <ip_reass_remove_oldest_datagram+0x12>
  401ca0:	e7ed      	b.n	401c7e <ip_reass_remove_oldest_datagram+0x22>
  401ca2:	4618      	mov	r0, r3
  401ca4:	e7eb      	b.n	401c7e <ip_reass_remove_oldest_datagram+0x22>
    if (oldest != NULL) {
  401ca6:	b108      	cbz	r0, 401cac <ip_reass_remove_oldest_datagram+0x50>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
  401ca8:	47c8      	blx	r9
      pbufs_freed += pbufs_freed_current;
  401caa:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
  401cac:	4546      	cmp	r6, r8
  401cae:	da09      	bge.n	401cc4 <ip_reass_remove_oldest_datagram+0x68>
  401cb0:	2c01      	cmp	r4, #1
  401cb2:	dd07      	ble.n	401cc4 <ip_reass_remove_oldest_datagram+0x68>
    r = reassdatagrams;
  401cb4:	683b      	ldr	r3, [r7, #0]
    while (r != NULL) {
  401cb6:	b12b      	cbz	r3, 401cc4 <ip_reass_remove_oldest_datagram+0x68>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  401cb8:	f8d5 e00c 	ldr.w	lr, [r5, #12]
  401cbc:	2400      	movs	r4, #0
  401cbe:	4621      	mov	r1, r4
  401cc0:	4620      	mov	r0, r4
  401cc2:	e7e0      	b.n	401c86 <ip_reass_remove_oldest_datagram+0x2a>
}
  401cc4:	4630      	mov	r0, r6
  401cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401cca:	bf00      	nop
  401ccc:	20400a90 	.word	0x20400a90
  401cd0:	00401ba9 	.word	0x00401ba9

00401cd4 <ip_reass_tmr>:
  r = reassdatagrams;
  401cd4:	4b0a      	ldr	r3, [pc, #40]	; (401d00 <ip_reass_tmr+0x2c>)
  401cd6:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
  401cd8:	b188      	cbz	r0, 401cfe <ip_reass_tmr+0x2a>
{
  401cda:	b570      	push	{r4, r5, r6, lr}
  while (r != NULL) {
  401cdc:	2400      	movs	r4, #0
      ip_reass_free_complete_datagram(tmp, prev);
  401cde:	4e09      	ldr	r6, [pc, #36]	; (401d04 <ip_reass_tmr+0x30>)
  401ce0:	e004      	b.n	401cec <ip_reass_tmr+0x18>
      r = r->next;
  401ce2:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
  401ce4:	4621      	mov	r1, r4
  401ce6:	47b0      	blx	r6
      r = r->next;
  401ce8:	4628      	mov	r0, r5
  while (r != NULL) {
  401cea:	b138      	cbz	r0, 401cfc <ip_reass_tmr+0x28>
    if (r->timer > 0) {
  401cec:	7fc3      	ldrb	r3, [r0, #31]
  401cee:	2b00      	cmp	r3, #0
  401cf0:	d0f7      	beq.n	401ce2 <ip_reass_tmr+0xe>
      r->timer--;
  401cf2:	3b01      	subs	r3, #1
  401cf4:	77c3      	strb	r3, [r0, #31]
  401cf6:	4604      	mov	r4, r0
      r = r->next;
  401cf8:	6800      	ldr	r0, [r0, #0]
  401cfa:	e7f6      	b.n	401cea <ip_reass_tmr+0x16>
  401cfc:	bd70      	pop	{r4, r5, r6, pc}
  401cfe:	4770      	bx	lr
  401d00:	20400a90 	.word	0x20400a90
  401d04:	00401ba9 	.word	0x00401ba9

00401d08 <ip_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip_reass(struct pbuf *p)
{
  401d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d0c:	b083      	sub	sp, #12
  401d0e:	4607      	mov	r7, r0
  struct ip_reassdata *ipr_prev = NULL;

  IPFRAG_STATS_INC(ip_frag.recv);
  snmp_inc_ipreasmreqds();

  fraghdr = (struct ip_hdr*)p->payload;
  401d10:	6846      	ldr	r6, [r0, #4]

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
  401d12:	7833      	ldrb	r3, [r6, #0]
  401d14:	f003 030f 	and.w	r3, r3, #15
  401d18:	2b05      	cmp	r3, #5
  401d1a:	d122      	bne.n	401d62 <ip_reass+0x5a>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  401d1c:	88f0      	ldrh	r0, [r6, #6]
  401d1e:	4ca0      	ldr	r4, [pc, #640]	; (401fa0 <ip_reass+0x298>)
  401d20:	47a0      	blx	r4
  401d22:	4683      	mov	fp, r0
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  401d24:	8870      	ldrh	r0, [r6, #2]
  401d26:	47a0      	blx	r4
  401d28:	9001      	str	r0, [sp, #4]
  401d2a:	f896 a000 	ldrb.w	sl, [r6]

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  401d2e:	4638      	mov	r0, r7
  401d30:	4b9c      	ldr	r3, [pc, #624]	; (401fa4 <ip_reass+0x29c>)
  401d32:	4798      	blx	r3
  401d34:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
  401d36:	4b9c      	ldr	r3, [pc, #624]	; (401fa8 <ip_reass+0x2a0>)
  401d38:	881b      	ldrh	r3, [r3, #0]
  401d3a:	4403      	add	r3, r0
  401d3c:	2b0a      	cmp	r3, #10
  401d3e:	dc06      	bgt.n	401d4e <ip_reass+0x46>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  401d40:	4b9a      	ldr	r3, [pc, #616]	; (401fac <ip_reass+0x2a4>)
  401d42:	681c      	ldr	r4, [r3, #0]
  401d44:	2c00      	cmp	r4, #0
  401d46:	d079      	beq.n	401e3c <ip_reass+0x134>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  401d48:	68f2      	ldr	r2, [r6, #12]
  401d4a:	2500      	movs	r5, #0
  401d4c:	e014      	b.n	401d78 <ip_reass+0x70>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  401d4e:	4601      	mov	r1, r0
  401d50:	4630      	mov	r0, r6
  401d52:	4b97      	ldr	r3, [pc, #604]	; (401fb0 <ip_reass+0x2a8>)
  401d54:	4798      	blx	r3
  401d56:	b120      	cbz	r0, 401d62 <ip_reass+0x5a>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
  401d58:	4b93      	ldr	r3, [pc, #588]	; (401fa8 <ip_reass+0x2a0>)
  401d5a:	881b      	ldrh	r3, [r3, #0]
  401d5c:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  401d5e:	2b0a      	cmp	r3, #10
  401d60:	ddee      	ble.n	401d40 <ip_reass+0x38>
  return NULL;

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
  401d62:	4638      	mov	r0, r7
  401d64:	4b93      	ldr	r3, [pc, #588]	; (401fb4 <ip_reass+0x2ac>)
  401d66:	4798      	blx	r3
  return NULL;
  401d68:	f04f 0800 	mov.w	r8, #0
  401d6c:	e101      	b.n	401f72 <ip_reass+0x26a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  401d6e:	6823      	ldr	r3, [r4, #0]
  401d70:	4625      	mov	r5, r4
  401d72:	2b00      	cmp	r3, #0
  401d74:	d062      	beq.n	401e3c <ip_reass+0x134>
  401d76:	461c      	mov	r4, r3
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  401d78:	6963      	ldr	r3, [r4, #20]
  401d7a:	4293      	cmp	r3, r2
  401d7c:	d1f7      	bne.n	401d6e <ip_reass+0x66>
  401d7e:	6933      	ldr	r3, [r6, #16]
  401d80:	69a1      	ldr	r1, [r4, #24]
  401d82:	4299      	cmp	r1, r3
  401d84:	d1f3      	bne.n	401d6e <ip_reass+0x66>
  401d86:	89a1      	ldrh	r1, [r4, #12]
  401d88:	88b3      	ldrh	r3, [r6, #4]
  401d8a:	4299      	cmp	r1, r3
  401d8c:	d1ef      	bne.n	401d6e <ip_reass+0x66>
  if (ipr == NULL) {
  401d8e:	2c00      	cmp	r4, #0
  401d90:	d053      	beq.n	401e3a <ip_reass+0x132>
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
  401d92:	88f0      	ldrh	r0, [r6, #6]
  401d94:	4b82      	ldr	r3, [pc, #520]	; (401fa0 <ip_reass+0x298>)
  401d96:	4798      	blx	r3
  401d98:	f3c0 000c 	ubfx	r0, r0, #0, #13
  401d9c:	2800      	cmp	r0, #0
  401d9e:	f000 8084 	beq.w	401eaa <ip_reass+0x1a2>
  ip_reass_pbufcount += clen;
  401da2:	4b81      	ldr	r3, [pc, #516]	; (401fa8 <ip_reass+0x2a0>)
  401da4:	881a      	ldrh	r2, [r3, #0]
  401da6:	4490      	add	r8, r2
  401da8:	f8a3 8000 	strh.w	r8, [r3]
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
  401dac:	88f3      	ldrh	r3, [r6, #6]
  401dae:	f013 0f20 	tst.w	r3, #32
  401db2:	d10c      	bne.n	401dce <ip_reass+0xc6>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
  401db4:	7fa3      	ldrb	r3, [r4, #30]
  401db6:	f043 0301 	orr.w	r3, r3, #1
  401dba:	77a3      	strb	r3, [r4, #30]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  401dbc:	f00a 0a0f 	and.w	sl, sl, #15
  401dc0:	9b01      	ldr	r3, [sp, #4]
  401dc2:	eba3 098a 	sub.w	r9, r3, sl, lsl #2
    ipr->datagram_len = offset + len;
  401dc6:	eb09 0bcb 	add.w	fp, r9, fp, lsl #3
  401dca:	f8a4 b01c 	strh.w	fp, [r4, #28]
  fraghdr = (struct ip_hdr*)new_p->payload; 
  401dce:	687e      	ldr	r6, [r7, #4]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  401dd0:	8870      	ldrh	r0, [r6, #2]
  401dd2:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 401fa0 <ip_reass+0x298>
  401dd6:	47c8      	blx	r9
  401dd8:	f896 8000 	ldrb.w	r8, [r6]
  401ddc:	f008 080f 	and.w	r8, r8, #15
  401de0:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  401de4:	fa1f f888 	uxth.w	r8, r8
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  401de8:	88f0      	ldrh	r0, [r6, #6]
  401dea:	47c8      	blx	r9
  401dec:	f3c0 000c 	ubfx	r0, r0, #0, #13
  401df0:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
  401df2:	f8d7 c004 	ldr.w	ip, [r7, #4]
  iprh->next_pbuf = NULL;
  401df6:	2300      	movs	r3, #0
  401df8:	f88c 3000 	strb.w	r3, [ip]
  401dfc:	f88c 3001 	strb.w	r3, [ip, #1]
  401e00:	f88c 3002 	strb.w	r3, [ip, #2]
  401e04:	f88c 3003 	strb.w	r3, [ip, #3]
  iprh->start = offset;
  401e08:	f8ac 0004 	strh.w	r0, [ip, #4]
  iprh->end = offset + len;
  401e0c:	4480      	add	r8, r0
  401e0e:	fa1f f888 	uxth.w	r8, r8
  401e12:	f8ac 8006 	strh.w	r8, [ip, #6]
  for (q = ipr->p; q != NULL;) {
  401e16:	6862      	ldr	r2, [r4, #4]
  401e18:	2a00      	cmp	r2, #0
  401e1a:	f000 809a 	beq.w	401f52 <ip_reass+0x24a>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  401e1e:	6853      	ldr	r3, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
  401e20:	8899      	ldrh	r1, [r3, #4]
  401e22:	4288      	cmp	r0, r1
  401e24:	f0c0 80ad 	bcc.w	401f82 <ip_reass+0x27a>
    } else if(iprh->start == iprh_tmp->start) {
  401e28:	f000 8097 	beq.w	401f5a <ip_reass+0x252>
    } else if(iprh->start < iprh_tmp->end) {
  401e2c:	88da      	ldrh	r2, [r3, #6]
  401e2e:	4282      	cmp	r2, r0
  401e30:	f200 8093 	bhi.w	401f5a <ip_reass+0x252>
  401e34:	f04f 0e01 	mov.w	lr, #1
  401e38:	e078      	b.n	401f2c <ip_reass+0x224>
  401e3a:	462c      	mov	r4, r5
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  401e3c:	2005      	movs	r0, #5
  401e3e:	4b5e      	ldr	r3, [pc, #376]	; (401fb8 <ip_reass+0x2b0>)
  401e40:	4798      	blx	r3
  if (ipr == NULL) {
  401e42:	4681      	mov	r9, r0
  401e44:	b318      	cbz	r0, 401e8e <ip_reass+0x186>
  memset(ipr, 0, sizeof(struct ip_reassdata));
  401e46:	2220      	movs	r2, #32
  401e48:	2100      	movs	r1, #0
  401e4a:	4648      	mov	r0, r9
  401e4c:	4b5b      	ldr	r3, [pc, #364]	; (401fbc <ip_reass+0x2b4>)
  401e4e:	4798      	blx	r3
  ipr->timer = IP_REASS_MAXAGE;
  401e50:	2303      	movs	r3, #3
  401e52:	f889 301f 	strb.w	r3, [r9, #31]
  ipr->next = reassdatagrams;
  401e56:	4b55      	ldr	r3, [pc, #340]	; (401fac <ip_reass+0x2a4>)
  401e58:	681a      	ldr	r2, [r3, #0]
  401e5a:	f8c9 2000 	str.w	r2, [r9]
  reassdatagrams = ipr;
  401e5e:	f8c3 9000 	str.w	r9, [r3]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
  401e62:	6832      	ldr	r2, [r6, #0]
  401e64:	6875      	ldr	r5, [r6, #4]
  401e66:	68b0      	ldr	r0, [r6, #8]
  401e68:	68f1      	ldr	r1, [r6, #12]
  401e6a:	f8c9 2008 	str.w	r2, [r9, #8]
  401e6e:	f8c9 500c 	str.w	r5, [r9, #12]
  401e72:	f8c9 0010 	str.w	r0, [r9, #16]
  401e76:	f8c9 1014 	str.w	r1, [r9, #20]
  401e7a:	6932      	ldr	r2, [r6, #16]
  401e7c:	f8c9 2018 	str.w	r2, [r9, #24]
    if(ipr == NULL) {
  401e80:	f1b9 0f00 	cmp.w	r9, #0
  401e84:	f43f af6d 	beq.w	401d62 <ip_reass+0x5a>
  401e88:	4625      	mov	r5, r4
  return ipr;
  401e8a:	464c      	mov	r4, r9
  401e8c:	e789      	b.n	401da2 <ip_reass+0x9a>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
  401e8e:	4641      	mov	r1, r8
  401e90:	4630      	mov	r0, r6
  401e92:	4b47      	ldr	r3, [pc, #284]	; (401fb0 <ip_reass+0x2a8>)
  401e94:	4798      	blx	r3
  401e96:	4580      	cmp	r8, r0
  401e98:	f73f af63 	bgt.w	401d62 <ip_reass+0x5a>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  401e9c:	2005      	movs	r0, #5
  401e9e:	4b46      	ldr	r3, [pc, #280]	; (401fb8 <ip_reass+0x2b0>)
  401ea0:	4798      	blx	r3
    if (ipr == NULL)
  401ea2:	4681      	mov	r9, r0
  401ea4:	2800      	cmp	r0, #0
  401ea6:	d1ce      	bne.n	401e46 <ip_reass+0x13e>
  401ea8:	e75b      	b.n	401d62 <ip_reass+0x5a>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
  401eaa:	89e0      	ldrh	r0, [r4, #14]
  401eac:	4b3c      	ldr	r3, [pc, #240]	; (401fa0 <ip_reass+0x298>)
  401eae:	4798      	blx	r3
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
  401eb0:	f3c0 000c 	ubfx	r0, r0, #0, #13
  401eb4:	2800      	cmp	r0, #0
  401eb6:	f43f af74 	beq.w	401da2 <ip_reass+0x9a>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
  401eba:	6832      	ldr	r2, [r6, #0]
  401ebc:	f8d6 e004 	ldr.w	lr, [r6, #4]
  401ec0:	68b0      	ldr	r0, [r6, #8]
  401ec2:	68f1      	ldr	r1, [r6, #12]
  401ec4:	60a2      	str	r2, [r4, #8]
  401ec6:	f8c4 e00c 	str.w	lr, [r4, #12]
  401eca:	6120      	str	r0, [r4, #16]
  401ecc:	6161      	str	r1, [r4, #20]
  401ece:	6932      	ldr	r2, [r6, #16]
  401ed0:	61a2      	str	r2, [r4, #24]
  401ed2:	e766      	b.n	401da2 <ip_reass+0x9a>
      iprh->next_pbuf = q;
  401ed4:	f8cc 6000 	str.w	r6, [ip]
      if (iprh_prev != NULL) {
  401ed8:	2b00      	cmp	r3, #0
  401eda:	d056      	beq.n	401f8a <ip_reass+0x282>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
  401edc:	88d9      	ldrh	r1, [r3, #6]
  401ede:	4281      	cmp	r1, r0
  401ee0:	d83b      	bhi.n	401f5a <ip_reass+0x252>
  401ee2:	8892      	ldrh	r2, [r2, #4]
  401ee4:	4542      	cmp	r2, r8
  401ee6:	d338      	bcc.n	401f5a <ip_reass+0x252>
        iprh_prev->next_pbuf = new_p;
  401ee8:	601f      	str	r7, [r3, #0]
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
  401eea:	7fa3      	ldrb	r3, [r4, #30]
  401eec:	f013 0f01 	tst.w	r3, #1
  401ef0:	d03d      	beq.n	401f6e <ip_reass+0x266>
    if (valid) {
  401ef2:	f1be 0f00 	cmp.w	lr, #0
  401ef6:	d03a      	beq.n	401f6e <ip_reass+0x266>
      if (((struct ip_reass_helper*)ipr->p->payload)->start != 0) {
  401ef8:	6860      	ldr	r0, [r4, #4]
  401efa:	6843      	ldr	r3, [r0, #4]
  401efc:	889b      	ldrh	r3, [r3, #4]
  401efe:	2b00      	cmp	r3, #0
  401f00:	d135      	bne.n	401f6e <ip_reass+0x266>
        q = iprh->next_pbuf;
  401f02:	f8dc 3000 	ldr.w	r3, [ip]
        while (q != NULL) {
  401f06:	2b00      	cmp	r3, #0
  401f08:	d05a      	beq.n	401fc0 <ip_reass+0x2b8>
          iprh = (struct ip_reass_helper*)q->payload;
  401f0a:	685b      	ldr	r3, [r3, #4]
          if (iprh_prev->end != iprh->start) {
  401f0c:	8899      	ldrh	r1, [r3, #4]
  401f0e:	f8bc 2006 	ldrh.w	r2, [ip, #6]
  401f12:	4291      	cmp	r1, r2
  401f14:	d12b      	bne.n	401f6e <ip_reass+0x266>
          q = iprh->next_pbuf;
  401f16:	681a      	ldr	r2, [r3, #0]
        while (q != NULL) {
  401f18:	2a00      	cmp	r2, #0
  401f1a:	d051      	beq.n	401fc0 <ip_reass+0x2b8>
          iprh = (struct ip_reass_helper*)q->payload;
  401f1c:	6852      	ldr	r2, [r2, #4]
          if (iprh_prev->end != iprh->start) {
  401f1e:	88d9      	ldrh	r1, [r3, #6]
  401f20:	8893      	ldrh	r3, [r2, #4]
  401f22:	4299      	cmp	r1, r3
  401f24:	d123      	bne.n	401f6e <ip_reass+0x266>
          iprh = (struct ip_reass_helper*)q->payload;
  401f26:	4613      	mov	r3, r2
  401f28:	e7f5      	b.n	401f16 <ip_reass+0x20e>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  401f2a:	4613      	mov	r3, r2
    q = iprh_tmp->next_pbuf;
  401f2c:	681e      	ldr	r6, [r3, #0]
  for (q = ipr->p; q != NULL;) {
  401f2e:	b376      	cbz	r6, 401f8e <ip_reass+0x286>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  401f30:	6872      	ldr	r2, [r6, #4]
    if (iprh->start < iprh_tmp->start) {
  401f32:	8891      	ldrh	r1, [r2, #4]
  401f34:	4288      	cmp	r0, r1
  401f36:	d3cd      	bcc.n	401ed4 <ip_reass+0x1cc>
    } else if(iprh->start == iprh_tmp->start) {
  401f38:	4288      	cmp	r0, r1
  401f3a:	d00e      	beq.n	401f5a <ip_reass+0x252>
    } else if(iprh->start < iprh_tmp->end) {
  401f3c:	88d6      	ldrh	r6, [r2, #6]
  401f3e:	4286      	cmp	r6, r0
  401f40:	d80b      	bhi.n	401f5a <ip_reass+0x252>
      if (iprh_prev != NULL) {
  401f42:	2b00      	cmp	r3, #0
  401f44:	d0f1      	beq.n	401f2a <ip_reass+0x222>
        if (iprh_prev->end != iprh_tmp->start) {
  401f46:	88db      	ldrh	r3, [r3, #6]
          valid = 0;
  401f48:	428b      	cmp	r3, r1
  401f4a:	bf18      	it	ne
  401f4c:	f04f 0e00 	movne.w	lr, #0
  401f50:	e7eb      	b.n	401f2a <ip_reass+0x222>
  int valid = 1;
  401f52:	f04f 0e01 	mov.w	lr, #1
      ipr->p = new_p;
  401f56:	6067      	str	r7, [r4, #4]
  401f58:	e7c7      	b.n	401eea <ip_reass+0x1e2>
  ip_reass_pbufcount -= pbuf_clen(new_p);
  401f5a:	4638      	mov	r0, r7
  401f5c:	4b11      	ldr	r3, [pc, #68]	; (401fa4 <ip_reass+0x29c>)
  401f5e:	4798      	blx	r3
  401f60:	4a11      	ldr	r2, [pc, #68]	; (401fa8 <ip_reass+0x2a0>)
  401f62:	8813      	ldrh	r3, [r2, #0]
  401f64:	1a18      	subs	r0, r3, r0
  401f66:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
  401f68:	4638      	mov	r0, r7
  401f6a:	4b12      	ldr	r3, [pc, #72]	; (401fb4 <ip_reass+0x2ac>)
  401f6c:	4798      	blx	r3
  return NULL;
  401f6e:	f04f 0800 	mov.w	r8, #0
}
  401f72:	4640      	mov	r0, r8
  401f74:	b003      	add	sp, #12
  401f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    reassdatagrams = ipr->next;
  401f7a:	6822      	ldr	r2, [r4, #0]
  401f7c:	4b0b      	ldr	r3, [pc, #44]	; (401fac <ip_reass+0x2a4>)
  401f7e:	601a      	str	r2, [r3, #0]
  401f80:	e058      	b.n	402034 <ip_reass+0x32c>
      iprh->next_pbuf = q;
  401f82:	f8cc 2000 	str.w	r2, [ip]
  int valid = 1;
  401f86:	f04f 0e01 	mov.w	lr, #1
        ipr->p = new_p;
  401f8a:	6067      	str	r7, [r4, #4]
  401f8c:	e7ad      	b.n	401eea <ip_reass+0x1e2>
    if (iprh_prev != NULL) {
  401f8e:	2b00      	cmp	r3, #0
  401f90:	d0e1      	beq.n	401f56 <ip_reass+0x24e>
      iprh_prev->next_pbuf = new_p;
  401f92:	601f      	str	r7, [r3, #0]
      if (iprh_prev->end != iprh->start) {
  401f94:	88da      	ldrh	r2, [r3, #6]
  401f96:	f8bc 3004 	ldrh.w	r3, [ip, #4]
  401f9a:	429a      	cmp	r2, r3
  401f9c:	d1e7      	bne.n	401f6e <ip_reass+0x266>
  401f9e:	e7a4      	b.n	401eea <ip_reass+0x1e2>
  401fa0:	00401387 	.word	0x00401387
  401fa4:	00402a61 	.word	0x00402a61
  401fa8:	20400a8c 	.word	0x20400a8c
  401fac:	20400a90 	.word	0x20400a90
  401fb0:	00401c5d 	.word	0x00401c5d
  401fb4:	00402861 	.word	0x00402861
  401fb8:	00402649 	.word	0x00402649
  401fbc:	00407445 	.word	0x00407445
    ipr->datagram_len += IP_HLEN;
  401fc0:	8ba3      	ldrh	r3, [r4, #28]
  401fc2:	3314      	adds	r3, #20
  401fc4:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
  401fc6:	6847      	ldr	r7, [r0, #4]
  401fc8:	683e      	ldr	r6, [r7, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
  401fca:	4623      	mov	r3, r4
  401fcc:	f853 2f08 	ldr.w	r2, [r3, #8]!
  401fd0:	f8d3 e004 	ldr.w	lr, [r3, #4]
  401fd4:	6898      	ldr	r0, [r3, #8]
  401fd6:	68d9      	ldr	r1, [r3, #12]
  401fd8:	603a      	str	r2, [r7, #0]
  401fda:	f8c7 e004 	str.w	lr, [r7, #4]
  401fde:	60b8      	str	r0, [r7, #8]
  401fe0:	60f9      	str	r1, [r7, #12]
  401fe2:	691a      	ldr	r2, [r3, #16]
  401fe4:	613a      	str	r2, [r7, #16]
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
  401fe6:	8ba0      	ldrh	r0, [r4, #28]
  401fe8:	4b18      	ldr	r3, [pc, #96]	; (40204c <ip_reass+0x344>)
  401fea:	4798      	blx	r3
  401fec:	8078      	strh	r0, [r7, #2]
    IPH_OFFSET_SET(fraghdr, 0);
  401fee:	2300      	movs	r3, #0
  401ff0:	71bb      	strb	r3, [r7, #6]
  401ff2:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
  401ff4:	72bb      	strb	r3, [r7, #10]
  401ff6:	72fb      	strb	r3, [r7, #11]
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
  401ff8:	2114      	movs	r1, #20
  401ffa:	4638      	mov	r0, r7
  401ffc:	4b14      	ldr	r3, [pc, #80]	; (402050 <ip_reass+0x348>)
  401ffe:	4798      	blx	r3
  402000:	8178      	strh	r0, [r7, #10]
    p = ipr->p;
  402002:	f8d4 8004 	ldr.w	r8, [r4, #4]
    while(r != NULL) {
  402006:	b17e      	cbz	r6, 402028 <ip_reass+0x320>
      pbuf_header(r, -IP_HLEN);
  402008:	f06f 0b13 	mvn.w	fp, #19
  40200c:	f8df a054 	ldr.w	sl, [pc, #84]	; 402064 <ip_reass+0x35c>
      pbuf_cat(p, r);
  402010:	f8df 9054 	ldr.w	r9, [pc, #84]	; 402068 <ip_reass+0x360>
      iprh = (struct ip_reass_helper*)r->payload;
  402014:	6877      	ldr	r7, [r6, #4]
      pbuf_header(r, -IP_HLEN);
  402016:	4659      	mov	r1, fp
  402018:	4630      	mov	r0, r6
  40201a:	47d0      	blx	sl
      pbuf_cat(p, r);
  40201c:	4631      	mov	r1, r6
  40201e:	4640      	mov	r0, r8
  402020:	47c8      	blx	r9
      r = iprh->next_pbuf;
  402022:	683e      	ldr	r6, [r7, #0]
    while(r != NULL) {
  402024:	2e00      	cmp	r6, #0
  402026:	d1f5      	bne.n	402014 <ip_reass+0x30c>
  if (reassdatagrams == ipr) {
  402028:	4b0a      	ldr	r3, [pc, #40]	; (402054 <ip_reass+0x34c>)
  40202a:	681b      	ldr	r3, [r3, #0]
  40202c:	429c      	cmp	r4, r3
  40202e:	d0a4      	beq.n	401f7a <ip_reass+0x272>
    prev->next = ipr->next;
  402030:	6823      	ldr	r3, [r4, #0]
  402032:	602b      	str	r3, [r5, #0]
  memp_free(MEMP_REASSDATA, ipr);
  402034:	4621      	mov	r1, r4
  402036:	2005      	movs	r0, #5
  402038:	4b07      	ldr	r3, [pc, #28]	; (402058 <ip_reass+0x350>)
  40203a:	4798      	blx	r3
    ip_reass_pbufcount -= pbuf_clen(p);
  40203c:	4640      	mov	r0, r8
  40203e:	4b07      	ldr	r3, [pc, #28]	; (40205c <ip_reass+0x354>)
  402040:	4798      	blx	r3
  402042:	4a07      	ldr	r2, [pc, #28]	; (402060 <ip_reass+0x358>)
  402044:	8813      	ldrh	r3, [r2, #0]
  402046:	1a18      	subs	r0, r3, r0
  402048:	8010      	strh	r0, [r2, #0]
    return p;
  40204a:	e792      	b.n	401f72 <ip_reass+0x26a>
  40204c:	0040137d 	.word	0x0040137d
  402050:	004016ed 	.word	0x004016ed
  402054:	20400a90 	.word	0x20400a90
  402058:	00402689 	.word	0x00402689
  40205c:	00402a61 	.word	0x00402a61
  402060:	20400a8c 	.word	0x20400a8c
  402064:	004027d5 	.word	0x004027d5
  402068:	00402a81 	.word	0x00402a81

0040206c <ip_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
  40206c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402070:	b089      	sub	sp, #36	; 0x24
  402072:	4604      	mov	r4, r0
  402074:	9003      	str	r0, [sp, #12]
  402076:	9105      	str	r1, [sp, #20]
  402078:	9206      	str	r2, [sp, #24]
  struct ip_hdr *original_iphdr;
#endif
  struct ip_hdr *iphdr;
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
  40207a:	8c8e      	ldrh	r6, [r1, #36]	; 0x24

  /* Copy the IP header in it */
  iphdr = (struct ip_hdr *)rambuf->payload;
  SMEMCPY(iphdr, p->payload, IP_HLEN);
#else /* IP_FRAG_USES_STATIC_BUF */
  original_iphdr = (struct ip_hdr *)p->payload;
  40207c:	f8d0 a004 	ldr.w	sl, [r0, #4]
  iphdr = original_iphdr;
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
  402080:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  402084:	4b3f      	ldr	r3, [pc, #252]	; (402184 <ip_frag+0x118>)
  402086:	4798      	blx	r3
  ofo = tmp & IP_OFFMASK;
  402088:	f3c0 0b0c 	ubfx	fp, r0, #0, #13
  omf = tmp & IP_MF;
  40208c:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
  402090:	9302      	str	r3, [sp, #8]

  left = p->tot_len - IP_HLEN;
  402092:	8925      	ldrh	r5, [r4, #8]
  402094:	3d14      	subs	r5, #20
  402096:	b2ad      	uxth	r5, r5

  nfb = (mtu - IP_HLEN) / 8;
  402098:	f1a6 0314 	sub.w	r3, r6, #20
  40209c:	9301      	str	r3, [sp, #4]
  40209e:	2b00      	cmp	r3, #0
  4020a0:	bfb8      	it	lt
  4020a2:	3307      	addlt	r3, #7
  4020a4:	f3c3 03cf 	ubfx	r3, r3, #3, #16
  4020a8:	9304      	str	r3, [sp, #16]

  while (left) {
  4020aa:	2d00      	cmp	r5, #0
  4020ac:	d063      	beq.n	402176 <ip_frag+0x10a>
    if (!last) {
      tmp = tmp | IP_MF;
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
  4020ae:	00db      	lsls	r3, r3, #3
  4020b0:	b29b      	uxth	r3, r3
  4020b2:	9307      	str	r3, [sp, #28]
  4020b4:	f04f 0914 	mov.w	r9, #20
  4020b8:	e049      	b.n	40214e <ip_frag+0xe2>
  4020ba:	462c      	mov	r4, r5

#if IP_FRAG_USES_STATIC_BUF
    poff += pbuf_copy_partial(p, (u8_t*)iphdr + IP_HLEN, cop, poff);
#else /* IP_FRAG_USES_STATIC_BUF */
#if LWIP_NETIF_TX_SINGLE_PBUF
    rambuf = pbuf_alloc(PBUF_IP, cop, PBUF_RAM);
  4020bc:	2200      	movs	r2, #0
  4020be:	4621      	mov	r1, r4
  4020c0:	2001      	movs	r0, #1
  4020c2:	4b31      	ldr	r3, [pc, #196]	; (402188 <ip_frag+0x11c>)
  4020c4:	4798      	blx	r3
    if (rambuf == NULL) {
  4020c6:	4606      	mov	r6, r0
  4020c8:	2800      	cmp	r0, #0
  4020ca:	d056      	beq.n	40217a <ip_frag+0x10e>
      return ERR_MEM;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
      (rambuf->len == rambuf->tot_len) && (rambuf->next == NULL));
    poff += pbuf_copy_partial(p, rambuf->payload, cop, poff);
  4020cc:	464b      	mov	r3, r9
  4020ce:	4622      	mov	r2, r4
  4020d0:	6841      	ldr	r1, [r0, #4]
  4020d2:	9803      	ldr	r0, [sp, #12]
  4020d4:	4f2d      	ldr	r7, [pc, #180]	; (40218c <ip_frag+0x120>)
  4020d6:	47b8      	blx	r7
  4020d8:	4481      	add	r9, r0
  4020da:	fa1f f989 	uxth.w	r9, r9
    /* make room for the IP header */
    if(pbuf_header(rambuf, IP_HLEN)) {
  4020de:	2114      	movs	r1, #20
  4020e0:	4630      	mov	r0, r6
  4020e2:	4b2b      	ldr	r3, [pc, #172]	; (402190 <ip_frag+0x124>)
  4020e4:	4798      	blx	r3
  4020e6:	2800      	cmp	r0, #0
  4020e8:	d13d      	bne.n	402166 <ip_frag+0xfa>
      pbuf_free(rambuf);
      return ERR_MEM;
    }
    /* fill in the IP header */
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
  4020ea:	6873      	ldr	r3, [r6, #4]
  4020ec:	f8da 2000 	ldr.w	r2, [sl]
  4020f0:	f8da 7004 	ldr.w	r7, [sl, #4]
  4020f4:	f8da 0008 	ldr.w	r0, [sl, #8]
  4020f8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4020fc:	601a      	str	r2, [r3, #0]
  4020fe:	605f      	str	r7, [r3, #4]
  402100:	6098      	str	r0, [r3, #8]
  402102:	60d9      	str	r1, [r3, #12]
  402104:	f8da 2010 	ldr.w	r2, [sl, #16]
  402108:	611a      	str	r2, [r3, #16]
    iphdr = rambuf->payload;
  40210a:	6877      	ldr	r7, [r6, #4]
    poff = newpbuflen;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
#endif /* IP_FRAG_USES_STATIC_BUF */

    /* Correct header */
    IPH_OFFSET_SET(iphdr, htons(tmp));
  40210c:	4640      	mov	r0, r8
  40210e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 40219c <ip_frag+0x130>
  402112:	47c0      	blx	r8
  402114:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
  402116:	f104 0014 	add.w	r0, r4, #20
  40211a:	b280      	uxth	r0, r0
  40211c:	47c0      	blx	r8
  40211e:	8078      	strh	r0, [r7, #2]
    IPH_CHKSUM_SET(iphdr, 0);
  402120:	2300      	movs	r3, #0
  402122:	72bb      	strb	r3, [r7, #10]
  402124:	72fb      	strb	r3, [r7, #11]
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  402126:	2114      	movs	r1, #20
  402128:	4638      	mov	r0, r7
  40212a:	4b1a      	ldr	r3, [pc, #104]	; (402194 <ip_frag+0x128>)
  40212c:	4798      	blx	r3
  40212e:	8178      	strh	r0, [r7, #10]
    }
#else /* IP_FRAG_USES_STATIC_BUF */
    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
  402130:	9805      	ldr	r0, [sp, #20]
  402132:	6943      	ldr	r3, [r0, #20]
  402134:	9a06      	ldr	r2, [sp, #24]
  402136:	4631      	mov	r1, r6
  402138:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */
    
    pbuf_free(rambuf);
  40213a:	4630      	mov	r0, r6
  40213c:	4b16      	ldr	r3, [pc, #88]	; (402198 <ip_frag+0x12c>)
  40213e:	4798      	blx	r3
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
  402140:	1b2d      	subs	r5, r5, r4
  402142:	b2ad      	uxth	r5, r5
    ofo += nfb;
  402144:	9b04      	ldr	r3, [sp, #16]
  402146:	449b      	add	fp, r3
  402148:	fa1f fb8b 	uxth.w	fp, fp
  while (left) {
  40214c:	b18d      	cbz	r5, 402172 <ip_frag+0x106>
    tmp = omf | (IP_OFFMASK & (ofo));
  40214e:	f3cb 080c 	ubfx	r8, fp, #0, #13
  402152:	9b02      	ldr	r3, [sp, #8]
  402154:	ea43 0808 	orr.w	r8, r3, r8
    if (!last) {
  402158:	9b01      	ldr	r3, [sp, #4]
  40215a:	42ab      	cmp	r3, r5
  40215c:	daad      	bge.n	4020ba <ip_frag+0x4e>
      tmp = tmp | IP_MF;
  40215e:	f448 5800 	orr.w	r8, r8, #8192	; 0x2000
    cop = last ? left : nfb * 8;
  402162:	9c07      	ldr	r4, [sp, #28]
  402164:	e7aa      	b.n	4020bc <ip_frag+0x50>
      pbuf_free(rambuf);
  402166:	4630      	mov	r0, r6
  402168:	4b0b      	ldr	r3, [pc, #44]	; (402198 <ip_frag+0x12c>)
  40216a:	4798      	blx	r3
      return ERR_MEM;
  40216c:	f04f 30ff 	mov.w	r0, #4294967295
  402170:	e005      	b.n	40217e <ip_frag+0x112>
  }
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
  402172:	2000      	movs	r0, #0
  402174:	e003      	b.n	40217e <ip_frag+0x112>
  402176:	2000      	movs	r0, #0
  402178:	e001      	b.n	40217e <ip_frag+0x112>
      return ERR_MEM;
  40217a:	f04f 30ff 	mov.w	r0, #4294967295
}
  40217e:	b009      	add	sp, #36	; 0x24
  402180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402184:	00401387 	.word	0x00401387
  402188:	004028b9 	.word	0x004028b9
  40218c:	00402be5 	.word	0x00402be5
  402190:	004027d5 	.word	0x004027d5
  402194:	004016ed 	.word	0x004016ed
  402198:	00402861 	.word	0x00402861
  40219c:	0040137d 	.word	0x0040137d

004021a0 <lwip_init>:
/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void
lwip_init(void)
{
  4021a0:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
  4021a2:	4b06      	ldr	r3, [pc, #24]	; (4021bc <lwip_init+0x1c>)
  4021a4:	4798      	blx	r3
  memp_init();
  4021a6:	4b06      	ldr	r3, [pc, #24]	; (4021c0 <lwip_init+0x20>)
  4021a8:	4798      	blx	r3
  pbuf_init();
  netif_init();
  4021aa:	4b06      	ldr	r3, [pc, #24]	; (4021c4 <lwip_init+0x24>)
  4021ac:	4798      	blx	r3
#endif /* LWIP_ARP */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
  4021ae:	4b06      	ldr	r3, [pc, #24]	; (4021c8 <lwip_init+0x28>)
  4021b0:	4798      	blx	r3
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
  4021b2:	4b06      	ldr	r3, [pc, #24]	; (4021cc <lwip_init+0x2c>)
  4021b4:	4798      	blx	r3
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */

#if LWIP_TIMERS
  sys_timeouts_init();
  4021b6:	4b06      	ldr	r3, [pc, #24]	; (4021d0 <lwip_init+0x30>)
  4021b8:	4798      	blx	r3
  4021ba:	bd08      	pop	{r3, pc}
  4021bc:	0040234d 	.word	0x0040234d
  4021c0:	004025d1 	.word	0x004025d1
  4021c4:	004026a1 	.word	0x004026a1
  4021c8:	00405db1 	.word	0x00405db1
  4021cc:	00402d65 	.word	0x00402d65
  4021d0:	004022d5 	.word	0x004022d5

004021d4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  4021d4:	b570      	push	{r4, r5, r6, lr}
  4021d6:	4604      	mov	r4, r0
  4021d8:	460e      	mov	r6, r1
  4021da:	4615      	mov	r5, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  4021dc:	2006      	movs	r0, #6
  4021de:	4b1b      	ldr	r3, [pc, #108]	; (40224c <sys_timeout+0x78>)
  4021e0:	4798      	blx	r3
  if (timeout == NULL) {
  4021e2:	2800      	cmp	r0, #0
  4021e4:	d030      	beq.n	402248 <sys_timeout+0x74>
  4021e6:	4601      	mov	r1, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }
  timeout->next = NULL;
  4021e8:	2300      	movs	r3, #0
  4021ea:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
  4021ec:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
  4021ee:	60c5      	str	r5, [r0, #12]
  timeout->time = msecs;
  4021f0:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
  4021f2:	4b17      	ldr	r3, [pc, #92]	; (402250 <sys_timeout+0x7c>)
  4021f4:	681d      	ldr	r5, [r3, #0]
  4021f6:	b1a5      	cbz	r5, 402222 <sys_timeout+0x4e>
    next_timeout = timeout;
    return;
  }

  if (next_timeout->time > msecs) {
  4021f8:	6868      	ldr	r0, [r5, #4]
  4021fa:	4284      	cmp	r4, r0
  4021fc:	d313      	bcc.n	402226 <sys_timeout+0x52>
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
  4021fe:	1a20      	subs	r0, r4, r0
  402200:	6048      	str	r0, [r1, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  402202:	682a      	ldr	r2, [r5, #0]
  402204:	b1f2      	cbz	r2, 402244 <sys_timeout+0x70>
  402206:	6853      	ldr	r3, [r2, #4]
  402208:	4298      	cmp	r0, r3
  40220a:	d312      	bcc.n	402232 <sys_timeout+0x5e>
      timeout->time -= t->time;
  40220c:	6848      	ldr	r0, [r1, #4]
  40220e:	6853      	ldr	r3, [r2, #4]
  402210:	1ac0      	subs	r0, r0, r3
  402212:	6048      	str	r0, [r1, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  402214:	6813      	ldr	r3, [r2, #0]
  402216:	b18b      	cbz	r3, 40223c <sys_timeout+0x68>
  402218:	685c      	ldr	r4, [r3, #4]
  40221a:	42a0      	cmp	r0, r4
  40221c:	d30b      	bcc.n	402236 <sys_timeout+0x62>
  40221e:	461a      	mov	r2, r3
  402220:	e7f4      	b.n	40220c <sys_timeout+0x38>
    next_timeout = timeout;
  402222:	6018      	str	r0, [r3, #0]
    return;
  402224:	bd70      	pop	{r4, r5, r6, pc}
    next_timeout->time -= msecs;
  402226:	1b00      	subs	r0, r0, r4
  402228:	6068      	str	r0, [r5, #4]
    timeout->next = next_timeout;
  40222a:	600d      	str	r5, [r1, #0]
    next_timeout = timeout;
  40222c:	4b08      	ldr	r3, [pc, #32]	; (402250 <sys_timeout+0x7c>)
  40222e:	6019      	str	r1, [r3, #0]
  402230:	bd70      	pop	{r4, r5, r6, pc}
      if (t->next == NULL || t->next->time > timeout->time) {
  402232:	4613      	mov	r3, r2
  402234:	462a      	mov	r2, r5
        if (t->next != NULL) {
          t->next->time -= timeout->time;
  402236:	685c      	ldr	r4, [r3, #4]
  402238:	1a20      	subs	r0, r4, r0
  40223a:	6058      	str	r0, [r3, #4]
        }
        timeout->next = t->next;
  40223c:	6813      	ldr	r3, [r2, #0]
  40223e:	600b      	str	r3, [r1, #0]
        t->next = timeout;
  402240:	6011      	str	r1, [r2, #0]
        break;
  402242:	bd70      	pop	{r4, r5, r6, pc}
      if (t->next == NULL || t->next->time > timeout->time) {
  402244:	462a      	mov	r2, r5
  402246:	e7f9      	b.n	40223c <sys_timeout+0x68>
  402248:	bd70      	pop	{r4, r5, r6, pc}
  40224a:	bf00      	nop
  40224c:	00402649 	.word	0x00402649
  402250:	20400a94 	.word	0x20400a94

00402254 <tcp_timer_needed>:
{
  402254:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  402256:	4b0a      	ldr	r3, [pc, #40]	; (402280 <tcp_timer_needed+0x2c>)
  402258:	681b      	ldr	r3, [r3, #0]
  40225a:	b953      	cbnz	r3, 402272 <tcp_timer_needed+0x1e>
  40225c:	4b09      	ldr	r3, [pc, #36]	; (402284 <tcp_timer_needed+0x30>)
  40225e:	681b      	ldr	r3, [r3, #0]
  402260:	b143      	cbz	r3, 402274 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
  402262:	2201      	movs	r2, #1
  402264:	4b06      	ldr	r3, [pc, #24]	; (402280 <tcp_timer_needed+0x2c>)
  402266:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  402268:	2200      	movs	r2, #0
  40226a:	4907      	ldr	r1, [pc, #28]	; (402288 <tcp_timer_needed+0x34>)
  40226c:	20fa      	movs	r0, #250	; 0xfa
  40226e:	4b07      	ldr	r3, [pc, #28]	; (40228c <tcp_timer_needed+0x38>)
  402270:	4798      	blx	r3
  402272:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  402274:	4b06      	ldr	r3, [pc, #24]	; (402290 <tcp_timer_needed+0x3c>)
  402276:	681b      	ldr	r3, [r3, #0]
  402278:	2b00      	cmp	r3, #0
  40227a:	d1f2      	bne.n	402262 <tcp_timer_needed+0xe>
  40227c:	e7f9      	b.n	402272 <tcp_timer_needed+0x1e>
  40227e:	bf00      	nop
  402280:	20400a98 	.word	0x20400a98
  402284:	204049cc 	.word	0x204049cc
  402288:	00402295 	.word	0x00402295
  40228c:	004021d5 	.word	0x004021d5
  402290:	204049e0 	.word	0x204049e0

00402294 <tcpip_tcp_timer>:
{
  402294:	b508      	push	{r3, lr}
  tcp_tmr();
  402296:	4b09      	ldr	r3, [pc, #36]	; (4022bc <tcpip_tcp_timer+0x28>)
  402298:	4798      	blx	r3
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  40229a:	4b09      	ldr	r3, [pc, #36]	; (4022c0 <tcpip_tcp_timer+0x2c>)
  40229c:	681b      	ldr	r3, [r3, #0]
  40229e:	b12b      	cbz	r3, 4022ac <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  4022a0:	2200      	movs	r2, #0
  4022a2:	4908      	ldr	r1, [pc, #32]	; (4022c4 <tcpip_tcp_timer+0x30>)
  4022a4:	20fa      	movs	r0, #250	; 0xfa
  4022a6:	4b08      	ldr	r3, [pc, #32]	; (4022c8 <tcpip_tcp_timer+0x34>)
  4022a8:	4798      	blx	r3
  4022aa:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  4022ac:	4b07      	ldr	r3, [pc, #28]	; (4022cc <tcpip_tcp_timer+0x38>)
  4022ae:	681b      	ldr	r3, [r3, #0]
  4022b0:	2b00      	cmp	r3, #0
  4022b2:	d1f5      	bne.n	4022a0 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
  4022b4:	2200      	movs	r2, #0
  4022b6:	4b06      	ldr	r3, [pc, #24]	; (4022d0 <tcpip_tcp_timer+0x3c>)
  4022b8:	601a      	str	r2, [r3, #0]
  4022ba:	bd08      	pop	{r3, pc}
  4022bc:	00403a95 	.word	0x00403a95
  4022c0:	204049cc 	.word	0x204049cc
  4022c4:	00402295 	.word	0x00402295
  4022c8:	004021d5 	.word	0x004021d5
  4022cc:	204049e0 	.word	0x204049e0
  4022d0:	20400a98 	.word	0x20400a98

004022d4 <sys_timeouts_init>:
{
  4022d4:	b510      	push	{r4, lr}
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
  4022d6:	2200      	movs	r2, #0
  4022d8:	4907      	ldr	r1, [pc, #28]	; (4022f8 <sys_timeouts_init+0x24>)
  4022da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4022de:	4c07      	ldr	r4, [pc, #28]	; (4022fc <sys_timeouts_init+0x28>)
  4022e0:	47a0      	blx	r4
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
  4022e2:	2200      	movs	r2, #0
  4022e4:	4906      	ldr	r1, [pc, #24]	; (402300 <sys_timeouts_init+0x2c>)
  4022e6:	f241 3088 	movw	r0, #5000	; 0x1388
  4022ea:	47a0      	blx	r4
  timeouts_last_time = sys_now();
  4022ec:	4b05      	ldr	r3, [pc, #20]	; (402304 <sys_timeouts_init+0x30>)
  4022ee:	4798      	blx	r3
  4022f0:	4b05      	ldr	r3, [pc, #20]	; (402308 <sys_timeouts_init+0x34>)
  4022f2:	6018      	str	r0, [r3, #0]
  4022f4:	bd10      	pop	{r4, pc}
  4022f6:	bf00      	nop
  4022f8:	0040232d 	.word	0x0040232d
  4022fc:	004021d5 	.word	0x004021d5
  402300:	0040230d 	.word	0x0040230d
  402304:	00406fa1 	.word	0x00406fa1
  402308:	20400a9c 	.word	0x20400a9c

0040230c <arp_timer>:
{
  40230c:	b508      	push	{r3, lr}
  etharp_tmr();
  40230e:	4b04      	ldr	r3, [pc, #16]	; (402320 <arp_timer+0x14>)
  402310:	4798      	blx	r3
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
  402312:	2200      	movs	r2, #0
  402314:	4903      	ldr	r1, [pc, #12]	; (402324 <arp_timer+0x18>)
  402316:	f241 3088 	movw	r0, #5000	; 0x1388
  40231a:	4b03      	ldr	r3, [pc, #12]	; (402328 <arp_timer+0x1c>)
  40231c:	4798      	blx	r3
  40231e:	bd08      	pop	{r3, pc}
  402320:	004060c5 	.word	0x004060c5
  402324:	0040230d 	.word	0x0040230d
  402328:	004021d5 	.word	0x004021d5

0040232c <ip_reass_timer>:
{
  40232c:	b508      	push	{r3, lr}
  ip_reass_tmr();
  40232e:	4b04      	ldr	r3, [pc, #16]	; (402340 <ip_reass_timer+0x14>)
  402330:	4798      	blx	r3
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
  402332:	2200      	movs	r2, #0
  402334:	4903      	ldr	r1, [pc, #12]	; (402344 <ip_reass_timer+0x18>)
  402336:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  40233a:	4b03      	ldr	r3, [pc, #12]	; (402348 <ip_reass_timer+0x1c>)
  40233c:	4798      	blx	r3
  40233e:	bd08      	pop	{r3, pc}
  402340:	00401cd5 	.word	0x00401cd5
  402344:	0040232d 	.word	0x0040232d
  402348:	004021d5 	.word	0x004021d5

0040234c <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
  40234c:	4b0a      	ldr	r3, [pc, #40]	; (402378 <mem_init+0x2c>)
  40234e:	f023 0303 	bic.w	r3, r3, #3
  402352:	4a0a      	ldr	r2, [pc, #40]	; (40237c <mem_init+0x30>)
  402354:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  402356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40235a:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
  40235c:	2200      	movs	r2, #0
  40235e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
  402360:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
  402362:	185a      	adds	r2, r3, r1
  402364:	4806      	ldr	r0, [pc, #24]	; (402380 <mem_init+0x34>)
  402366:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
  402368:	2001      	movs	r0, #1
  40236a:	7110      	strb	r0, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
  40236c:	8011      	strh	r1, [r2, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
  40236e:	8051      	strh	r1, [r2, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
  402370:	4a04      	ldr	r2, [pc, #16]	; (402384 <mem_init+0x38>)
  402372:	6013      	str	r3, [r2, #0]
  402374:	4770      	bx	lr
  402376:	bf00      	nop
  402378:	204039ab 	.word	0x204039ab
  40237c:	20400aa4 	.word	0x20400aa4
  402380:	20400aa8 	.word	0x20400aa8
  402384:	20400aa0 	.word	0x20400aa0

00402388 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
  402388:	2800      	cmp	r0, #0
  40238a:	d03b      	beq.n	402404 <mem_free+0x7c>
  40238c:	4603      	mov	r3, r0
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
  40238e:	4a21      	ldr	r2, [pc, #132]	; (402414 <mem_free+0x8c>)
  402390:	6812      	ldr	r2, [r2, #0]
  402392:	4290      	cmp	r0, r2
  402394:	d336      	bcc.n	402404 <mem_free+0x7c>
  402396:	4920      	ldr	r1, [pc, #128]	; (402418 <mem_free+0x90>)
  402398:	6808      	ldr	r0, [r1, #0]
  40239a:	4283      	cmp	r3, r0
  40239c:	d232      	bcs.n	402404 <mem_free+0x7c>
{
  40239e:	b470      	push	{r4, r5, r6}
    return;
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  4023a0:	f1a3 0108 	sub.w	r1, r3, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
  4023a4:	2400      	movs	r4, #0
  4023a6:	f803 4c04 	strb.w	r4, [r3, #-4]

  if (mem < lfree) {
  4023aa:	4c1c      	ldr	r4, [pc, #112]	; (40241c <mem_free+0x94>)
  4023ac:	6824      	ldr	r4, [r4, #0]
  4023ae:	42a1      	cmp	r1, r4
  4023b0:	d201      	bcs.n	4023b6 <mem_free+0x2e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
  4023b2:	4c1a      	ldr	r4, [pc, #104]	; (40241c <mem_free+0x94>)
  4023b4:	6021      	str	r1, [r4, #0]
  nmem = (struct mem *)(void *)&ram[mem->next];
  4023b6:	f833 5c08 	ldrh.w	r5, [r3, #-8]
  4023ba:	1954      	adds	r4, r2, r5
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
  4023bc:	42a1      	cmp	r1, r4
  4023be:	d00e      	beq.n	4023de <mem_free+0x56>
  4023c0:	7926      	ldrb	r6, [r4, #4]
  4023c2:	b966      	cbnz	r6, 4023de <mem_free+0x56>
  4023c4:	42a0      	cmp	r0, r4
  4023c6:	d00a      	beq.n	4023de <mem_free+0x56>
    if (lfree == nmem) {
  4023c8:	4814      	ldr	r0, [pc, #80]	; (40241c <mem_free+0x94>)
  4023ca:	6800      	ldr	r0, [r0, #0]
  4023cc:	4284      	cmp	r4, r0
  4023ce:	d01a      	beq.n	402406 <mem_free+0x7e>
    mem->next = nmem->next;
  4023d0:	5b50      	ldrh	r0, [r2, r5]
  4023d2:	f823 0c08 	strh.w	r0, [r3, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
  4023d6:	5b50      	ldrh	r0, [r2, r5]
  4023d8:	4410      	add	r0, r2
  4023da:	1a8c      	subs	r4, r1, r2
  4023dc:	8044      	strh	r4, [r0, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
  4023de:	f833 0c06 	ldrh.w	r0, [r3, #-6]
  4023e2:	1814      	adds	r4, r2, r0
  if (pmem != mem && pmem->used == 0) {
  4023e4:	42a1      	cmp	r1, r4
  4023e6:	d00c      	beq.n	402402 <mem_free+0x7a>
  4023e8:	7925      	ldrb	r5, [r4, #4]
  4023ea:	b955      	cbnz	r5, 402402 <mem_free+0x7a>
    if (lfree == mem) {
  4023ec:	4d0b      	ldr	r5, [pc, #44]	; (40241c <mem_free+0x94>)
  4023ee:	682d      	ldr	r5, [r5, #0]
  4023f0:	42a9      	cmp	r1, r5
  4023f2:	d00b      	beq.n	40240c <mem_free+0x84>
    pmem->next = mem->next;
  4023f4:	f833 1c08 	ldrh.w	r1, [r3, #-8]
  4023f8:	5211      	strh	r1, [r2, r0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
  4023fa:	f833 3c08 	ldrh.w	r3, [r3, #-8]
  4023fe:	441a      	add	r2, r3
  402400:	8050      	strh	r0, [r2, #2]
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
  402402:	bc70      	pop	{r4, r5, r6}
  402404:	4770      	bx	lr
      lfree = mem;
  402406:	4805      	ldr	r0, [pc, #20]	; (40241c <mem_free+0x94>)
  402408:	6001      	str	r1, [r0, #0]
  40240a:	e7e1      	b.n	4023d0 <mem_free+0x48>
      lfree = pmem;
  40240c:	4903      	ldr	r1, [pc, #12]	; (40241c <mem_free+0x94>)
  40240e:	600c      	str	r4, [r1, #0]
  402410:	e7f0      	b.n	4023f4 <mem_free+0x6c>
  402412:	bf00      	nop
  402414:	20400aa4 	.word	0x20400aa4
  402418:	20400aa8 	.word	0x20400aa8
  40241c:	20400aa0 	.word	0x20400aa0

00402420 <mem_trim>:
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
  402420:	3103      	adds	r1, #3
  402422:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  402426:	400b      	ands	r3, r1
  402428:	2b0c      	cmp	r3, #12
  40242a:	bf38      	it	cc
  40242c:	230c      	movcc	r3, #12
  if(newsize < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
  40242e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  402432:	d852      	bhi.n	4024da <mem_trim+0xba>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
  402434:	4a2b      	ldr	r2, [pc, #172]	; (4024e4 <mem_trim+0xc4>)
  402436:	6812      	ldr	r2, [r2, #0]
  402438:	4282      	cmp	r2, r0
  40243a:	d82b      	bhi.n	402494 <mem_trim+0x74>
  40243c:	492a      	ldr	r1, [pc, #168]	; (4024e8 <mem_trim+0xc8>)
  40243e:	6809      	ldr	r1, [r1, #0]
  402440:	4288      	cmp	r0, r1
  402442:	d227      	bcs.n	402494 <mem_trim+0x74>
{
  402444:	b4f0      	push	{r4, r5, r6, r7}
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  402446:	f1a0 0408 	sub.w	r4, r0, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
  40244a:	1aa4      	subs	r4, r4, r2
  40244c:	b2a4      	uxth	r4, r4

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
  40244e:	f830 5c08 	ldrh.w	r5, [r0, #-8]
  402452:	f1a5 0108 	sub.w	r1, r5, #8
  402456:	1b09      	subs	r1, r1, r4
  402458:	b289      	uxth	r1, r1
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
  40245a:	4299      	cmp	r1, r3
  40245c:	d33f      	bcc.n	4024de <mem_trim+0xbe>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
  40245e:	d018      	beq.n	402492 <mem_trim+0x72>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
  402460:	1956      	adds	r6, r2, r5
  if(mem2->used == 0) {
  402462:	7937      	ldrb	r7, [r6, #4]
  402464:	b9df      	cbnz	r7, 40249e <mem_trim+0x7e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
  402466:	5b55      	ldrh	r5, [r2, r5]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
  402468:	f104 0108 	add.w	r1, r4, #8
  40246c:	440b      	add	r3, r1
  40246e:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
  402470:	491e      	ldr	r1, [pc, #120]	; (4024ec <mem_trim+0xcc>)
  402472:	6809      	ldr	r1, [r1, #0]
  402474:	428e      	cmp	r6, r1
  402476:	d00e      	beq.n	402496 <mem_trim+0x76>
      lfree = (struct mem *)(void *)&ram[ptr2];
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
  402478:	18d1      	adds	r1, r2, r3
    mem2->used = 0;
  40247a:	2600      	movs	r6, #0
  40247c:	710e      	strb	r6, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
  40247e:	52d5      	strh	r5, [r2, r3]
    /* link it back to mem */
    mem2->prev = ptr;
  402480:	804c      	strh	r4, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
  402482:	f820 3c08 	strh.w	r3, [r0, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
  402486:	5ad1      	ldrh	r1, [r2, r3]
  402488:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  40248c:	d001      	beq.n	402492 <mem_trim+0x72>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  40248e:	440a      	add	r2, r1
  402490:	8053      	strh	r3, [r2, #2]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
  402492:	bcf0      	pop	{r4, r5, r6, r7}
  402494:	4770      	bx	lr
      lfree = (struct mem *)(void *)&ram[ptr2];
  402496:	18d1      	adds	r1, r2, r3
  402498:	4e14      	ldr	r6, [pc, #80]	; (4024ec <mem_trim+0xcc>)
  40249a:	6031      	str	r1, [r6, #0]
  40249c:	e7ec      	b.n	402478 <mem_trim+0x58>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
  40249e:	f103 0514 	add.w	r5, r3, #20
  4024a2:	428d      	cmp	r5, r1
  4024a4:	d8f5      	bhi.n	402492 <mem_trim+0x72>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
  4024a6:	f104 0108 	add.w	r1, r4, #8
  4024aa:	440b      	add	r3, r1
  4024ac:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
  4024ae:	18d1      	adds	r1, r2, r3
    if (mem2 < lfree) {
  4024b0:	4d0e      	ldr	r5, [pc, #56]	; (4024ec <mem_trim+0xcc>)
  4024b2:	682d      	ldr	r5, [r5, #0]
  4024b4:	42a9      	cmp	r1, r5
  4024b6:	d201      	bcs.n	4024bc <mem_trim+0x9c>
      lfree = mem2;
  4024b8:	4d0c      	ldr	r5, [pc, #48]	; (4024ec <mem_trim+0xcc>)
  4024ba:	6029      	str	r1, [r5, #0]
    mem2->used = 0;
  4024bc:	2500      	movs	r5, #0
  4024be:	710d      	strb	r5, [r1, #4]
    mem2->next = mem->next;
  4024c0:	f830 5c08 	ldrh.w	r5, [r0, #-8]
  4024c4:	52d5      	strh	r5, [r2, r3]
    mem2->prev = ptr;
  4024c6:	804c      	strh	r4, [r1, #2]
    mem->next = ptr2;
  4024c8:	f820 3c08 	strh.w	r3, [r0, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
  4024cc:	5ad1      	ldrh	r1, [r2, r3]
  4024ce:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  4024d2:	d0de      	beq.n	402492 <mem_trim+0x72>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  4024d4:	440a      	add	r2, r1
  4024d6:	8053      	strh	r3, [r2, #2]
  4024d8:	e7db      	b.n	402492 <mem_trim+0x72>
    return NULL;
  4024da:	2000      	movs	r0, #0
  4024dc:	4770      	bx	lr
    return NULL;
  4024de:	2000      	movs	r0, #0
  4024e0:	e7d7      	b.n	402492 <mem_trim+0x72>
  4024e2:	bf00      	nop
  4024e4:	20400aa4 	.word	0x20400aa4
  4024e8:	20400aa8 	.word	0x20400aa8
  4024ec:	20400aa0 	.word	0x20400aa0

004024f0 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
  4024f0:	2800      	cmp	r0, #0
  4024f2:	d061      	beq.n	4025b8 <mem_malloc+0xc8>
{
  4024f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4024f6:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
  4024f8:	3303      	adds	r3, #3
  4024fa:	f64f 74fc 	movw	r4, #65532	; 0xfffc
  4024fe:	401c      	ands	r4, r3
  402500:	2c0c      	cmp	r4, #12
  402502:	bf38      	it	cc
  402504:	240c      	movcc	r4, #12
  if(size < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
  402506:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40250a:	d857      	bhi.n	4025bc <mem_malloc+0xcc>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
  40250c:	4b2d      	ldr	r3, [pc, #180]	; (4025c4 <mem_malloc+0xd4>)
  40250e:	681f      	ldr	r7, [r3, #0]
  402510:	4b2d      	ldr	r3, [pc, #180]	; (4025c8 <mem_malloc+0xd8>)
  402512:	6819      	ldr	r1, [r3, #0]
  402514:	1a7b      	subs	r3, r7, r1
  402516:	b29b      	uxth	r3, r3
  402518:	f5c4 5580 	rsb	r5, r4, #4096	; 0x1000
  40251c:	42ab      	cmp	r3, r5
  40251e:	da4f      	bge.n	4025c0 <mem_malloc+0xd0>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
  402520:	f06f 0c07 	mvn.w	ip, #7
  402524:	46a6      	mov	lr, r4
  402526:	e00e      	b.n	402546 <mem_malloc+0x56>
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
  402528:	2301      	movs	r3, #1
  40252a:	7103      	strb	r3, [r0, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
  40252c:	4b25      	ldr	r3, [pc, #148]	; (4025c4 <mem_malloc+0xd4>)
  40252e:	681b      	ldr	r3, [r3, #0]
  402530:	4298      	cmp	r0, r3
  402532:	d02f      	beq.n	402594 <mem_malloc+0xa4>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
  402534:	3008      	adds	r0, #8
  402536:	bdf0      	pop	{r4, r5, r6, r7, pc}
      mem = (struct mem *)(void *)&ram[ptr];
  402538:	4603      	mov	r3, r0
  40253a:	e038      	b.n	4025ae <mem_malloc+0xbe>
  40253c:	4603      	mov	r3, r0
  40253e:	e036      	b.n	4025ae <mem_malloc+0xbe>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
  402540:	8803      	ldrh	r3, [r0, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
  402542:	42ab      	cmp	r3, r5
  402544:	da36      	bge.n	4025b4 <mem_malloc+0xc4>
      mem = (struct mem *)(void *)&ram[ptr];
  402546:	18c8      	adds	r0, r1, r3
      if ((!mem->used) &&
  402548:	7902      	ldrb	r2, [r0, #4]
  40254a:	2a00      	cmp	r2, #0
  40254c:	d1f8      	bne.n	402540 <mem_malloc+0x50>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
  40254e:	ebac 0203 	sub.w	r2, ip, r3
  402552:	5ace      	ldrh	r6, [r1, r3]
  402554:	4432      	add	r2, r6
  402556:	4676      	mov	r6, lr
      if ((!mem->used) &&
  402558:	42a2      	cmp	r2, r4
  40255a:	d3f1      	bcc.n	402540 <mem_malloc+0x50>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
  40255c:	3614      	adds	r6, #20
  40255e:	42b2      	cmp	r2, r6
  402560:	d3e2      	bcc.n	402528 <mem_malloc+0x38>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
  402562:	f104 0208 	add.w	r2, r4, #8
  402566:	441a      	add	r2, r3
  402568:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
  40256a:	188c      	adds	r4, r1, r2
          mem2->used = 0;
  40256c:	2500      	movs	r5, #0
  40256e:	7125      	strb	r5, [r4, #4]
          mem2->next = mem->next;
  402570:	8805      	ldrh	r5, [r0, #0]
  402572:	528d      	strh	r5, [r1, r2]
          mem2->prev = ptr;
  402574:	8063      	strh	r3, [r4, #2]
          mem->next = ptr2;
  402576:	8002      	strh	r2, [r0, #0]
          mem->used = 1;
  402578:	2301      	movs	r3, #1
  40257a:	7103      	strb	r3, [r0, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
  40257c:	5a8b      	ldrh	r3, [r1, r2]
  40257e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  402582:	d0d3      	beq.n	40252c <mem_malloc+0x3c>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  402584:	4419      	add	r1, r3
  402586:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
  402588:	4287      	cmp	r7, r0
  40258a:	d1d3      	bne.n	402534 <mem_malloc+0x44>
          while (cur->used && cur != ram_end) {
  40258c:	7903      	ldrb	r3, [r0, #4]
  40258e:	2b00      	cmp	r3, #0
  402590:	d0d2      	beq.n	402538 <mem_malloc+0x48>
        if (mem == lfree) {
  402592:	4603      	mov	r3, r0
          while (cur->used && cur != ram_end) {
  402594:	4a0d      	ldr	r2, [pc, #52]	; (4025cc <mem_malloc+0xdc>)
  402596:	6811      	ldr	r1, [r2, #0]
  402598:	4288      	cmp	r0, r1
  40259a:	d0cf      	beq.n	40253c <mem_malloc+0x4c>
            cur = (struct mem *)(void *)&ram[cur->next];
  40259c:	4a0a      	ldr	r2, [pc, #40]	; (4025c8 <mem_malloc+0xd8>)
  40259e:	6814      	ldr	r4, [r2, #0]
  4025a0:	881b      	ldrh	r3, [r3, #0]
  4025a2:	4423      	add	r3, r4
          while (cur->used && cur != ram_end) {
  4025a4:	791a      	ldrb	r2, [r3, #4]
  4025a6:	b112      	cbz	r2, 4025ae <mem_malloc+0xbe>
  4025a8:	428b      	cmp	r3, r1
  4025aa:	d1f9      	bne.n	4025a0 <mem_malloc+0xb0>
            cur = (struct mem *)(void *)&ram[cur->next];
  4025ac:	460b      	mov	r3, r1
          lfree = cur;
  4025ae:	4a05      	ldr	r2, [pc, #20]	; (4025c4 <mem_malloc+0xd4>)
  4025b0:	6013      	str	r3, [r2, #0]
  4025b2:	e7bf      	b.n	402534 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
  4025b4:	2000      	movs	r0, #0
  4025b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
  4025b8:	2000      	movs	r0, #0
  4025ba:	4770      	bx	lr
    return NULL;
  4025bc:	2000      	movs	r0, #0
  4025be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return NULL;
  4025c0:	2000      	movs	r0, #0
  4025c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4025c4:	20400aa0 	.word	0x20400aa0
  4025c8:	20400aa4 	.word	0x20400aa4
  4025cc:	20400aa8 	.word	0x20400aa8

004025d0 <memp_init>:
 * 
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
  4025d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
  4025d4:	4f18      	ldr	r7, [pc, #96]	; (402638 <memp_init+0x68>)
  4025d6:	f027 0703 	bic.w	r7, r7, #3
  4025da:	4e18      	ldr	r6, [pc, #96]	; (40263c <memp_init+0x6c>)
  4025dc:	f8df c060 	ldr.w	ip, [pc, #96]	; 402640 <memp_init+0x70>
  4025e0:	f8df e060 	ldr.w	lr, [pc, #96]	; 402644 <memp_init+0x74>
  4025e4:	f106 0a24 	add.w	sl, r6, #36	; 0x24
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
    memp_tab[i] = NULL;
  4025e8:	f04f 0900 	mov.w	r9, #0
  4025ec:	e015      	b.n	40261a <memp_init+0x4a>
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
      memp->next = memp_tab[i];
      memp_tab[i] = memp;
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
  4025ee:	4603      	mov	r3, r0
      memp->next = memp_tab[i];
  4025f0:	6019      	str	r1, [r3, #0]
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
  4025f2:	1958      	adds	r0, r3, r5
  4025f4:	3201      	adds	r2, #1
      memp_tab[i] = memp;
  4025f6:	4619      	mov	r1, r3
    for (j = 0; j < memp_num[i]; ++j) {
  4025f8:	b293      	uxth	r3, r2
  4025fa:	429c      	cmp	r4, r3
  4025fc:	d8f7      	bhi.n	4025ee <memp_init+0x1e>
  4025fe:	3c01      	subs	r4, #1
  402600:	b2a4      	uxth	r4, r4
  402602:	fb04 5305 	mla	r3, r4, r5, r5
  402606:	fb04 7405 	mla	r4, r4, r5, r7
  40260a:	f8c8 4000 	str.w	r4, [r8]
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
  40260e:	441f      	add	r7, r3
  402610:	3604      	adds	r6, #4
  402612:	f10e 0e02 	add.w	lr, lr, #2
  for (i = 0; i < MEMP_MAX; ++i) {
  402616:	4556      	cmp	r6, sl
  402618:	d00c      	beq.n	402634 <memp_init+0x64>
  40261a:	46b0      	mov	r8, r6
    memp_tab[i] = NULL;
  40261c:	f8c6 9000 	str.w	r9, [r6]
    for (j = 0; j < memp_num[i]; ++j) {
  402620:	f83c 4f02 	ldrh.w	r4, [ip, #2]!
  402624:	2c00      	cmp	r4, #0
  402626:	d0f3      	beq.n	402610 <memp_init+0x40>
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
  402628:	f8be 5000 	ldrh.w	r5, [lr]
  40262c:	463b      	mov	r3, r7
  40262e:	2200      	movs	r2, #0
  402630:	4611      	mov	r1, r2
  402632:	e7dd      	b.n	4025f0 <memp_init+0x20>
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
  402634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402638:	20400aaf 	.word	0x20400aaf
  40263c:	204025fc 	.word	0x204025fc
  402640:	0040a7e6 	.word	0x0040a7e6
  402644:	0040a7fc 	.word	0x0040a7fc

00402648 <memp_malloc>:
#endif
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
  402648:	2808      	cmp	r0, #8
  40264a:	d809      	bhi.n	402660 <memp_malloc+0x18>
  SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
  40264c:	4b09      	ldr	r3, [pc, #36]	; (402674 <memp_malloc+0x2c>)
  40264e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  
  if (memp != NULL) {
  402652:	b11b      	cbz	r3, 40265c <memp_malloc+0x14>
    memp_tab[type] = memp->next;
  402654:	6819      	ldr	r1, [r3, #0]
  402656:	4a07      	ldr	r2, [pc, #28]	; (402674 <memp_malloc+0x2c>)
  402658:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
}
  40265c:	4618      	mov	r0, r3
  40265e:	4770      	bx	lr
{
  402660:	b510      	push	{r4, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
  402662:	4b05      	ldr	r3, [pc, #20]	; (402678 <memp_malloc+0x30>)
  402664:	f44f 72c7 	mov.w	r2, #398	; 0x18e
  402668:	4904      	ldr	r1, [pc, #16]	; (40267c <memp_malloc+0x34>)
  40266a:	4805      	ldr	r0, [pc, #20]	; (402680 <memp_malloc+0x38>)
  40266c:	4c05      	ldr	r4, [pc, #20]	; (402684 <memp_malloc+0x3c>)
  40266e:	47a0      	blx	r4
  402670:	e7fe      	b.n	402670 <memp_malloc+0x28>
  402672:	bf00      	nop
  402674:	204025fc 	.word	0x204025fc
  402678:	0040a768 	.word	0x0040a768
  40267c:	0040a7a0 	.word	0x0040a7a0
  402680:	0040a7c0 	.word	0x0040a7c0
  402684:	00407289 	.word	0x00407289

00402688 <memp_free>:
memp_free(memp_t type, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
  402688:	460b      	mov	r3, r1
  40268a:	b129      	cbz	r1, 402698 <memp_free+0x10>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
  
  memp->next = memp_tab[type]; 
  40268c:	4a03      	ldr	r2, [pc, #12]	; (40269c <memp_free+0x14>)
  40268e:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
  402692:	6019      	str	r1, [r3, #0]
  memp_tab[type] = memp;
  402694:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  402698:	4770      	bx	lr
  40269a:	bf00      	nop
  40269c:	204025fc 	.word	0x204025fc

004026a0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
  4026a0:	4770      	bx	lr
	...

004026a4 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
  4026a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4026a6:	4604      	mov	r4, r0
#if LWIP_TCP
  struct tcp_pcb *pcb;
  struct tcp_pcb_listen *lpcb;

  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
  4026a8:	2900      	cmp	r1, #0
  4026aa:	d027      	beq.n	4026fc <netif_set_ipaddr+0x58>
  4026ac:	460d      	mov	r5, r1
  4026ae:	680a      	ldr	r2, [r1, #0]
  4026b0:	6843      	ldr	r3, [r0, #4]
  4026b2:	429a      	cmp	r2, r3
  4026b4:	d011      	beq.n	4026da <netif_set_ipaddr+0x36>
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
  4026b6:	4b12      	ldr	r3, [pc, #72]	; (402700 <netif_set_ipaddr+0x5c>)
  4026b8:	6818      	ldr	r0, [r3, #0]
    while (pcb != NULL) {
  4026ba:	b158      	cbz	r0, 4026d4 <netif_set_ipaddr+0x30>
#endif /* LWIP_AUTOIP */
        ) {
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
  4026bc:	4f11      	ldr	r7, [pc, #68]	; (402704 <netif_set_ipaddr+0x60>)
  4026be:	e003      	b.n	4026c8 <netif_set_ipaddr+0x24>
        struct tcp_pcb *next = pcb->next;
  4026c0:	68c6      	ldr	r6, [r0, #12]
        tcp_abort(pcb);
  4026c2:	47b8      	blx	r7
        pcb = next;
  4026c4:	4630      	mov	r0, r6
    while (pcb != NULL) {
  4026c6:	b128      	cbz	r0, 4026d4 <netif_set_ipaddr+0x30>
      if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
  4026c8:	6802      	ldr	r2, [r0, #0]
  4026ca:	6863      	ldr	r3, [r4, #4]
  4026cc:	429a      	cmp	r2, r3
  4026ce:	d0f7      	beq.n	4026c0 <netif_set_ipaddr+0x1c>
      } else {
        pcb = pcb->next;
  4026d0:	68c0      	ldr	r0, [r0, #12]
  4026d2:	e7f8      	b.n	4026c6 <netif_set_ipaddr+0x22>
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  4026d4:	4b0c      	ldr	r3, [pc, #48]	; (402708 <netif_set_ipaddr+0x64>)
  4026d6:	681b      	ldr	r3, [r3, #0]
  4026d8:	b92b      	cbnz	r3, 4026e6 <netif_set_ipaddr+0x42>
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
  4026da:	682b      	ldr	r3, [r5, #0]
  4026dc:	6063      	str	r3, [r4, #4]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->ip_addr),
    ip4_addr2_16(&netif->ip_addr),
    ip4_addr3_16(&netif->ip_addr),
    ip4_addr4_16(&netif->ip_addr)));
}
  4026de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  4026e0:	68db      	ldr	r3, [r3, #12]
  4026e2:	2b00      	cmp	r3, #0
  4026e4:	d0f9      	beq.n	4026da <netif_set_ipaddr+0x36>
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
  4026e6:	2b00      	cmp	r3, #0
  4026e8:	d0fa      	beq.n	4026e0 <netif_set_ipaddr+0x3c>
  4026ea:	681a      	ldr	r2, [r3, #0]
  4026ec:	2a00      	cmp	r2, #0
  4026ee:	d0f7      	beq.n	4026e0 <netif_set_ipaddr+0x3c>
  4026f0:	6861      	ldr	r1, [r4, #4]
  4026f2:	428a      	cmp	r2, r1
  4026f4:	d1f4      	bne.n	4026e0 <netif_set_ipaddr+0x3c>
        ip_addr_set(&(lpcb->local_ip), ipaddr);
  4026f6:	682a      	ldr	r2, [r5, #0]
  4026f8:	601a      	str	r2, [r3, #0]
  4026fa:	e7f1      	b.n	4026e0 <netif_set_ipaddr+0x3c>
  ip_addr_set(&(netif->ip_addr), ipaddr);
  4026fc:	2300      	movs	r3, #0
  4026fe:	e7ed      	b.n	4026dc <netif_set_ipaddr+0x38>
  402700:	204049cc 	.word	0x204049cc
  402704:	00403759 	.word	0x00403759
  402708:	204049d4 	.word	0x204049d4

0040270c <netif_set_addr>:
{
  40270c:	b570      	push	{r4, r5, r6, lr}
  40270e:	4604      	mov	r4, r0
  402710:	4616      	mov	r6, r2
  402712:	461d      	mov	r5, r3
  netif_set_ipaddr(netif, ipaddr);
  402714:	4b06      	ldr	r3, [pc, #24]	; (402730 <netif_set_addr+0x24>)
  402716:	4798      	blx	r3
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
  402718:	b12e      	cbz	r6, 402726 <netif_set_addr+0x1a>
  40271a:	6833      	ldr	r3, [r6, #0]
  40271c:	60a3      	str	r3, [r4, #8]
  ip_addr_set(&(netif->gw), gw);
  40271e:	b125      	cbz	r5, 40272a <netif_set_addr+0x1e>
  402720:	682b      	ldr	r3, [r5, #0]
  402722:	60e3      	str	r3, [r4, #12]
  402724:	bd70      	pop	{r4, r5, r6, pc}
  ip_addr_set(&(netif->netmask), netmask);
  402726:	2300      	movs	r3, #0
  402728:	e7f8      	b.n	40271c <netif_set_addr+0x10>
  ip_addr_set(&(netif->gw), gw);
  40272a:	2300      	movs	r3, #0
  40272c:	e7f9      	b.n	402722 <netif_set_addr+0x16>
  40272e:	bf00      	nop
  402730:	004026a5 	.word	0x004026a5

00402734 <netif_add>:
{
  402734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402736:	4604      	mov	r4, r0
  ip_addr_set_zero(&netif->ip_addr);
  402738:	2500      	movs	r5, #0
  40273a:	6045      	str	r5, [r0, #4]
  ip_addr_set_zero(&netif->netmask);
  40273c:	6085      	str	r5, [r0, #8]
  ip_addr_set_zero(&netif->gw);
  40273e:	60c5      	str	r5, [r0, #12]
  netif->flags = 0;
  402740:	f880 502d 	strb.w	r5, [r0, #45]	; 0x2d
  netif->status_callback = NULL;
  402744:	61c5      	str	r5, [r0, #28]
  netif->state = state;
  402746:	9d06      	ldr	r5, [sp, #24]
  402748:	6205      	str	r5, [r0, #32]
  netif->num = netif_num++;
  40274a:	4e0b      	ldr	r6, [pc, #44]	; (402778 <netif_add+0x44>)
  40274c:	7835      	ldrb	r5, [r6, #0]
  40274e:	1c6f      	adds	r7, r5, #1
  402750:	7037      	strb	r7, [r6, #0]
  402752:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
  netif->input = input;
  402756:	9d08      	ldr	r5, [sp, #32]
  402758:	6105      	str	r5, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
  40275a:	4d08      	ldr	r5, [pc, #32]	; (40277c <netif_add+0x48>)
  40275c:	47a8      	blx	r5
  if (init(netif) != ERR_OK) {
  40275e:	4620      	mov	r0, r4
  402760:	9b07      	ldr	r3, [sp, #28]
  402762:	4798      	blx	r3
  402764:	b928      	cbnz	r0, 402772 <netif_add+0x3e>
  netif->next = netif_list;
  402766:	4b06      	ldr	r3, [pc, #24]	; (402780 <netif_add+0x4c>)
  402768:	681a      	ldr	r2, [r3, #0]
  40276a:	6022      	str	r2, [r4, #0]
  netif_list = netif;
  40276c:	601c      	str	r4, [r3, #0]
  return netif;
  40276e:	4620      	mov	r0, r4
  402770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
  402772:	2000      	movs	r0, #0
}
  402774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402776:	bf00      	nop
  402778:	20402620 	.word	0x20402620
  40277c:	0040270d 	.word	0x0040270d
  402780:	204049bc 	.word	0x204049bc

00402784 <netif_set_default>:
    snmp_delete_iprteidx_tree(1, netif);
  } else {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
  402784:	4b01      	ldr	r3, [pc, #4]	; (40278c <netif_set_default+0x8>)
  402786:	6018      	str	r0, [r3, #0]
  402788:	4770      	bx	lr
  40278a:	bf00      	nop
  40278c:	204049c0 	.word	0x204049c0

00402790 <netif_set_up>:
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
  if (!(netif->flags & NETIF_FLAG_UP)) {
  402790:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
  402794:	f013 0f01 	tst.w	r3, #1
  402798:	d114      	bne.n	4027c4 <netif_set_up+0x34>
{
  40279a:	b510      	push	{r4, lr}
  40279c:	4604      	mov	r4, r0
    netif->flags |= NETIF_FLAG_UP;
  40279e:	f043 0301 	orr.w	r3, r3, #1
  4027a2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif /* LWIP_SNMP */

    NETIF_STATUS_CALLBACK(netif);
  4027a6:	69c3      	ldr	r3, [r0, #28]
  4027a8:	b103      	cbz	r3, 4027ac <netif_set_up+0x1c>
  4027aa:	4798      	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & (NETIF_FLAG_ETHARP)) {
  4027ac:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
  4027b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
  4027b4:	2b30      	cmp	r3, #48	; 0x30
  4027b6:	d000      	beq.n	4027ba <netif_set_up+0x2a>
  4027b8:	bd10      	pop	{r4, pc}
        etharp_gratuitous(netif);
  4027ba:	1d21      	adds	r1, r4, #4
  4027bc:	4620      	mov	r0, r4
  4027be:	4b02      	ldr	r3, [pc, #8]	; (4027c8 <netif_set_up+0x38>)
  4027c0:	4798      	blx	r3
        igmp_report_groups( netif);
      }
#endif /* LWIP_IGMP */
    }
  }
}
  4027c2:	e7f9      	b.n	4027b8 <netif_set_up+0x28>
  4027c4:	4770      	bx	lr
  4027c6:	bf00      	nop
  4027c8:	0040610d 	.word	0x0040610d

004027cc <netif_set_status_callback>:
/**
 * Set callback to be called when interface is brought up/down
 */
void netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
  if (netif) {
  4027cc:	b100      	cbz	r0, 4027d0 <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
  4027ce:	61c1      	str	r1, [r0, #28]
  4027d0:	4770      	bx	lr
	...

004027d4 <pbuf_header>:
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
  4027d4:	2900      	cmp	r1, #0
  4027d6:	d033      	beq.n	402840 <pbuf_header+0x6c>
  4027d8:	460b      	mov	r3, r1
  4027da:	2800      	cmp	r0, #0
  4027dc:	d030      	beq.n	402840 <pbuf_header+0x6c>
{
  4027de:	b510      	push	{r4, lr}
    return 0;
  }
 
  if (header_size_increment < 0){
  4027e0:	2900      	cmp	r1, #0
  4027e2:	db11      	blt.n	402808 <pbuf_header+0x34>
    increment_magnitude = -header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  } else {
    increment_magnitude = header_size_increment;
  4027e4:	b28c      	uxth	r4, r1
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
  4027e6:	7b01      	ldrb	r1, [r0, #12]
  /* remember current payload pointer */
  payload = p->payload;
  4027e8:	6842      	ldr	r2, [r0, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
  4027ea:	b1d1      	cbz	r1, 402822 <pbuf_header+0x4e>
  4027ec:	2903      	cmp	r1, #3
  4027ee:	d018      	beq.n	402822 <pbuf_header+0x4e>
      p->payload = payload;
      /* bail out unsuccesfully */
      return 1;
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
  4027f0:	3901      	subs	r1, #1
  4027f2:	b289      	uxth	r1, r1
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  4027f4:	2901      	cmp	r1, #1
  4027f6:	d827      	bhi.n	402848 <pbuf_header+0x74>
  4027f8:	2b00      	cmp	r3, #0
  4027fa:	da25      	bge.n	402848 <pbuf_header+0x74>
  4027fc:	8941      	ldrh	r1, [r0, #10]
  4027fe:	42a1      	cmp	r1, r4
  402800:	d324      	bcc.n	40284c <pbuf_header+0x78>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
  402802:	1ad2      	subs	r2, r2, r3
  402804:	6042      	str	r2, [r0, #4]
  402806:	e012      	b.n	40282e <pbuf_header+0x5a>
    increment_magnitude = -header_size_increment;
  402808:	424c      	negs	r4, r1
  40280a:	b2a4      	uxth	r4, r4
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  40280c:	8942      	ldrh	r2, [r0, #10]
  40280e:	42a2      	cmp	r2, r4
  402810:	d2e9      	bcs.n	4027e6 <pbuf_header+0x12>
  402812:	4b0f      	ldr	r3, [pc, #60]	; (402850 <pbuf_header+0x7c>)
  402814:	f240 220f 	movw	r2, #527	; 0x20f
  402818:	490e      	ldr	r1, [pc, #56]	; (402854 <pbuf_header+0x80>)
  40281a:	480f      	ldr	r0, [pc, #60]	; (402858 <pbuf_header+0x84>)
  40281c:	4c0f      	ldr	r4, [pc, #60]	; (40285c <pbuf_header+0x88>)
  40281e:	47a0      	blx	r4
  402820:	e7fe      	b.n	402820 <pbuf_header+0x4c>
    p->payload = (u8_t *)p->payload - header_size_increment;
  402822:	1ad2      	subs	r2, r2, r3
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
  402824:	f100 0110 	add.w	r1, r0, #16
  402828:	428a      	cmp	r2, r1
  40282a:	d30b      	bcc.n	402844 <pbuf_header+0x70>
    p->payload = (u8_t *)p->payload - header_size_increment;
  40282c:	6042      	str	r2, [r0, #4]
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
  40282e:	b29b      	uxth	r3, r3
  402830:	8942      	ldrh	r2, [r0, #10]
  402832:	441a      	add	r2, r3
  402834:	8142      	strh	r2, [r0, #10]
  p->tot_len += header_size_increment;
  402836:	8902      	ldrh	r2, [r0, #8]
  402838:	4413      	add	r3, r2
  40283a:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
  40283c:	2000      	movs	r0, #0
  40283e:	bd10      	pop	{r4, pc}
    return 0;
  402840:	2000      	movs	r0, #0
  402842:	4770      	bx	lr
      return 1;
  402844:	2001      	movs	r0, #1
  402846:	bd10      	pop	{r4, pc}
      return 1;
  402848:	2001      	movs	r0, #1
  40284a:	bd10      	pop	{r4, pc}
  40284c:	2001      	movs	r0, #1
}
  40284e:	bd10      	pop	{r4, pc}
  402850:	0040a8f8 	.word	0x0040a8f8
  402854:	0040a930 	.word	0x0040a930
  402858:	0040a7c0 	.word	0x0040a7c0
  40285c:	00407289 	.word	0x00407289

00402860 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
  402860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
  402864:	b1f8      	cbz	r0, 4028a6 <pbuf_free+0x46>
  402866:	4601      	mov	r1, r0
  402868:	2400      	movs	r4, #0
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
          memp_free(MEMP_PBUF, p);
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
  40286a:	4d11      	ldr	r5, [pc, #68]	; (4028b0 <pbuf_free+0x50>)
          memp_free(MEMP_PBUF, p);
  40286c:	f04f 0807 	mov.w	r8, #7
  402870:	4e10      	ldr	r6, [pc, #64]	; (4028b4 <pbuf_free+0x54>)
  402872:	e008      	b.n	402886 <pbuf_free+0x26>
          memp_free(MEMP_PBUF_POOL, p);
  402874:	2008      	movs	r0, #8
  402876:	47b0      	blx	r6
  402878:	e001      	b.n	40287e <pbuf_free+0x1e>
          memp_free(MEMP_PBUF, p);
  40287a:	4640      	mov	r0, r8
  40287c:	47b0      	blx	r6
        }
      }
      count++;
  40287e:	3401      	adds	r4, #1
  402880:	b2e4      	uxtb	r4, r4
      /* proceed to next pbuf */
      p = q;
  402882:	4639      	mov	r1, r7
  while (p != NULL) {
  402884:	b187      	cbz	r7, 4028a8 <pbuf_free+0x48>
    ref = --(p->ref);
  402886:	89cb      	ldrh	r3, [r1, #14]
  402888:	3b01      	subs	r3, #1
  40288a:	b29b      	uxth	r3, r3
  40288c:	81cb      	strh	r3, [r1, #14]
    if (ref == 0) {
  40288e:	b95b      	cbnz	r3, 4028a8 <pbuf_free+0x48>
      q = p->next;
  402890:	680f      	ldr	r7, [r1, #0]
      type = p->type;
  402892:	7b0b      	ldrb	r3, [r1, #12]
        if (type == PBUF_POOL) {
  402894:	2b03      	cmp	r3, #3
  402896:	d0ed      	beq.n	402874 <pbuf_free+0x14>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
  402898:	3b01      	subs	r3, #1
  40289a:	b29b      	uxth	r3, r3
  40289c:	2b01      	cmp	r3, #1
  40289e:	d9ec      	bls.n	40287a <pbuf_free+0x1a>
          mem_free(p);
  4028a0:	4608      	mov	r0, r1
  4028a2:	47a8      	blx	r5
  4028a4:	e7eb      	b.n	40287e <pbuf_free+0x1e>
    return 0;
  4028a6:	2400      	movs	r4, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
  4028a8:	4620      	mov	r0, r4
  4028aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4028ae:	bf00      	nop
  4028b0:	00402389 	.word	0x00402389
  4028b4:	00402689 	.word	0x00402689

004028b8 <pbuf_alloc>:
{
  4028b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  switch (layer) {
  4028bc:	2803      	cmp	r0, #3
  4028be:	f200 8093 	bhi.w	4029e8 <pbuf_alloc+0x130>
  4028c2:	e8df f000 	tbb	[pc, r0]
  4028c6:	0208      	.short	0x0208
  4028c8:	0604      	.short	0x0604
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
  4028ca:	2422      	movs	r4, #34	; 0x22
  4028cc:	e004      	b.n	4028d8 <pbuf_alloc+0x20>
    offset = PBUF_LINK_HLEN;
  4028ce:	240e      	movs	r4, #14
    break;
  4028d0:	e002      	b.n	4028d8 <pbuf_alloc+0x20>
    offset = 0;
  4028d2:	2400      	movs	r4, #0
    break;
  4028d4:	e000      	b.n	4028d8 <pbuf_alloc+0x20>
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  4028d6:	2436      	movs	r4, #54	; 0x36
  4028d8:	4617      	mov	r7, r2
  4028da:	4688      	mov	r8, r1
  switch (type) {
  4028dc:	2a03      	cmp	r2, #3
  4028de:	f200 8085 	bhi.w	4029ec <pbuf_alloc+0x134>
  4028e2:	e8df f002 	tbb	[pc, r2]
  4028e6:	7252      	.short	0x7252
  4028e8:	0272      	.short	0x0272
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  4028ea:	2008      	movs	r0, #8
  4028ec:	4b40      	ldr	r3, [pc, #256]	; (4029f0 <pbuf_alloc+0x138>)
  4028ee:	4798      	blx	r3
    if (p == NULL) {
  4028f0:	4606      	mov	r6, r0
  4028f2:	2800      	cmp	r0, #0
  4028f4:	d03d      	beq.n	402972 <pbuf_alloc+0xba>
    p->type = type;
  4028f6:	2303      	movs	r3, #3
  4028f8:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
  4028fa:	2300      	movs	r3, #0
  4028fc:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
  4028fe:	1903      	adds	r3, r0, r4
  402900:	3313      	adds	r3, #19
  402902:	f023 0303 	bic.w	r3, r3, #3
  402906:	6043      	str	r3, [r0, #4]
    p->tot_len = length;
  402908:	f8a0 8008 	strh.w	r8, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
  40290c:	3403      	adds	r4, #3
  40290e:	f024 0403 	bic.w	r4, r4, #3
  402912:	f5c4 64c0 	rsb	r4, r4, #1536	; 0x600
  402916:	4544      	cmp	r4, r8
  402918:	bfa8      	it	ge
  40291a:	4644      	movge	r4, r8
  40291c:	8144      	strh	r4, [r0, #10]
    p->ref = 1;
  40291e:	2301      	movs	r3, #1
  402920:	81c3      	strh	r3, [r0, #14]
    rem_len = length - p->len;
  402922:	b2a5      	uxth	r5, r4
  402924:	eba8 0505 	sub.w	r5, r8, r5
    while (rem_len > 0) {
  402928:	2d00      	cmp	r5, #0
  40292a:	dd47      	ble.n	4029bc <pbuf_alloc+0x104>
  40292c:	4682      	mov	sl, r0
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  40292e:	f04f 0808 	mov.w	r8, #8
  402932:	4f2f      	ldr	r7, [pc, #188]	; (4029f0 <pbuf_alloc+0x138>)
      q->type = type;
  402934:	f04f 0903 	mov.w	r9, #3
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  402938:	4640      	mov	r0, r8
  40293a:	47b8      	blx	r7
      if (q == NULL) {
  40293c:	4604      	mov	r4, r0
  40293e:	b1e0      	cbz	r0, 40297a <pbuf_alloc+0xc2>
      q->type = type;
  402940:	f880 900c 	strb.w	r9, [r0, #12]
      q->flags = 0;
  402944:	2300      	movs	r3, #0
  402946:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
  402948:	6003      	str	r3, [r0, #0]
      r->next = q;
  40294a:	f8ca 0000 	str.w	r0, [sl]
      q->tot_len = (u16_t)rem_len;
  40294e:	b2ab      	uxth	r3, r5
  402950:	8103      	strh	r3, [r0, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
  402952:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
  402956:	bf28      	it	cs
  402958:	f44f 63c0 	movcs.w	r3, #1536	; 0x600
  40295c:	8143      	strh	r3, [r0, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
  40295e:	f100 0210 	add.w	r2, r0, #16
  402962:	6042      	str	r2, [r0, #4]
      q->ref = 1;
  402964:	2201      	movs	r2, #1
  402966:	81c2      	strh	r2, [r0, #14]
      rem_len -= q->len;
  402968:	1aed      	subs	r5, r5, r3
      r = q;
  40296a:	4682      	mov	sl, r0
    while (rem_len > 0) {
  40296c:	2d00      	cmp	r5, #0
  40296e:	dce3      	bgt.n	402938 <pbuf_alloc+0x80>
  402970:	e024      	b.n	4029bc <pbuf_alloc+0x104>
  pbuf_free_ooseq_pending = 1;
  402972:	2201      	movs	r2, #1
  402974:	4b1f      	ldr	r3, [pc, #124]	; (4029f4 <pbuf_alloc+0x13c>)
  402976:	701a      	strb	r2, [r3, #0]
  402978:	e024      	b.n	4029c4 <pbuf_alloc+0x10c>
  40297a:	2201      	movs	r2, #1
  40297c:	4b1d      	ldr	r3, [pc, #116]	; (4029f4 <pbuf_alloc+0x13c>)
  40297e:	701a      	strb	r2, [r3, #0]
        pbuf_free(p);
  402980:	4630      	mov	r0, r6
  402982:	4b1d      	ldr	r3, [pc, #116]	; (4029f8 <pbuf_alloc+0x140>)
  402984:	4798      	blx	r3
        return NULL;
  402986:	4626      	mov	r6, r4
  402988:	e01c      	b.n	4029c4 <pbuf_alloc+0x10c>
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
  40298a:	f104 0013 	add.w	r0, r4, #19
  40298e:	f020 0003 	bic.w	r0, r0, #3
  402992:	1ccb      	adds	r3, r1, #3
  402994:	f023 0303 	bic.w	r3, r3, #3
  402998:	4418      	add	r0, r3
  40299a:	b280      	uxth	r0, r0
  40299c:	4b17      	ldr	r3, [pc, #92]	; (4029fc <pbuf_alloc+0x144>)
  40299e:	4798      	blx	r3
    if (p == NULL) {
  4029a0:	4606      	mov	r6, r0
  4029a2:	b178      	cbz	r0, 4029c4 <pbuf_alloc+0x10c>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
  4029a4:	4404      	add	r4, r0
  4029a6:	3413      	adds	r4, #19
  4029a8:	f024 0403 	bic.w	r4, r4, #3
  4029ac:	6044      	str	r4, [r0, #4]
    p->len = p->tot_len = length;
  4029ae:	f8a0 8008 	strh.w	r8, [r0, #8]
  4029b2:	f8a0 800a 	strh.w	r8, [r0, #10]
    p->next = NULL;
  4029b6:	2300      	movs	r3, #0
  4029b8:	6003      	str	r3, [r0, #0]
    p->type = type;
  4029ba:	7303      	strb	r3, [r0, #12]
  p->ref = 1;
  4029bc:	2301      	movs	r3, #1
  4029be:	81f3      	strh	r3, [r6, #14]
  p->flags = 0;
  4029c0:	2300      	movs	r3, #0
  4029c2:	7373      	strb	r3, [r6, #13]
}
  4029c4:	4630      	mov	r0, r6
  4029c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
  4029ca:	2007      	movs	r0, #7
  4029cc:	4b08      	ldr	r3, [pc, #32]	; (4029f0 <pbuf_alloc+0x138>)
  4029ce:	4798      	blx	r3
    if (p == NULL) {
  4029d0:	4606      	mov	r6, r0
  4029d2:	2800      	cmp	r0, #0
  4029d4:	d0f6      	beq.n	4029c4 <pbuf_alloc+0x10c>
    p->payload = NULL;
  4029d6:	2300      	movs	r3, #0
  4029d8:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
  4029da:	f8a0 8008 	strh.w	r8, [r0, #8]
  4029de:	f8a0 800a 	strh.w	r8, [r0, #10]
    p->next = NULL;
  4029e2:	6003      	str	r3, [r0, #0]
    p->type = type;
  4029e4:	7307      	strb	r7, [r0, #12]
    break;
  4029e6:	e7e9      	b.n	4029bc <pbuf_alloc+0x104>
    return NULL;
  4029e8:	2600      	movs	r6, #0
  4029ea:	e7eb      	b.n	4029c4 <pbuf_alloc+0x10c>
    return NULL;
  4029ec:	2600      	movs	r6, #0
  4029ee:	e7e9      	b.n	4029c4 <pbuf_alloc+0x10c>
  4029f0:	00402649 	.word	0x00402649
  4029f4:	204049c4 	.word	0x204049c4
  4029f8:	00402861 	.word	0x00402861
  4029fc:	004024f1 	.word	0x004024f1

00402a00 <pbuf_realloc>:
  if (new_len >= p->tot_len) {
  402a00:	8902      	ldrh	r2, [r0, #8]
  402a02:	428a      	cmp	r2, r1
  402a04:	d926      	bls.n	402a54 <pbuf_realloc+0x54>
{
  402a06:	b538      	push	{r3, r4, r5, lr}
  402a08:	4604      	mov	r4, r0
  while (rem_len > q->len) {
  402a0a:	8943      	ldrh	r3, [r0, #10]
  402a0c:	4299      	cmp	r1, r3
  402a0e:	d91f      	bls.n	402a50 <pbuf_realloc+0x50>
  402a10:	460d      	mov	r5, r1
    q->tot_len += (u16_t)grow;
  402a12:	1a89      	subs	r1, r1, r2
    rem_len -= q->len;
  402a14:	1aeb      	subs	r3, r5, r3
  402a16:	b29d      	uxth	r5, r3
    q->tot_len += (u16_t)grow;
  402a18:	8923      	ldrh	r3, [r4, #8]
  402a1a:	440b      	add	r3, r1
  402a1c:	8123      	strh	r3, [r4, #8]
    q = q->next;
  402a1e:	6824      	ldr	r4, [r4, #0]
  while (rem_len > q->len) {
  402a20:	8963      	ldrh	r3, [r4, #10]
  402a22:	42ab      	cmp	r3, r5
  402a24:	d3f6      	bcc.n	402a14 <pbuf_realloc+0x14>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
  402a26:	7b22      	ldrb	r2, [r4, #12]
  402a28:	b94a      	cbnz	r2, 402a3e <pbuf_realloc+0x3e>
  402a2a:	429d      	cmp	r5, r3
  402a2c:	d007      	beq.n	402a3e <pbuf_realloc+0x3e>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
  402a2e:	6863      	ldr	r3, [r4, #4]
  402a30:	1b1b      	subs	r3, r3, r4
  402a32:	18e9      	adds	r1, r5, r3
  402a34:	b289      	uxth	r1, r1
  402a36:	4620      	mov	r0, r4
  402a38:	4b07      	ldr	r3, [pc, #28]	; (402a58 <pbuf_realloc+0x58>)
  402a3a:	4798      	blx	r3
  402a3c:	4604      	mov	r4, r0
  q->len = rem_len;
  402a3e:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
  402a40:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
  402a42:	6820      	ldr	r0, [r4, #0]
  402a44:	b108      	cbz	r0, 402a4a <pbuf_realloc+0x4a>
    pbuf_free(q->next);
  402a46:	4b05      	ldr	r3, [pc, #20]	; (402a5c <pbuf_realloc+0x5c>)
  402a48:	4798      	blx	r3
  q->next = NULL;
  402a4a:	2300      	movs	r3, #0
  402a4c:	6023      	str	r3, [r4, #0]
  402a4e:	bd38      	pop	{r3, r4, r5, pc}
  while (rem_len > q->len) {
  402a50:	460d      	mov	r5, r1
  402a52:	e7e8      	b.n	402a26 <pbuf_realloc+0x26>
  402a54:	4770      	bx	lr
  402a56:	bf00      	nop
  402a58:	00402421 	.word	0x00402421
  402a5c:	00402861 	.word	0x00402861

00402a60 <pbuf_clen>:
pbuf_clen(struct pbuf *p)
{
  u8_t len;

  len = 0;
  while (p != NULL) {
  402a60:	4603      	mov	r3, r0
  402a62:	b130      	cbz	r0, 402a72 <pbuf_clen+0x12>
  402a64:	2000      	movs	r0, #0
    ++len;
  402a66:	3001      	adds	r0, #1
  402a68:	b2c0      	uxtb	r0, r0
    p = p->next;
  402a6a:	681b      	ldr	r3, [r3, #0]
  while (p != NULL) {
  402a6c:	2b00      	cmp	r3, #0
  402a6e:	d1fa      	bne.n	402a66 <pbuf_clen+0x6>
  402a70:	4770      	bx	lr
  len = 0;
  402a72:	2000      	movs	r0, #0
  }
  return len;
}
  402a74:	4770      	bx	lr

00402a76 <pbuf_ref>:
void
pbuf_ref(struct pbuf *p)
{
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
  402a76:	b110      	cbz	r0, 402a7e <pbuf_ref+0x8>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
  402a78:	89c3      	ldrh	r3, [r0, #14]
  402a7a:	3301      	adds	r3, #1
  402a7c:	81c3      	strh	r3, [r0, #14]
  402a7e:	4770      	bx	lr

00402a80 <pbuf_cat>:
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  402a80:	b510      	push	{r4, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  402a82:	b128      	cbz	r0, 402a90 <pbuf_cat+0x10>
  402a84:	4602      	mov	r2, r0
  402a86:	b119      	cbz	r1, 402a90 <pbuf_cat+0x10>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  402a88:	6803      	ldr	r3, [r0, #0]
  402a8a:	b953      	cbnz	r3, 402aa2 <pbuf_cat+0x22>
  402a8c:	4603      	mov	r3, r0
  402a8e:	e010      	b.n	402ab2 <pbuf_cat+0x32>
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  402a90:	4b0b      	ldr	r3, [pc, #44]	; (402ac0 <pbuf_cat+0x40>)
  402a92:	f44f 723c 	mov.w	r2, #752	; 0x2f0
  402a96:	490b      	ldr	r1, [pc, #44]	; (402ac4 <pbuf_cat+0x44>)
  402a98:	480b      	ldr	r0, [pc, #44]	; (402ac8 <pbuf_cat+0x48>)
  402a9a:	4c0c      	ldr	r4, [pc, #48]	; (402acc <pbuf_cat+0x4c>)
  402a9c:	47a0      	blx	r4
  402a9e:	e7fe      	b.n	402a9e <pbuf_cat+0x1e>
  for (p = h; p->next != NULL; p = p->next) {
  402aa0:	4603      	mov	r3, r0
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  402aa2:	8910      	ldrh	r0, [r2, #8]
  402aa4:	890c      	ldrh	r4, [r1, #8]
  402aa6:	4420      	add	r0, r4
  402aa8:	8110      	strh	r0, [r2, #8]
  for (p = h; p->next != NULL; p = p->next) {
  402aaa:	6818      	ldr	r0, [r3, #0]
  402aac:	461a      	mov	r2, r3
  402aae:	2800      	cmp	r0, #0
  402ab0:	d1f6      	bne.n	402aa0 <pbuf_cat+0x20>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  402ab2:	891a      	ldrh	r2, [r3, #8]
  402ab4:	8908      	ldrh	r0, [r1, #8]
  402ab6:	4402      	add	r2, r0
  402ab8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  402aba:	6019      	str	r1, [r3, #0]
  402abc:	bd10      	pop	{r4, pc}
  402abe:	bf00      	nop
  402ac0:	0040a8f8 	.word	0x0040a8f8
  402ac4:	0040a810 	.word	0x0040a810
  402ac8:	0040a7c0 	.word	0x0040a7c0
  402acc:	00407289 	.word	0x00407289

00402ad0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
  402ad0:	b510      	push	{r4, lr}
  402ad2:	460c      	mov	r4, r1
  pbuf_cat(h, t);
  402ad4:	4b02      	ldr	r3, [pc, #8]	; (402ae0 <pbuf_chain+0x10>)
  402ad6:	4798      	blx	r3
  /* t is now referenced by h */
  pbuf_ref(t);
  402ad8:	4620      	mov	r0, r4
  402ada:	4b02      	ldr	r3, [pc, #8]	; (402ae4 <pbuf_chain+0x14>)
  402adc:	4798      	blx	r3
  402ade:	bd10      	pop	{r4, pc}
  402ae0:	00402a81 	.word	0x00402a81
  402ae4:	00402a77 	.word	0x00402a77

00402ae8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
  402ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  402aec:	b130      	cbz	r0, 402afc <pbuf_copy+0x14>
  402aee:	460d      	mov	r5, r1
  402af0:	4604      	mov	r4, r0
  402af2:	b119      	cbz	r1, 402afc <pbuf_copy+0x14>
  402af4:	8902      	ldrh	r2, [r0, #8]
  402af6:	890b      	ldrh	r3, [r1, #8]
  402af8:	429a      	cmp	r2, r3
  402afa:	d207      	bcs.n	402b0c <pbuf_copy+0x24>
  402afc:	4b32      	ldr	r3, [pc, #200]	; (402bc8 <pbuf_copy+0xe0>)
  402afe:	f240 325f 	movw	r2, #863	; 0x35f
  402b02:	4932      	ldr	r1, [pc, #200]	; (402bcc <pbuf_copy+0xe4>)
  402b04:	4832      	ldr	r0, [pc, #200]	; (402bd0 <pbuf_copy+0xe8>)
  402b06:	4c33      	ldr	r4, [pc, #204]	; (402bd4 <pbuf_copy+0xec>)
  402b08:	47a0      	blx	r4
  402b0a:	e7fe      	b.n	402b0a <pbuf_copy+0x22>
  402b0c:	f04f 0a00 	mov.w	sl, #0
  402b10:	4657      	mov	r7, sl
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  402b12:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 402be0 <pbuf_copy+0xf8>
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
  402b16:	46d0      	mov	r8, sl
  402b18:	e010      	b.n	402b3c <pbuf_copy+0x54>
      len = p_to->len - offset_to;
  402b1a:	1bdb      	subs	r3, r3, r7
  402b1c:	b29e      	uxth	r6, r3
  402b1e:	e015      	b.n	402b4c <pbuf_copy+0x64>
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
  402b20:	8963      	ldrh	r3, [r4, #10]
  402b22:	42bb      	cmp	r3, r7
  402b24:	d023      	beq.n	402b6e <pbuf_copy+0x86>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
  402b26:	2d00      	cmp	r5, #0
  402b28:	d041      	beq.n	402bae <pbuf_copy+0xc6>
  402b2a:	896a      	ldrh	r2, [r5, #10]
  402b2c:	892b      	ldrh	r3, [r5, #8]
  402b2e:	429a      	cmp	r2, r3
  402b30:	d02a      	beq.n	402b88 <pbuf_copy+0xa0>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  402b32:	b11c      	cbz	r4, 402b3c <pbuf_copy+0x54>
  402b34:	8962      	ldrh	r2, [r4, #10]
  402b36:	8923      	ldrh	r3, [r4, #8]
  402b38:	429a      	cmp	r2, r3
  402b3a:	d03d      	beq.n	402bb8 <pbuf_copy+0xd0>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
  402b3c:	8963      	ldrh	r3, [r4, #10]
  402b3e:	896a      	ldrh	r2, [r5, #10]
  402b40:	1bd8      	subs	r0, r3, r7
  402b42:	eba2 010a 	sub.w	r1, r2, sl
  402b46:	4288      	cmp	r0, r1
  402b48:	dbe7      	blt.n	402b1a <pbuf_copy+0x32>
      len = p_from->len - offset_from;
  402b4a:	b28e      	uxth	r6, r1
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  402b4c:	6860      	ldr	r0, [r4, #4]
  402b4e:	6869      	ldr	r1, [r5, #4]
  402b50:	4632      	mov	r2, r6
  402b52:	4451      	add	r1, sl
  402b54:	4438      	add	r0, r7
  402b56:	47c8      	blx	r9
    offset_to += len;
  402b58:	4437      	add	r7, r6
  402b5a:	b2bf      	uxth	r7, r7
    offset_from += len;
  402b5c:	4456      	add	r6, sl
  402b5e:	fa1f fa86 	uxth.w	sl, r6
    if (offset_from >= p_from->len) {
  402b62:	896b      	ldrh	r3, [r5, #10]
  402b64:	4553      	cmp	r3, sl
  402b66:	d8db      	bhi.n	402b20 <pbuf_copy+0x38>
      p_from = p_from->next;
  402b68:	682d      	ldr	r5, [r5, #0]
      offset_from = 0;
  402b6a:	46c2      	mov	sl, r8
  402b6c:	e7d8      	b.n	402b20 <pbuf_copy+0x38>
      p_to = p_to->next;
  402b6e:	6824      	ldr	r4, [r4, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
  402b70:	b904      	cbnz	r4, 402b74 <pbuf_copy+0x8c>
  402b72:	b90d      	cbnz	r5, 402b78 <pbuf_copy+0x90>
      offset_to = 0;
  402b74:	4647      	mov	r7, r8
  402b76:	e7d6      	b.n	402b26 <pbuf_copy+0x3e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
  402b78:	4b13      	ldr	r3, [pc, #76]	; (402bc8 <pbuf_copy+0xe0>)
  402b7a:	f240 327a 	movw	r2, #890	; 0x37a
  402b7e:	4916      	ldr	r1, [pc, #88]	; (402bd8 <pbuf_copy+0xf0>)
  402b80:	4813      	ldr	r0, [pc, #76]	; (402bd0 <pbuf_copy+0xe8>)
  402b82:	4c14      	ldr	r4, [pc, #80]	; (402bd4 <pbuf_copy+0xec>)
  402b84:	47a0      	blx	r4
  402b86:	e7fe      	b.n	402b86 <pbuf_copy+0x9e>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
  402b88:	682b      	ldr	r3, [r5, #0]
  402b8a:	2b00      	cmp	r3, #0
  402b8c:	d0d1      	beq.n	402b32 <pbuf_copy+0x4a>
  402b8e:	4b0e      	ldr	r3, [pc, #56]	; (402bc8 <pbuf_copy+0xe0>)
  402b90:	f44f 7260 	mov.w	r2, #896	; 0x380
  402b94:	4911      	ldr	r1, [pc, #68]	; (402bdc <pbuf_copy+0xf4>)
  402b96:	480e      	ldr	r0, [pc, #56]	; (402bd0 <pbuf_copy+0xe8>)
  402b98:	4c0e      	ldr	r4, [pc, #56]	; (402bd4 <pbuf_copy+0xec>)
  402b9a:	47a0      	blx	r4
  402b9c:	e7fe      	b.n	402b9c <pbuf_copy+0xb4>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
  402b9e:	4b0a      	ldr	r3, [pc, #40]	; (402bc8 <pbuf_copy+0xe0>)
  402ba0:	f240 3285 	movw	r2, #901	; 0x385
  402ba4:	490d      	ldr	r1, [pc, #52]	; (402bdc <pbuf_copy+0xf4>)
  402ba6:	480a      	ldr	r0, [pc, #40]	; (402bd0 <pbuf_copy+0xe8>)
  402ba8:	4c0a      	ldr	r4, [pc, #40]	; (402bd4 <pbuf_copy+0xec>)
  402baa:	47a0      	blx	r4
  402bac:	e7fe      	b.n	402bac <pbuf_copy+0xc4>
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  402bae:	b144      	cbz	r4, 402bc2 <pbuf_copy+0xda>
  402bb0:	8962      	ldrh	r2, [r4, #10]
  402bb2:	8923      	ldrh	r3, [r4, #8]
  402bb4:	429a      	cmp	r2, r3
  402bb6:	d104      	bne.n	402bc2 <pbuf_copy+0xda>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
  402bb8:	6823      	ldr	r3, [r4, #0]
  402bba:	2b00      	cmp	r3, #0
  402bbc:	d1ef      	bne.n	402b9e <pbuf_copy+0xb6>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  402bbe:	2d00      	cmp	r5, #0
  402bc0:	d1bc      	bne.n	402b3c <pbuf_copy+0x54>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
  402bc2:	2000      	movs	r0, #0
  402bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402bc8:	0040a8f8 	.word	0x0040a8f8
  402bcc:	0040a848 	.word	0x0040a848
  402bd0:	0040a7c0 	.word	0x0040a7c0
  402bd4:	00407289 	.word	0x00407289
  402bd8:	0040a878 	.word	0x0040a878
  402bdc:	0040a888 	.word	0x0040a888
  402be0:	00407311 	.word	0x00407311

00402be4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
  402be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  402be8:	b148      	cbz	r0, 402bfe <pbuf_copy_partial+0x1a>
  402bea:	460f      	mov	r7, r1
  402bec:	4692      	mov	sl, r2
  402bee:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  402bf0:	b189      	cbz	r1, 402c16 <pbuf_copy_partial+0x32>
  if((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
  402bf2:	b162      	cbz	r2, 402c0e <pbuf_copy_partial+0x2a>
  402bf4:	2600      	movs	r6, #0
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  402bf6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402c7c <pbuf_copy_partial+0x98>
      copied_total += buf_copy_len;
      left += buf_copy_len;
      len -= buf_copy_len;
      offset = 0;
  402bfa:	46b0      	mov	r8, r6
  402bfc:	e02b      	b.n	402c56 <pbuf_copy_partial+0x72>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  402bfe:	4b1a      	ldr	r3, [pc, #104]	; (402c68 <pbuf_copy_partial+0x84>)
  402c00:	f240 329f 	movw	r2, #927	; 0x39f
  402c04:	4919      	ldr	r1, [pc, #100]	; (402c6c <pbuf_copy_partial+0x88>)
  402c06:	481a      	ldr	r0, [pc, #104]	; (402c70 <pbuf_copy_partial+0x8c>)
  402c08:	4c1a      	ldr	r4, [pc, #104]	; (402c74 <pbuf_copy_partial+0x90>)
  402c0a:	47a0      	blx	r4
  402c0c:	e7fe      	b.n	402c0c <pbuf_copy_partial+0x28>
  for(p = buf; len != 0 && p != NULL; p = p->next) {
  402c0e:	4616      	mov	r6, r2
    }
  }
  return copied_total;
}
  402c10:	4630      	mov	r0, r6
  402c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  402c16:	4b14      	ldr	r3, [pc, #80]	; (402c68 <pbuf_copy_partial+0x84>)
  402c18:	f44f 7268 	mov.w	r2, #928	; 0x3a0
  402c1c:	4916      	ldr	r1, [pc, #88]	; (402c78 <pbuf_copy_partial+0x94>)
  402c1e:	4814      	ldr	r0, [pc, #80]	; (402c70 <pbuf_copy_partial+0x8c>)
  402c20:	4c14      	ldr	r4, [pc, #80]	; (402c74 <pbuf_copy_partial+0x90>)
  402c22:	47a0      	blx	r4
  402c24:	e7fe      	b.n	402c24 <pbuf_copy_partial+0x40>
      buf_copy_len = p->len - offset;
  402c26:	896c      	ldrh	r4, [r5, #10]
  402c28:	1ae4      	subs	r4, r4, r3
  402c2a:	b2a4      	uxth	r4, r4
  402c2c:	4554      	cmp	r4, sl
  402c2e:	bf28      	it	cs
  402c30:	4654      	movcs	r4, sl
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  402c32:	6869      	ldr	r1, [r5, #4]
  402c34:	4622      	mov	r2, r4
  402c36:	4419      	add	r1, r3
  402c38:	19b8      	adds	r0, r7, r6
  402c3a:	47c8      	blx	r9
      copied_total += buf_copy_len;
  402c3c:	4426      	add	r6, r4
  402c3e:	b2b6      	uxth	r6, r6
      len -= buf_copy_len;
  402c40:	ebaa 0404 	sub.w	r4, sl, r4
  402c44:	fa1f fa84 	uxth.w	sl, r4
      offset = 0;
  402c48:	4643      	mov	r3, r8
  for(p = buf; len != 0 && p != NULL; p = p->next) {
  402c4a:	682d      	ldr	r5, [r5, #0]
  402c4c:	f1ba 0f00 	cmp.w	sl, #0
  402c50:	d0de      	beq.n	402c10 <pbuf_copy_partial+0x2c>
  402c52:	2d00      	cmp	r5, #0
  402c54:	d0dc      	beq.n	402c10 <pbuf_copy_partial+0x2c>
    if ((offset != 0) && (offset >= p->len)) {
  402c56:	2b00      	cmp	r3, #0
  402c58:	d0e5      	beq.n	402c26 <pbuf_copy_partial+0x42>
  402c5a:	896a      	ldrh	r2, [r5, #10]
  402c5c:	429a      	cmp	r2, r3
  402c5e:	d8e2      	bhi.n	402c26 <pbuf_copy_partial+0x42>
      offset -= p->len;
  402c60:	1a9b      	subs	r3, r3, r2
  402c62:	b29b      	uxth	r3, r3
  402c64:	e7f1      	b.n	402c4a <pbuf_copy_partial+0x66>
  402c66:	bf00      	nop
  402c68:	0040a8f8 	.word	0x0040a8f8
  402c6c:	0040a8b4 	.word	0x0040a8b4
  402c70:	0040a7c0 	.word	0x0040a7c0
  402c74:	00407289 	.word	0x00407289
  402c78:	0040a8d4 	.word	0x0040a8d4
  402c7c:	00407311 	.word	0x00407311

00402c80 <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
  402c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t eaten = 0;

  LWIP_UNUSED_ARG(inp);

  iphdr = (struct ip_hdr *)p->payload;
  proto = IPH_PROTO(iphdr);
  402c84:	6843      	ldr	r3, [r0, #4]
  402c86:	7a5e      	ldrb	r6, [r3, #9]

  prev = NULL;
  pcb = raw_pcbs;
  402c88:	4b18      	ldr	r3, [pc, #96]	; (402cec <raw_input+0x6c>)
  402c8a:	681c      	ldr	r4, [r3, #0]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
  402c8c:	b35c      	cbz	r4, 402ce6 <raw_input+0x66>
  402c8e:	4682      	mov	sl, r0
  402c90:	2500      	movs	r5, #0
#endif /* IP_SOF_BROADCAST_RECV */
      {
        /* receive callback function available? */
        if (pcb->recv != NULL) {
          /* the receive callback function did not eat the packet? */
          if (pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr()) != 0) {
  402c92:	f8df 805c 	ldr.w	r8, [pc, #92]	; 402cf0 <raw_input+0x70>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest))) {
  402c96:	f8df 905c 	ldr.w	r9, [pc, #92]	; 402cf4 <raw_input+0x74>
  402c9a:	e003      	b.n	402ca4 <raw_input+0x24>
        /* no receive callback function was set for this raw PCB */
      }
      /* drop the packet */
    }
    prev = pcb;
    pcb = pcb->next;
  402c9c:	68e3      	ldr	r3, [r4, #12]
  402c9e:	4625      	mov	r5, r4
  while ((eaten == 0) && (pcb != NULL)) {
  402ca0:	b1f3      	cbz	r3, 402ce0 <raw_input+0x60>
    pcb = pcb->next;
  402ca2:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) &&
  402ca4:	7c23      	ldrb	r3, [r4, #16]
  402ca6:	42b3      	cmp	r3, r6
  402ca8:	d1f8      	bne.n	402c9c <raw_input+0x1c>
  402caa:	b12c      	cbz	r4, 402cb8 <raw_input+0x38>
        (ip_addr_isany(&pcb->local_ip) ||
  402cac:	6823      	ldr	r3, [r4, #0]
  402cae:	b11b      	cbz	r3, 402cb8 <raw_input+0x38>
  402cb0:	f8d9 2000 	ldr.w	r2, [r9]
  402cb4:	4293      	cmp	r3, r2
  402cb6:	d1f1      	bne.n	402c9c <raw_input+0x1c>
        if (pcb->recv != NULL) {
  402cb8:	6967      	ldr	r7, [r4, #20]
  402cba:	2f00      	cmp	r7, #0
  402cbc:	d0ee      	beq.n	402c9c <raw_input+0x1c>
          if (pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr()) != 0) {
  402cbe:	4643      	mov	r3, r8
  402cc0:	4652      	mov	r2, sl
  402cc2:	4621      	mov	r1, r4
  402cc4:	69a0      	ldr	r0, [r4, #24]
  402cc6:	47b8      	blx	r7
  402cc8:	2800      	cmp	r0, #0
  402cca:	d0e7      	beq.n	402c9c <raw_input+0x1c>
            if (prev != NULL) {
  402ccc:	b12d      	cbz	r5, 402cda <raw_input+0x5a>
              prev->next = pcb->next;
  402cce:	68e3      	ldr	r3, [r4, #12]
  402cd0:	60eb      	str	r3, [r5, #12]
              pcb->next = raw_pcbs;
  402cd2:	4b06      	ldr	r3, [pc, #24]	; (402cec <raw_input+0x6c>)
  402cd4:	681a      	ldr	r2, [r3, #0]
  402cd6:	60e2      	str	r2, [r4, #12]
              raw_pcbs = pcb;
  402cd8:	601c      	str	r4, [r3, #0]
  u8_t eaten = 0;
  402cda:	2001      	movs	r0, #1
  }
  return eaten;
}
  402cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402ce0:	2000      	movs	r0, #0
  402ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u8_t eaten = 0;
  402ce6:	2000      	movs	r0, #0
  402ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402cec:	20402624 	.word	0x20402624
  402cf0:	20403998 	.word	0x20403998
  402cf4:	204039a0 	.word	0x204039a0

00402cf8 <tcp_accept_null>:
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(err);

  return ERR_ABRT;
}
  402cf8:	f06f 0009 	mvn.w	r0, #9
  402cfc:	4770      	bx	lr
	...

00402d00 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
  402d00:	b4f0      	push	{r4, r5, r6, r7}
  402d02:	4b16      	ldr	r3, [pc, #88]	; (402d5c <tcp_new_port+0x5c>)
  402d04:	8818      	ldrh	r0, [r3, #0]
  402d06:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;
  
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  402d0a:	f64f 76ff 	movw	r6, #65535	; 0xffff
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  402d0e:	f44f 4740 	mov.w	r7, #49152	; 0xc000
  402d12:	e004      	b.n	402d1e <tcp_new_port+0x1e>
  402d14:	4638      	mov	r0, r7
  402d16:	e006      	b.n	402d26 <tcp_new_port+0x26>
  402d18:	3c01      	subs	r4, #1
  402d1a:	b2a4      	uxth	r4, r4
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
  402d1c:	b19c      	cbz	r4, 402d46 <tcp_new_port+0x46>
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  402d1e:	42b0      	cmp	r0, r6
  402d20:	d0f8      	beq.n	402d14 <tcp_new_port+0x14>
  402d22:	3001      	adds	r0, #1
  402d24:	b280      	uxth	r0, r0
  402d26:	490e      	ldr	r1, [pc, #56]	; (402d60 <tcp_new_port+0x60>)
  402d28:	f101 0510 	add.w	r5, r1, #16
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  402d2c:	f851 3b04 	ldr.w	r3, [r1], #4
  402d30:	681b      	ldr	r3, [r3, #0]
  402d32:	b163      	cbz	r3, 402d4e <tcp_new_port+0x4e>
      if (pcb->local_port == tcp_port) {
  402d34:	8b5a      	ldrh	r2, [r3, #26]
  402d36:	4282      	cmp	r2, r0
  402d38:	d0ee      	beq.n	402d18 <tcp_new_port+0x18>
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  402d3a:	68db      	ldr	r3, [r3, #12]
  402d3c:	b13b      	cbz	r3, 402d4e <tcp_new_port+0x4e>
      if (pcb->local_port == tcp_port) {
  402d3e:	8b5a      	ldrh	r2, [r3, #26]
  402d40:	4282      	cmp	r2, r0
  402d42:	d1fa      	bne.n	402d3a <tcp_new_port+0x3a>
  402d44:	e7e8      	b.n	402d18 <tcp_new_port+0x18>
  402d46:	4b05      	ldr	r3, [pc, #20]	; (402d5c <tcp_new_port+0x5c>)
  402d48:	8018      	strh	r0, [r3, #0]
          return 0;
  402d4a:	2000      	movs	r0, #0
  402d4c:	e003      	b.n	402d56 <tcp_new_port+0x56>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  402d4e:	428d      	cmp	r5, r1
  402d50:	d1ec      	bne.n	402d2c <tcp_new_port+0x2c>
  402d52:	4b02      	ldr	r3, [pc, #8]	; (402d5c <tcp_new_port+0x5c>)
  402d54:	8018      	strh	r0, [r3, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
  402d56:	bcf0      	pop	{r4, r5, r6, r7}
  402d58:	4770      	bx	lr
  402d5a:	bf00      	nop
  402d5c:	2040000c 	.word	0x2040000c
  402d60:	0040ad08 	.word	0x0040ad08

00402d64 <tcp_init>:
{
  402d64:	4770      	bx	lr
	...

00402d68 <tcp_bind>:
{
  402d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
  402d6a:	7e03      	ldrb	r3, [r0, #24]
  402d6c:	bb13      	cbnz	r3, 402db4 <tcp_bind+0x4c>
  402d6e:	4605      	mov	r5, r0
  402d70:	460e      	mov	r6, r1
  402d72:	4614      	mov	r4, r2
  if (port == 0) {
  402d74:	b922      	cbnz	r2, 402d80 <tcp_bind+0x18>
    port = tcp_new_port();
  402d76:	4b21      	ldr	r3, [pc, #132]	; (402dfc <tcp_bind+0x94>)
  402d78:	4798      	blx	r3
    if (port == 0) {
  402d7a:	4604      	mov	r4, r0
  402d7c:	2800      	cmp	r0, #0
  402d7e:	d033      	beq.n	402de8 <tcp_bind+0x80>
  402d80:	491f      	ldr	r1, [pc, #124]	; (402e00 <tcp_bind+0x98>)
  402d82:	f101 0710 	add.w	r7, r1, #16
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  402d86:	f851 3b04 	ldr.w	r3, [r1], #4
  402d8a:	681b      	ldr	r3, [r3, #0]
  402d8c:	b9eb      	cbnz	r3, 402dca <tcp_bind+0x62>
  for (i = 0; i < max_pcb_list; i++) {
  402d8e:	42b9      	cmp	r1, r7
  402d90:	d1f9      	bne.n	402d86 <tcp_bind+0x1e>
  if (!ip_addr_isany(ipaddr)) {
  402d92:	b116      	cbz	r6, 402d9a <tcp_bind+0x32>
  402d94:	6833      	ldr	r3, [r6, #0]
  402d96:	b103      	cbz	r3, 402d9a <tcp_bind+0x32>
    pcb->local_ip = *ipaddr;
  402d98:	602b      	str	r3, [r5, #0]
  pcb->local_port = port;
  402d9a:	836c      	strh	r4, [r5, #26]
  TCP_REG(&tcp_bound_pcbs, pcb);
  402d9c:	4b19      	ldr	r3, [pc, #100]	; (402e04 <tcp_bind+0x9c>)
  402d9e:	681a      	ldr	r2, [r3, #0]
  402da0:	60ea      	str	r2, [r5, #12]
  402da2:	601d      	str	r5, [r3, #0]
  402da4:	4b18      	ldr	r3, [pc, #96]	; (402e08 <tcp_bind+0xa0>)
  402da6:	4798      	blx	r3
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  402da8:	4621      	mov	r1, r4
  402daa:	4818      	ldr	r0, [pc, #96]	; (402e0c <tcp_bind+0xa4>)
  402dac:	4b18      	ldr	r3, [pc, #96]	; (402e10 <tcp_bind+0xa8>)
  402dae:	4798      	blx	r3
  return ERR_OK;
  402db0:	2000      	movs	r0, #0
  402db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
  402db4:	4b17      	ldr	r3, [pc, #92]	; (402e14 <tcp_bind+0xac>)
  402db6:	f240 12b7 	movw	r2, #439	; 0x1b7
  402dba:	4917      	ldr	r1, [pc, #92]	; (402e18 <tcp_bind+0xb0>)
  402dbc:	4817      	ldr	r0, [pc, #92]	; (402e1c <tcp_bind+0xb4>)
  402dbe:	4c14      	ldr	r4, [pc, #80]	; (402e10 <tcp_bind+0xa8>)
  402dc0:	47a0      	blx	r4
  402dc2:	e7fe      	b.n	402dc2 <tcp_bind+0x5a>
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  402dc4:	68db      	ldr	r3, [r3, #12]
  402dc6:	2b00      	cmp	r3, #0
  402dc8:	d0e1      	beq.n	402d8e <tcp_bind+0x26>
      if (cpcb->local_port == port) {
  402dca:	8b5a      	ldrh	r2, [r3, #26]
  402dcc:	42a2      	cmp	r2, r4
  402dce:	d1f9      	bne.n	402dc4 <tcp_bind+0x5c>
          if (ip_addr_isany(&(cpcb->local_ip)) ||
  402dd0:	b16b      	cbz	r3, 402dee <tcp_bind+0x86>
  402dd2:	6818      	ldr	r0, [r3, #0]
  402dd4:	b176      	cbz	r6, 402df4 <tcp_bind+0x8c>
  402dd6:	b168      	cbz	r0, 402df4 <tcp_bind+0x8c>
              ip_addr_isany(ipaddr) ||
  402dd8:	6832      	ldr	r2, [r6, #0]
  402dda:	4290      	cmp	r0, r2
  402ddc:	d001      	beq.n	402de2 <tcp_bind+0x7a>
  402dde:	2a00      	cmp	r2, #0
  402de0:	d1f0      	bne.n	402dc4 <tcp_bind+0x5c>
            return ERR_USE;
  402de2:	f06f 0007 	mvn.w	r0, #7
}
  402de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return ERR_BUF;
  402de8:	f06f 0001 	mvn.w	r0, #1
  402dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return ERR_USE;
  402dee:	f06f 0007 	mvn.w	r0, #7
  402df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402df4:	f06f 0007 	mvn.w	r0, #7
  402df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402dfa:	bf00      	nop
  402dfc:	00402d01 	.word	0x00402d01
  402e00:	0040ad08 	.word	0x0040ad08
  402e04:	204049dc 	.word	0x204049dc
  402e08:	00402255 	.word	0x00402255
  402e0c:	0040ab0c 	.word	0x0040ab0c
  402e10:	00407289 	.word	0x00407289
  402e14:	0040aaac 	.word	0x0040aaac
  402e18:	0040aae4 	.word	0x0040aae4
  402e1c:	0040a7c0 	.word	0x0040a7c0

00402e20 <tcp_listen_with_backlog>:
{
  402e20:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);
  402e22:	7e03      	ldrb	r3, [r0, #24]
  402e24:	bb53      	cbnz	r3, 402e7c <tcp_listen_with_backlog+0x5c>
  402e26:	4605      	mov	r5, r0
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
  402e28:	2003      	movs	r0, #3
  402e2a:	4b27      	ldr	r3, [pc, #156]	; (402ec8 <tcp_listen_with_backlog+0xa8>)
  402e2c:	4798      	blx	r3
  if (lpcb == NULL) {
  402e2e:	4604      	mov	r4, r0
  402e30:	2800      	cmp	r0, #0
  402e32:	d047      	beq.n	402ec4 <tcp_listen_with_backlog+0xa4>
  lpcb->callback_arg = pcb->callback_arg;
  402e34:	692b      	ldr	r3, [r5, #16]
  402e36:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
  402e38:	8b6b      	ldrh	r3, [r5, #26]
  402e3a:	8343      	strh	r3, [r0, #26]
  lpcb->state = LISTEN;
  402e3c:	2301      	movs	r3, #1
  402e3e:	7603      	strb	r3, [r0, #24]
  lpcb->prio = pcb->prio;
  402e40:	7e6b      	ldrb	r3, [r5, #25]
  402e42:	7643      	strb	r3, [r0, #25]
  ip_set_option(lpcb, SOF_ACCEPTCONN);
  402e44:	7a2b      	ldrb	r3, [r5, #8]
  402e46:	f043 0302 	orr.w	r3, r3, #2
  402e4a:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
  402e4c:	7aab      	ldrb	r3, [r5, #10]
  402e4e:	7283      	strb	r3, [r0, #10]
  lpcb->tos = pcb->tos;
  402e50:	7a6b      	ldrb	r3, [r5, #9]
  402e52:	7243      	strb	r3, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
  402e54:	682b      	ldr	r3, [r5, #0]
  402e56:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
  402e58:	8b6b      	ldrh	r3, [r5, #26]
  402e5a:	b1e3      	cbz	r3, 402e96 <tcp_listen_with_backlog+0x76>
    TCP_RMV(&tcp_bound_pcbs, pcb);
  402e5c:	4b1b      	ldr	r3, [pc, #108]	; (402ecc <tcp_listen_with_backlog+0xac>)
  402e5e:	681b      	ldr	r3, [r3, #0]
  402e60:	429d      	cmp	r5, r3
  402e62:	d013      	beq.n	402e8c <tcp_listen_with_backlog+0x6c>
  402e64:	4a1a      	ldr	r2, [pc, #104]	; (402ed0 <tcp_listen_with_backlog+0xb0>)
  402e66:	6013      	str	r3, [r2, #0]
  402e68:	b19b      	cbz	r3, 402e92 <tcp_listen_with_backlog+0x72>
  402e6a:	68da      	ldr	r2, [r3, #12]
  402e6c:	4295      	cmp	r5, r2
  402e6e:	d023      	beq.n	402eb8 <tcp_listen_with_backlog+0x98>
  402e70:	b32a      	cbz	r2, 402ebe <tcp_listen_with_backlog+0x9e>
  402e72:	68d3      	ldr	r3, [r2, #12]
  402e74:	429d      	cmp	r5, r3
  402e76:	d01c      	beq.n	402eb2 <tcp_listen_with_backlog+0x92>
  402e78:	461a      	mov	r2, r3
  402e7a:	e7f9      	b.n	402e70 <tcp_listen_with_backlog+0x50>
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);
  402e7c:	4b15      	ldr	r3, [pc, #84]	; (402ed4 <tcp_listen_with_backlog+0xb4>)
  402e7e:	f44f 7203 	mov.w	r2, #524	; 0x20c
  402e82:	4915      	ldr	r1, [pc, #84]	; (402ed8 <tcp_listen_with_backlog+0xb8>)
  402e84:	4815      	ldr	r0, [pc, #84]	; (402edc <tcp_listen_with_backlog+0xbc>)
  402e86:	4c16      	ldr	r4, [pc, #88]	; (402ee0 <tcp_listen_with_backlog+0xc0>)
  402e88:	47a0      	blx	r4
  402e8a:	e7fe      	b.n	402e8a <tcp_listen_with_backlog+0x6a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
  402e8c:	68da      	ldr	r2, [r3, #12]
  402e8e:	4b0f      	ldr	r3, [pc, #60]	; (402ecc <tcp_listen_with_backlog+0xac>)
  402e90:	601a      	str	r2, [r3, #0]
  402e92:	2300      	movs	r3, #0
  402e94:	60eb      	str	r3, [r5, #12]
  memp_free(MEMP_TCP_PCB, pcb);
  402e96:	4629      	mov	r1, r5
  402e98:	2002      	movs	r0, #2
  402e9a:	4b12      	ldr	r3, [pc, #72]	; (402ee4 <tcp_listen_with_backlog+0xc4>)
  402e9c:	4798      	blx	r3
  lpcb->accept = tcp_accept_null;
  402e9e:	4b12      	ldr	r3, [pc, #72]	; (402ee8 <tcp_listen_with_backlog+0xc8>)
  402ea0:	6163      	str	r3, [r4, #20]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
  402ea2:	4b12      	ldr	r3, [pc, #72]	; (402eec <tcp_listen_with_backlog+0xcc>)
  402ea4:	681a      	ldr	r2, [r3, #0]
  402ea6:	60e2      	str	r2, [r4, #12]
  402ea8:	601c      	str	r4, [r3, #0]
  402eaa:	4b11      	ldr	r3, [pc, #68]	; (402ef0 <tcp_listen_with_backlog+0xd0>)
  402eac:	4798      	blx	r3
  return (struct tcp_pcb *)lpcb;
  402eae:	4620      	mov	r0, r4
  402eb0:	bd38      	pop	{r3, r4, r5, pc}
  402eb2:	4b07      	ldr	r3, [pc, #28]	; (402ed0 <tcp_listen_with_backlog+0xb0>)
  402eb4:	601a      	str	r2, [r3, #0]
    TCP_RMV(&tcp_bound_pcbs, pcb);
  402eb6:	4613      	mov	r3, r2
  402eb8:	68ea      	ldr	r2, [r5, #12]
  402eba:	60da      	str	r2, [r3, #12]
  402ebc:	e7e9      	b.n	402e92 <tcp_listen_with_backlog+0x72>
  402ebe:	4b04      	ldr	r3, [pc, #16]	; (402ed0 <tcp_listen_with_backlog+0xb0>)
  402ec0:	601a      	str	r2, [r3, #0]
  402ec2:	e7e6      	b.n	402e92 <tcp_listen_with_backlog+0x72>
    return NULL;
  402ec4:	2000      	movs	r0, #0
}
  402ec6:	bd38      	pop	{r3, r4, r5, pc}
  402ec8:	00402649 	.word	0x00402649
  402ecc:	204049dc 	.word	0x204049dc
  402ed0:	204049d8 	.word	0x204049d8
  402ed4:	0040aaac 	.word	0x0040aaac
  402ed8:	0040ace4 	.word	0x0040ace4
  402edc:	0040a7c0 	.word	0x0040a7c0
  402ee0:	00407289 	.word	0x00407289
  402ee4:	00402689 	.word	0x00402689
  402ee8:	00402cf9 	.word	0x00402cf9
  402eec:	204049d4 	.word	0x204049d4
  402ef0:	00402255 	.word	0x00402255

00402ef4 <tcp_update_rcv_ann_wnd>:
{
  402ef4:	b470      	push	{r4, r5, r6}
  402ef6:	4602      	mov	r2, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  402ef8:	6a85      	ldr	r5, [r0, #40]	; 0x28
  402efa:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  402efc:	6b01      	ldr	r1, [r0, #48]	; 0x30
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  402efe:	1963      	adds	r3, r4, r5
  402f00:	1a58      	subs	r0, r3, r1
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  402f02:	8ed3      	ldrh	r3, [r2, #54]	; 0x36
  402f04:	f240 56b4 	movw	r6, #1460	; 0x5b4
  402f08:	42b3      	cmp	r3, r6
  402f0a:	bf94      	ite	ls
  402f0c:	1ac3      	subls	r3, r0, r3
  402f0e:	1b83      	subhi	r3, r0, r6
  402f10:	2b00      	cmp	r3, #0
  402f12:	db02      	blt.n	402f1a <tcp_update_rcv_ann_wnd+0x26>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
  402f14:	85d4      	strh	r4, [r2, #46]	; 0x2e
}
  402f16:	bc70      	pop	{r4, r5, r6}
  402f18:	4770      	bx	lr
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
  402f1a:	1a6b      	subs	r3, r5, r1
  402f1c:	2b00      	cmp	r3, #0
  402f1e:	dd03      	ble.n	402f28 <tcp_update_rcv_ann_wnd+0x34>
      pcb->rcv_ann_wnd = 0;
  402f20:	2300      	movs	r3, #0
  402f22:	85d3      	strh	r3, [r2, #46]	; 0x2e
    return 0;
  402f24:	4618      	mov	r0, r3
  402f26:	e7f6      	b.n	402f16 <tcp_update_rcv_ann_wnd+0x22>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
  402f28:	1b49      	subs	r1, r1, r5
      pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
  402f2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    return 0;
  402f2c:	2000      	movs	r0, #0
  402f2e:	e7f2      	b.n	402f16 <tcp_update_rcv_ann_wnd+0x22>

00402f30 <tcp_recved>:
{
  402f30:	b538      	push	{r3, r4, r5, lr}
  402f32:	4604      	mov	r4, r0
  402f34:	460d      	mov	r5, r1
  pcb->rcv_wnd += len;
  402f36:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  402f38:	440b      	add	r3, r1
  402f3a:	b29b      	uxth	r3, r3
  if (pcb->rcv_wnd > TCP_WND) {
  402f3c:	f640 3268 	movw	r2, #2920	; 0xb68
  402f40:	4293      	cmp	r3, r2
    pcb->rcv_wnd = TCP_WND;
  402f42:	bf88      	it	hi
  402f44:	f640 3368 	movwhi	r3, #2920	; 0xb68
  402f48:	8583      	strh	r3, [r0, #44]	; 0x2c
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
  402f4a:	4b0b      	ldr	r3, [pc, #44]	; (402f78 <tcp_recved+0x48>)
  402f4c:	4798      	blx	r3
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
  402f4e:	f240 23d9 	movw	r3, #729	; 0x2d9
  402f52:	4298      	cmp	r0, r3
  402f54:	dc08      	bgt.n	402f68 <tcp_recved+0x38>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: recveived %"U16_F" bytes, wnd %"U16_F" (%"U16_F").\n",
  402f56:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
  402f58:	f640 3368 	movw	r3, #2920	; 0xb68
  402f5c:	1a9b      	subs	r3, r3, r2
  402f5e:	4629      	mov	r1, r5
  402f60:	4806      	ldr	r0, [pc, #24]	; (402f7c <tcp_recved+0x4c>)
  402f62:	4c07      	ldr	r4, [pc, #28]	; (402f80 <tcp_recved+0x50>)
  402f64:	47a0      	blx	r4
  402f66:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
  402f68:	7fa3      	ldrb	r3, [r4, #30]
  402f6a:	f043 0302 	orr.w	r3, r3, #2
  402f6e:	77a3      	strb	r3, [r4, #30]
    tcp_output(pcb);
  402f70:	4620      	mov	r0, r4
  402f72:	4b04      	ldr	r3, [pc, #16]	; (402f84 <tcp_recved+0x54>)
  402f74:	4798      	blx	r3
  402f76:	e7ee      	b.n	402f56 <tcp_recved+0x26>
  402f78:	00402ef5 	.word	0x00402ef5
  402f7c:	0040add0 	.word	0x0040add0
  402f80:	00407289 	.word	0x00407289
  402f84:	0040576d 	.word	0x0040576d

00402f88 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
  402f88:	b160      	cbz	r0, 402fa4 <tcp_seg_free+0x1c>
{
  402f8a:	b510      	push	{r4, lr}
  402f8c:	4604      	mov	r4, r0
    if (seg->p != NULL) {
  402f8e:	6840      	ldr	r0, [r0, #4]
  402f90:	b118      	cbz	r0, 402f9a <tcp_seg_free+0x12>
      pbuf_free(seg->p);
  402f92:	4b05      	ldr	r3, [pc, #20]	; (402fa8 <tcp_seg_free+0x20>)
  402f94:	4798      	blx	r3
#if TCP_DEBUG
      seg->p = NULL;
  402f96:	2300      	movs	r3, #0
  402f98:	6063      	str	r3, [r4, #4]
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
  402f9a:	4621      	mov	r1, r4
  402f9c:	2004      	movs	r0, #4
  402f9e:	4b03      	ldr	r3, [pc, #12]	; (402fac <tcp_seg_free+0x24>)
  402fa0:	4798      	blx	r3
  402fa2:	bd10      	pop	{r4, pc}
  402fa4:	4770      	bx	lr
  402fa6:	bf00      	nop
  402fa8:	00402861 	.word	0x00402861
  402fac:	00402689 	.word	0x00402689

00402fb0 <tcp_segs_free>:
  while (seg != NULL) {
  402fb0:	b148      	cbz	r0, 402fc6 <tcp_segs_free+0x16>
{
  402fb2:	b538      	push	{r3, r4, r5, lr}
  402fb4:	4603      	mov	r3, r0
    tcp_seg_free(seg);
  402fb6:	4d04      	ldr	r5, [pc, #16]	; (402fc8 <tcp_segs_free+0x18>)
    struct tcp_seg *next = seg->next;
  402fb8:	681c      	ldr	r4, [r3, #0]
    tcp_seg_free(seg);
  402fba:	4618      	mov	r0, r3
  402fbc:	47a8      	blx	r5
    seg = next;
  402fbe:	4623      	mov	r3, r4
  while (seg != NULL) {
  402fc0:	2c00      	cmp	r4, #0
  402fc2:	d1f9      	bne.n	402fb8 <tcp_segs_free+0x8>
  402fc4:	bd38      	pop	{r3, r4, r5, pc}
  402fc6:	4770      	bx	lr
  402fc8:	00402f89 	.word	0x00402f89

00402fcc <tcp_setprio>:
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  pcb->prio = prio;
  402fcc:	7641      	strb	r1, [r0, #25]
  402fce:	4770      	bx	lr

00402fd0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */ 
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
  402fd0:	b538      	push	{r3, r4, r5, lr}
  402fd2:	4605      	mov	r5, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
  402fd4:	2004      	movs	r0, #4
  402fd6:	4b09      	ldr	r3, [pc, #36]	; (402ffc <tcp_seg_copy+0x2c>)
  402fd8:	4798      	blx	r3
  if (cseg == NULL) {
  402fda:	4604      	mov	r4, r0
  402fdc:	b160      	cbz	r0, 402ff8 <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg)); 
  402fde:	682b      	ldr	r3, [r5, #0]
  402fe0:	6868      	ldr	r0, [r5, #4]
  402fe2:	68a9      	ldr	r1, [r5, #8]
  402fe4:	68ea      	ldr	r2, [r5, #12]
  402fe6:	6023      	str	r3, [r4, #0]
  402fe8:	6060      	str	r0, [r4, #4]
  402fea:	60a1      	str	r1, [r4, #8]
  402fec:	60e2      	str	r2, [r4, #12]
  402fee:	692b      	ldr	r3, [r5, #16]
  402ff0:	6123      	str	r3, [r4, #16]
  pbuf_ref(cseg->p);
  402ff2:	6860      	ldr	r0, [r4, #4]
  402ff4:	4b02      	ldr	r3, [pc, #8]	; (403000 <tcp_seg_copy+0x30>)
  402ff6:	4798      	blx	r3
  return cseg;
}
  402ff8:	4620      	mov	r0, r4
  402ffa:	bd38      	pop	{r3, r4, r5, pc}
  402ffc:	00402649 	.word	0x00402649
  403000:	00402a77 	.word	0x00402a77

00403004 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->callback_arg = arg;
  403004:	6101      	str	r1, [r0, #16]
  403006:	4770      	bx	lr

00403008 <tcp_recv>:
 */ 
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  pcb->recv = recv;
  403008:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  40300c:	4770      	bx	lr

0040300e <tcp_sent>:
 */ 
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  pcb->sent = sent;
  40300e:	67c1      	str	r1, [r0, #124]	; 0x7c
  403010:	4770      	bx	lr

00403012 <tcp_err>:
 */ 
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  pcb->errf = err;
  403012:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  403016:	4770      	bx	lr

00403018 <tcp_accept>:
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->accept = accept;
  403018:	6141      	str	r1, [r0, #20]
  40301a:	4770      	bx	lr

0040301c <tcp_poll>:
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
#if LWIP_CALLBACK_API
  pcb->poll = poll;
  40301c:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */  
  pcb->pollinterval = interval;
  403020:	f880 2020 	strb.w	r2, [r0, #32]
  403024:	4770      	bx	lr
	...

00403028 <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
  403028:	7e03      	ldrb	r3, [r0, #24]
     pcb->state != TIME_WAIT &&
  40302a:	2b0a      	cmp	r3, #10
  40302c:	d030      	beq.n	403090 <tcp_pcb_purge+0x68>
  40302e:	2b01      	cmp	r3, #1
  403030:	d92e      	bls.n	403090 <tcp_pcb_purge+0x68>
{
  403032:	b570      	push	{r4, r5, r6, lr}
  403034:	4604      	mov	r4, r0
     pcb->state != LISTEN) {

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));
  403036:	4817      	ldr	r0, [pc, #92]	; (403094 <tcp_pcb_purge+0x6c>)
  403038:	4b17      	ldr	r3, [pc, #92]	; (403098 <tcp_pcb_purge+0x70>)
  40303a:	4798      	blx	r3
      }
    }
#endif /* TCP_LISTEN_BACKLOG */


    if (pcb->refused_data != NULL) {
  40303c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  40303e:	b13b      	cbz	r3, 403050 <tcp_pcb_purge+0x28>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
  403040:	4816      	ldr	r0, [pc, #88]	; (40309c <tcp_pcb_purge+0x74>)
  403042:	4b15      	ldr	r3, [pc, #84]	; (403098 <tcp_pcb_purge+0x70>)
  403044:	4798      	blx	r3
      pbuf_free(pcb->refused_data);
  403046:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  403048:	4b15      	ldr	r3, [pc, #84]	; (4030a0 <tcp_pcb_purge+0x78>)
  40304a:	4798      	blx	r3
      pcb->refused_data = NULL;
  40304c:	2300      	movs	r3, #0
  40304e:	67a3      	str	r3, [r4, #120]	; 0x78
    }
    if (pcb->unsent != NULL) {
  403050:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  403052:	b113      	cbz	r3, 40305a <tcp_pcb_purge+0x32>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: not all data sent\n"));
  403054:	4813      	ldr	r0, [pc, #76]	; (4030a4 <tcp_pcb_purge+0x7c>)
  403056:	4b10      	ldr	r3, [pc, #64]	; (403098 <tcp_pcb_purge+0x70>)
  403058:	4798      	blx	r3
    }
    if (pcb->unacked != NULL) {
  40305a:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40305c:	b113      	cbz	r3, 403064 <tcp_pcb_purge+0x3c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
  40305e:	4812      	ldr	r0, [pc, #72]	; (4030a8 <tcp_pcb_purge+0x80>)
  403060:	4b0d      	ldr	r3, [pc, #52]	; (403098 <tcp_pcb_purge+0x70>)
  403062:	4798      	blx	r3
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
  403064:	6f63      	ldr	r3, [r4, #116]	; 0x74
  403066:	b113      	cbz	r3, 40306e <tcp_pcb_purge+0x46>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
  403068:	4810      	ldr	r0, [pc, #64]	; (4030ac <tcp_pcb_purge+0x84>)
  40306a:	4b0b      	ldr	r3, [pc, #44]	; (403098 <tcp_pcb_purge+0x70>)
  40306c:	4798      	blx	r3
    }
    tcp_segs_free(pcb->ooseq);
  40306e:	6f60      	ldr	r0, [r4, #116]	; 0x74
  403070:	4e0f      	ldr	r6, [pc, #60]	; (4030b0 <tcp_pcb_purge+0x88>)
  403072:	47b0      	blx	r6
    pcb->ooseq = NULL;
  403074:	2500      	movs	r5, #0
  403076:	6765      	str	r5, [r4, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
  403078:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40307c:	86a3      	strh	r3, [r4, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
  40307e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  403080:	47b0      	blx	r6
    tcp_segs_free(pcb->unacked);
  403082:	6f20      	ldr	r0, [r4, #112]	; 0x70
  403084:	47b0      	blx	r6
    pcb->unacked = pcb->unsent = NULL;
  403086:	66e5      	str	r5, [r4, #108]	; 0x6c
  403088:	6725      	str	r5, [r4, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
  40308a:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  40308e:	bd70      	pop	{r4, r5, r6, pc}
  403090:	4770      	bx	lr
  403092:	bf00      	nop
  403094:	0040ad18 	.word	0x0040ad18
  403098:	00407289 	.word	0x00407289
  40309c:	0040ad28 	.word	0x0040ad28
  4030a0:	00402861 	.word	0x00402861
  4030a4:	0040ad54 	.word	0x0040ad54
  4030a8:	0040ad78 	.word	0x0040ad78
  4030ac:	0040ada0 	.word	0x0040ada0
  4030b0:	00402fb1 	.word	0x00402fb1

004030b4 <tcp_slowtmr>:
{
  4030b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4030b8:	b083      	sub	sp, #12
  ++tcp_ticks;
  4030ba:	4ab1      	ldr	r2, [pc, #708]	; (403380 <tcp_slowtmr+0x2cc>)
  4030bc:	6813      	ldr	r3, [r2, #0]
  4030be:	3301      	adds	r3, #1
  4030c0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
  4030c2:	4ab0      	ldr	r2, [pc, #704]	; (403384 <tcp_slowtmr+0x2d0>)
  4030c4:	7813      	ldrb	r3, [r2, #0]
  4030c6:	3301      	adds	r3, #1
  4030c8:	7013      	strb	r3, [r2, #0]
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
  4030ca:	4daf      	ldr	r5, [pc, #700]	; (403388 <tcp_slowtmr+0x2d4>)
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  4030cc:	f8df b310 	ldr.w	fp, [pc, #784]	; 4033e0 <tcp_slowtmr+0x32c>
  pcb = tcp_active_pcbs;
  4030d0:	4bae      	ldr	r3, [pc, #696]	; (40338c <tcp_slowtmr+0x2d8>)
  4030d2:	681c      	ldr	r4, [r3, #0]
  if (pcb == NULL) {
  4030d4:	b10c      	cbz	r4, 4030da <tcp_slowtmr+0x26>
  4030d6:	2700      	movs	r7, #0
  4030d8:	e0c6      	b.n	403268 <tcp_slowtmr+0x1b4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  4030da:	48ad      	ldr	r0, [pc, #692]	; (403390 <tcp_slowtmr+0x2dc>)
  4030dc:	4baa      	ldr	r3, [pc, #680]	; (403388 <tcp_slowtmr+0x2d4>)
  4030de:	4798      	blx	r3
  pcb = tcp_tw_pcbs;
  4030e0:	4bac      	ldr	r3, [pc, #688]	; (403394 <tcp_slowtmr+0x2e0>)
  4030e2:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
  4030e4:	2c00      	cmp	r4, #0
  4030e6:	f000 81c1 	beq.w	40346c <tcp_slowtmr+0x3b8>
  4030ea:	2500      	movs	r5, #0
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  4030ec:	4ea4      	ldr	r6, [pc, #656]	; (403380 <tcp_slowtmr+0x2cc>)
      tcp_pcb_purge(pcb);
  4030ee:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 4033d8 <tcp_slowtmr+0x324>
      memp_free(MEMP_TCP_PCB, pcb2);
  4030f2:	4fa9      	ldr	r7, [pc, #676]	; (403398 <tcp_slowtmr+0x2e4>)
  4030f4:	e1a5      	b.n	403442 <tcp_slowtmr+0x38e>
      pcb = pcb->next;
  4030f6:	68e4      	ldr	r4, [r4, #12]
      continue;
  4030f8:	e0b3      	b.n	403262 <tcp_slowtmr+0x1ae>
    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
  4030fa:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
  4030fe:	2a06      	cmp	r2, #6
  403100:	f040 80c1 	bne.w	403286 <tcp_slowtmr+0x1d2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
  403104:	48a5      	ldr	r0, [pc, #660]	; (40339c <tcp_slowtmr+0x2e8>)
  403106:	47a8      	blx	r5
      ++pcb_remove;
  403108:	2601      	movs	r6, #1
  40310a:	e0e0      	b.n	4032ce <tcp_slowtmr+0x21a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
  40310c:	48a4      	ldr	r0, [pc, #656]	; (4033a0 <tcp_slowtmr+0x2ec>)
  40310e:	47a8      	blx	r5
      ++pcb_remove;
  403110:	2601      	movs	r6, #1
  403112:	e0dc      	b.n	4032ce <tcp_slowtmr+0x21a>
        if(pcb->rtime >= 0) {
  403114:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
  403118:	2900      	cmp	r1, #0
  40311a:	db01      	blt.n	403120 <tcp_slowtmr+0x6c>
          ++pcb->rtime;
  40311c:	3101      	adds	r1, #1
  40311e:	86a1      	strh	r1, [r4, #52]	; 0x34
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
  403120:	6f21      	ldr	r1, [r4, #112]	; 0x70
  403122:	2900      	cmp	r1, #0
  403124:	f000 80d3 	beq.w	4032ce <tcp_slowtmr+0x21a>
  403128:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
  40312c:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
  403130:	4288      	cmp	r0, r1
  403132:	f2c0 80cc 	blt.w	4032ce <tcp_slowtmr+0x21a>
          if (pcb->state != SYN_SENT) {
  403136:	2b02      	cmp	r3, #2
  403138:	d00a      	beq.n	403150 <tcp_slowtmr+0x9c>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
  40313a:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
  40313e:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
  403142:	eb03 03e1 	add.w	r3, r3, r1, asr #3
  403146:	4997      	ldr	r1, [pc, #604]	; (4033a4 <tcp_slowtmr+0x2f0>)
  403148:	5c8a      	ldrb	r2, [r1, r2]
  40314a:	4093      	lsls	r3, r2
  40314c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
          pcb->rtime = 0;
  403150:	2300      	movs	r3, #0
  403152:	86a3      	strh	r3, [r4, #52]	; 0x34
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
  403154:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
  403158:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
          pcb->ssthresh = eff_wnd >> 1;
  40315c:	4293      	cmp	r3, r2
  40315e:	bf28      	it	cs
  403160:	4613      	movcs	r3, r2
  403162:	085b      	lsrs	r3, r3, #1
  403164:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
          if (pcb->ssthresh < (pcb->mss << 1)) {
  403168:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
  40316a:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
  40316e:	da02      	bge.n	403176 <tcp_slowtmr+0xc2>
            pcb->ssthresh = (pcb->mss << 1);
  403170:	0053      	lsls	r3, r2, #1
  403172:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
          pcb->cwnd = pcb->mss;
  403176:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
          tcp_rexmit_rto(pcb);
  40317a:	4620      	mov	r0, r4
  40317c:	4b8a      	ldr	r3, [pc, #552]	; (4033a8 <tcp_slowtmr+0x2f4>)
  40317e:	4798      	blx	r3
  403180:	e0a5      	b.n	4032ce <tcp_slowtmr+0x21a>
    pcb_remove = 0;
  403182:	2600      	movs	r6, #0
  403184:	e0a3      	b.n	4032ce <tcp_slowtmr+0x21a>
      if (pcb->flags & TF_RXCLOSED) {
  403186:	7fa3      	ldrb	r3, [r4, #30]
  403188:	f013 0f10 	tst.w	r3, #16
  40318c:	d005      	beq.n	40319a <tcp_slowtmr+0xe6>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
  40318e:	4b7c      	ldr	r3, [pc, #496]	; (403380 <tcp_slowtmr+0x2cc>)
  403190:	681b      	ldr	r3, [r3, #0]
  403192:	6a62      	ldr	r2, [r4, #36]	; 0x24
  403194:	1a9b      	subs	r3, r3, r2
  403196:	2b28      	cmp	r3, #40	; 0x28
  403198:	d806      	bhi.n	4031a8 <tcp_slowtmr+0xf4>
    if (pcb->ooseq != NULL &&
  40319a:	6f60      	ldr	r0, [r4, #116]	; 0x74
  40319c:	2800      	cmp	r0, #0
  40319e:	f000 8162 	beq.w	403466 <tcp_slowtmr+0x3b2>
  4031a2:	f04f 0900 	mov.w	r9, #0
  4031a6:	e03d      	b.n	403224 <tcp_slowtmr+0x170>
          ++pcb_remove;
  4031a8:	f106 0801 	add.w	r8, r6, #1
  4031ac:	fa5f f688 	uxtb.w	r6, r8
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in FIN-WAIT-2\n"));
  4031b0:	487e      	ldr	r0, [pc, #504]	; (4033ac <tcp_slowtmr+0x2f8>)
  4031b2:	47a8      	blx	r5
  4031b4:	e08f      	b.n	4032d6 <tcp_slowtmr+0x222>
      if((u32_t)(tcp_ticks - pcb->tmr) >
  4031b6:	4b72      	ldr	r3, [pc, #456]	; (403380 <tcp_slowtmr+0x2cc>)
  4031b8:	681a      	ldr	r2, [r3, #0]
  4031ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4031bc:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  4031be:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
  4031c2:	4b7b      	ldr	r3, [pc, #492]	; (4033b0 <tcp_slowtmr+0x2fc>)
  4031c4:	440b      	add	r3, r1
  4031c6:	fbab 0303 	umull	r0, r3, fp, r3
      if((u32_t)(tcp_ticks - pcb->tmr) >
  4031ca:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
  4031ce:	d80c      	bhi.n	4031ea <tcp_slowtmr+0x136>
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
  4031d0:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
  4031d4:	4877      	ldr	r0, [pc, #476]	; (4033b4 <tcp_slowtmr+0x300>)
  4031d6:	fb00 1303 	mla	r3, r0, r3, r1
              / TCP_SLOW_INTERVAL)
  4031da:	fbab 1303 	umull	r1, r3, fp, r3
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
  4031de:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
  4031e2:	d810      	bhi.n	403206 <tcp_slowtmr+0x152>
    pcb_reset = 0;
  4031e4:	f04f 0900 	mov.w	r9, #0
  4031e8:	e01a      	b.n	403220 <tcp_slowtmr+0x16c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to %"U16_F".%"U16_F".%"U16_F".%"U16_F".\n",
  4031ea:	79a3      	ldrb	r3, [r4, #6]
  4031ec:	7962      	ldrb	r2, [r4, #5]
  4031ee:	7921      	ldrb	r1, [r4, #4]
  4031f0:	79e0      	ldrb	r0, [r4, #7]
  4031f2:	9000      	str	r0, [sp, #0]
  4031f4:	4870      	ldr	r0, [pc, #448]	; (4033b8 <tcp_slowtmr+0x304>)
  4031f6:	47a8      	blx	r5
        ++pcb_remove;
  4031f8:	f106 0801 	add.w	r8, r6, #1
  4031fc:	fa5f f688 	uxtb.w	r6, r8
        ++pcb_reset;
  403200:	f04f 0901 	mov.w	r9, #1
  403204:	e00c      	b.n	403220 <tcp_slowtmr+0x16c>
        tcp_keepalive(pcb);
  403206:	4620      	mov	r0, r4
  403208:	4b6c      	ldr	r3, [pc, #432]	; (4033bc <tcp_slowtmr+0x308>)
  40320a:	4798      	blx	r3
        pcb->keep_cnt_sent++;
  40320c:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
  403210:	3301      	adds	r3, #1
  403212:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
  403216:	f04f 0900 	mov.w	r9, #0
  40321a:	e001      	b.n	403220 <tcp_slowtmr+0x16c>
  40321c:	f04f 0900 	mov.w	r9, #0
    if (pcb->ooseq != NULL &&
  403220:	6f60      	ldr	r0, [r4, #116]	; 0x74
  403222:	b150      	cbz	r0, 40323a <tcp_slowtmr+0x186>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
  403224:	4b56      	ldr	r3, [pc, #344]	; (403380 <tcp_slowtmr+0x2cc>)
  403226:	681a      	ldr	r2, [r3, #0]
  403228:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40322a:	1ad2      	subs	r2, r2, r3
  40322c:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
  403230:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
  403234:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
  403238:	d25b      	bcs.n	4032f2 <tcp_slowtmr+0x23e>
    if (pcb->state == SYN_RCVD) {
  40323a:	7e23      	ldrb	r3, [r4, #24]
  40323c:	2b03      	cmp	r3, #3
  40323e:	d05d      	beq.n	4032fc <tcp_slowtmr+0x248>
    if (pcb->state == LAST_ACK) {
  403240:	7e23      	ldrb	r3, [r4, #24]
  403242:	2b09      	cmp	r3, #9
  403244:	d067      	beq.n	403316 <tcp_slowtmr+0x262>
    if (pcb_remove) {
  403246:	2e00      	cmp	r6, #0
  403248:	d172      	bne.n	403330 <tcp_slowtmr+0x27c>
      pcb = pcb->next;
  40324a:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
  40324c:	7fe3      	ldrb	r3, [r4, #31]
  40324e:	3301      	adds	r3, #1
  403250:	b2db      	uxtb	r3, r3
  403252:	77e3      	strb	r3, [r4, #31]
      if (prev->polltmr >= prev->pollinterval) {
  403254:	f894 2020 	ldrb.w	r2, [r4, #32]
  403258:	429a      	cmp	r2, r3
  40325a:	f240 80ce 	bls.w	4033fa <tcp_slowtmr+0x346>
  40325e:	4627      	mov	r7, r4
      pcb = pcb->next;
  403260:	4634      	mov	r4, r6
  while (pcb != NULL) {
  403262:	2c00      	cmp	r4, #0
  403264:	f43f af3c 	beq.w	4030e0 <tcp_slowtmr+0x2c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
  403268:	4855      	ldr	r0, [pc, #340]	; (4033c0 <tcp_slowtmr+0x30c>)
  40326a:	47a8      	blx	r5
    if (pcb->last_timer == tcp_timer_ctr) {
  40326c:	4b45      	ldr	r3, [pc, #276]	; (403384 <tcp_slowtmr+0x2d0>)
  40326e:	781b      	ldrb	r3, [r3, #0]
  403270:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
  403274:	429a      	cmp	r2, r3
  403276:	f43f af3e 	beq.w	4030f6 <tcp_slowtmr+0x42>
    pcb->last_timer = tcp_timer_ctr;
  40327a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
  40327e:	7e23      	ldrb	r3, [r4, #24]
  403280:	2b02      	cmp	r3, #2
  403282:	f43f af3a 	beq.w	4030fa <tcp_slowtmr+0x46>
    else if (pcb->nrtx == TCP_MAXRTX) {
  403286:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
  40328a:	2a0c      	cmp	r2, #12
  40328c:	f43f af3e 	beq.w	40310c <tcp_slowtmr+0x58>
      if (pcb->persist_backoff > 0) {
  403290:	f894 6095 	ldrb.w	r6, [r4, #149]	; 0x95
  403294:	2e00      	cmp	r6, #0
  403296:	f43f af3d 	beq.w	403114 <tcp_slowtmr+0x60>
        pcb->persist_cnt++;
  40329a:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
  40329e:	3301      	adds	r3, #1
  4032a0:	b2db      	uxtb	r3, r3
  4032a2:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
  4032a6:	4a47      	ldr	r2, [pc, #284]	; (4033c4 <tcp_slowtmr+0x310>)
  4032a8:	4432      	add	r2, r6
  4032aa:	f812 2c01 	ldrb.w	r2, [r2, #-1]
  4032ae:	429a      	cmp	r2, r3
  4032b0:	f63f af67 	bhi.w	403182 <tcp_slowtmr+0xce>
          pcb->persist_cnt = 0;
  4032b4:	2300      	movs	r3, #0
  4032b6:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
  4032ba:	2e06      	cmp	r6, #6
  4032bc:	d803      	bhi.n	4032c6 <tcp_slowtmr+0x212>
            pcb->persist_backoff++;
  4032be:	f106 0801 	add.w	r8, r6, #1
  4032c2:	f884 8095 	strb.w	r8, [r4, #149]	; 0x95
          tcp_zero_window_probe(pcb);
  4032c6:	4620      	mov	r0, r4
  4032c8:	4b3f      	ldr	r3, [pc, #252]	; (4033c8 <tcp_slowtmr+0x314>)
  4032ca:	4798      	blx	r3
    pcb_remove = 0;
  4032cc:	2600      	movs	r6, #0
    if (pcb->state == FIN_WAIT_2) {
  4032ce:	7e23      	ldrb	r3, [r4, #24]
  4032d0:	2b06      	cmp	r3, #6
  4032d2:	f43f af58 	beq.w	403186 <tcp_slowtmr+0xd2>
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
  4032d6:	7a23      	ldrb	r3, [r4, #8]
  4032d8:	f013 0f08 	tst.w	r3, #8
  4032dc:	d09e      	beq.n	40321c <tcp_slowtmr+0x168>
       ((pcb->state == ESTABLISHED) ||
  4032de:	7e23      	ldrb	r3, [r4, #24]
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
  4032e0:	2b04      	cmp	r3, #4
  4032e2:	f43f af68 	beq.w	4031b6 <tcp_slowtmr+0x102>
  4032e6:	2b07      	cmp	r3, #7
  4032e8:	f43f af65 	beq.w	4031b6 <tcp_slowtmr+0x102>
    pcb_reset = 0;
  4032ec:	f04f 0900 	mov.w	r9, #0
  4032f0:	e796      	b.n	403220 <tcp_slowtmr+0x16c>
      tcp_segs_free(pcb->ooseq);
  4032f2:	4b36      	ldr	r3, [pc, #216]	; (4033cc <tcp_slowtmr+0x318>)
  4032f4:	4798      	blx	r3
      pcb->ooseq = NULL;
  4032f6:	2300      	movs	r3, #0
  4032f8:	6763      	str	r3, [r4, #116]	; 0x74
  4032fa:	e79e      	b.n	40323a <tcp_slowtmr+0x186>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  4032fc:	4b20      	ldr	r3, [pc, #128]	; (403380 <tcp_slowtmr+0x2cc>)
  4032fe:	681b      	ldr	r3, [r3, #0]
  403300:	6a62      	ldr	r2, [r4, #36]	; 0x24
  403302:	1a9b      	subs	r3, r3, r2
  403304:	2b28      	cmp	r3, #40	; 0x28
  403306:	d99e      	bls.n	403246 <tcp_slowtmr+0x192>
        ++pcb_remove;
  403308:	f106 0801 	add.w	r8, r6, #1
  40330c:	fa5f f688 	uxtb.w	r6, r8
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
  403310:	482f      	ldr	r0, [pc, #188]	; (4033d0 <tcp_slowtmr+0x31c>)
  403312:	47a8      	blx	r5
  403314:	e794      	b.n	403240 <tcp_slowtmr+0x18c>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  403316:	4b1a      	ldr	r3, [pc, #104]	; (403380 <tcp_slowtmr+0x2cc>)
  403318:	681b      	ldr	r3, [r3, #0]
  40331a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40331c:	1a9b      	subs	r3, r3, r2
  40331e:	2bf0      	cmp	r3, #240	; 0xf0
  403320:	d991      	bls.n	403246 <tcp_slowtmr+0x192>
        ++pcb_remove;
  403322:	f106 0801 	add.w	r8, r6, #1
  403326:	fa5f f688 	uxtb.w	r6, r8
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
  40332a:	482a      	ldr	r0, [pc, #168]	; (4033d4 <tcp_slowtmr+0x320>)
  40332c:	47a8      	blx	r5
  40332e:	e78a      	b.n	403246 <tcp_slowtmr+0x192>
      tcp_pcb_purge(pcb);
  403330:	4620      	mov	r0, r4
  403332:	4b29      	ldr	r3, [pc, #164]	; (4033d8 <tcp_slowtmr+0x324>)
  403334:	4798      	blx	r3
      if (prev != NULL) {
  403336:	b1f7      	cbz	r7, 403376 <tcp_slowtmr+0x2c2>
        prev->next = pcb->next;
  403338:	68e3      	ldr	r3, [r4, #12]
  40333a:	60fb      	str	r3, [r7, #12]
      if (pcb_reset) {
  40333c:	f1b9 0f00 	cmp.w	r9, #0
  403340:	d150      	bne.n	4033e4 <tcp_slowtmr+0x330>
      err_fn = pcb->errf;
  403342:	f8d4 808c 	ldr.w	r8, [r4, #140]	; 0x8c
      err_arg = pcb->callback_arg;
  403346:	f8d4 a010 	ldr.w	sl, [r4, #16]
      pcb = pcb->next;
  40334a:	68e6      	ldr	r6, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
  40334c:	4621      	mov	r1, r4
  40334e:	2002      	movs	r0, #2
  403350:	4b11      	ldr	r3, [pc, #68]	; (403398 <tcp_slowtmr+0x2e4>)
  403352:	4798      	blx	r3
      tcp_active_pcbs_changed = 0;
  403354:	2200      	movs	r2, #0
  403356:	4b21      	ldr	r3, [pc, #132]	; (4033dc <tcp_slowtmr+0x328>)
  403358:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
  40335a:	f1b8 0f00 	cmp.w	r8, #0
  40335e:	d067      	beq.n	403430 <tcp_slowtmr+0x37c>
  403360:	f06f 0109 	mvn.w	r1, #9
  403364:	4650      	mov	r0, sl
  403366:	47c0      	blx	r8
      if (tcp_active_pcbs_changed) {
  403368:	4b1c      	ldr	r3, [pc, #112]	; (4033dc <tcp_slowtmr+0x328>)
  40336a:	781b      	ldrb	r3, [r3, #0]
  40336c:	2b00      	cmp	r3, #0
  40336e:	f47f aeaf 	bne.w	4030d0 <tcp_slowtmr+0x1c>
      pcb = pcb->next;
  403372:	4634      	mov	r4, r6
  403374:	e775      	b.n	403262 <tcp_slowtmr+0x1ae>
        tcp_active_pcbs = pcb->next;
  403376:	68e3      	ldr	r3, [r4, #12]
  403378:	4a04      	ldr	r2, [pc, #16]	; (40338c <tcp_slowtmr+0x2d8>)
  40337a:	6013      	str	r3, [r2, #0]
  40337c:	e7de      	b.n	40333c <tcp_slowtmr+0x288>
  40337e:	bf00      	nop
  403380:	204049d0 	.word	0x204049d0
  403384:	20402629 	.word	0x20402629
  403388:	00407289 	.word	0x00407289
  40338c:	204049cc 	.word	0x204049cc
  403390:	0040ae04 	.word	0x0040ae04
  403394:	204049e0 	.word	0x204049e0
  403398:	00402689 	.word	0x00402689
  40339c:	0040ae48 	.word	0x0040ae48
  4033a0:	0040ae70 	.word	0x0040ae70
  4033a4:	0040aa9c 	.word	0x0040aa9c
  4033a8:	00405af9 	.word	0x00405af9
  4033ac:	0040ae98 	.word	0x0040ae98
  4033b0:	000a4cb8 	.word	0x000a4cb8
  4033b4:	000124f8 	.word	0x000124f8
  4033b8:	0040aec8 	.word	0x0040aec8
  4033bc:	00405be9 	.word	0x00405be9
  4033c0:	0040ae24 	.word	0x0040ae24
  4033c4:	0040adc8 	.word	0x0040adc8
  4033c8:	00405c9d 	.word	0x00405c9d
  4033cc:	00402fb1 	.word	0x00402fb1
  4033d0:	0040af14 	.word	0x0040af14
  4033d4:	0040af44 	.word	0x0040af44
  4033d8:	00403029 	.word	0x00403029
  4033dc:	204049c8 	.word	0x204049c8
  4033e0:	10624dd3 	.word	0x10624dd3
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  4033e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  4033e6:	6d20      	ldr	r0, [r4, #80]	; 0x50
  4033e8:	8ba3      	ldrh	r3, [r4, #28]
  4033ea:	9301      	str	r3, [sp, #4]
  4033ec:	8b63      	ldrh	r3, [r4, #26]
  4033ee:	9300      	str	r3, [sp, #0]
  4033f0:	1d23      	adds	r3, r4, #4
  4033f2:	4622      	mov	r2, r4
  4033f4:	4e1f      	ldr	r6, [pc, #124]	; (403474 <tcp_slowtmr+0x3c0>)
  4033f6:	47b0      	blx	r6
  4033f8:	e7a3      	b.n	403342 <tcp_slowtmr+0x28e>
        prev->polltmr = 0;
  4033fa:	2700      	movs	r7, #0
  4033fc:	77e7      	strb	r7, [r4, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
  4033fe:	481e      	ldr	r0, [pc, #120]	; (403478 <tcp_slowtmr+0x3c4>)
  403400:	47a8      	blx	r5
        tcp_active_pcbs_changed = 0;
  403402:	4b1e      	ldr	r3, [pc, #120]	; (40347c <tcp_slowtmr+0x3c8>)
  403404:	701f      	strb	r7, [r3, #0]
        TCP_EVENT_POLL(prev, err);
  403406:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
  40340a:	b15b      	cbz	r3, 403424 <tcp_slowtmr+0x370>
  40340c:	4621      	mov	r1, r4
  40340e:	6920      	ldr	r0, [r4, #16]
  403410:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
  403412:	4b1a      	ldr	r3, [pc, #104]	; (40347c <tcp_slowtmr+0x3c8>)
  403414:	781b      	ldrb	r3, [r3, #0]
  403416:	2b00      	cmp	r3, #0
  403418:	f47f ae5a 	bne.w	4030d0 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
  40341c:	b110      	cbz	r0, 403424 <tcp_slowtmr+0x370>
  40341e:	4627      	mov	r7, r4
      pcb = pcb->next;
  403420:	4634      	mov	r4, r6
  403422:	e71e      	b.n	403262 <tcp_slowtmr+0x1ae>
          tcp_output(prev);
  403424:	4620      	mov	r0, r4
  403426:	4b16      	ldr	r3, [pc, #88]	; (403480 <tcp_slowtmr+0x3cc>)
  403428:	4798      	blx	r3
  40342a:	4627      	mov	r7, r4
      pcb = pcb->next;
  40342c:	4634      	mov	r4, r6
  40342e:	e718      	b.n	403262 <tcp_slowtmr+0x1ae>
      pcb = pcb->next;
  403430:	4634      	mov	r4, r6
  403432:	e716      	b.n	403262 <tcp_slowtmr+0x1ae>
        tcp_tw_pcbs = pcb->next;
  403434:	68e2      	ldr	r2, [r4, #12]
  403436:	4b13      	ldr	r3, [pc, #76]	; (403484 <tcp_slowtmr+0x3d0>)
  403438:	601a      	str	r2, [r3, #0]
  40343a:	e00d      	b.n	403458 <tcp_slowtmr+0x3a4>
      pcb = pcb->next;
  40343c:	4625      	mov	r5, r4
  40343e:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
  403440:	b1a4      	cbz	r4, 40346c <tcp_slowtmr+0x3b8>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  403442:	6a62      	ldr	r2, [r4, #36]	; 0x24
  403444:	6833      	ldr	r3, [r6, #0]
  403446:	1a9b      	subs	r3, r3, r2
    if (pcb_remove) {
  403448:	2bf0      	cmp	r3, #240	; 0xf0
  40344a:	d9f7      	bls.n	40343c <tcp_slowtmr+0x388>
      tcp_pcb_purge(pcb);
  40344c:	4620      	mov	r0, r4
  40344e:	47c0      	blx	r8
      if (prev != NULL) {
  403450:	2d00      	cmp	r5, #0
  403452:	d0ef      	beq.n	403434 <tcp_slowtmr+0x380>
        prev->next = pcb->next;
  403454:	68e3      	ldr	r3, [r4, #12]
  403456:	60eb      	str	r3, [r5, #12]
      pcb = pcb->next;
  403458:	f8d4 900c 	ldr.w	r9, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
  40345c:	4621      	mov	r1, r4
  40345e:	2002      	movs	r0, #2
  403460:	47b8      	blx	r7
      pcb = pcb->next;
  403462:	464c      	mov	r4, r9
  403464:	e7ec      	b.n	403440 <tcp_slowtmr+0x38c>
    if (pcb->ooseq != NULL &&
  403466:	f04f 0900 	mov.w	r9, #0
  40346a:	e6e9      	b.n	403240 <tcp_slowtmr+0x18c>
}
  40346c:	b003      	add	sp, #12
  40346e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403472:	bf00      	nop
  403474:	00405a45 	.word	0x00405a45
  403478:	0040af74 	.word	0x0040af74
  40347c:	204049c8 	.word	0x204049c8
  403480:	0040576d 	.word	0x0040576d
  403484:	204049e0 	.word	0x204049e0

00403488 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  403488:	b510      	push	{r4, lr}
  40348a:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
  40348c:	6802      	ldr	r2, [r0, #0]
  40348e:	428a      	cmp	r2, r1
  403490:	d00b      	beq.n	4034aa <tcp_pcb_remove+0x22>
  403492:	4b18      	ldr	r3, [pc, #96]	; (4034f4 <tcp_pcb_remove+0x6c>)
  403494:	601a      	str	r2, [r3, #0]
  403496:	b17a      	cbz	r2, 4034b8 <tcp_pcb_remove+0x30>
  403498:	68d3      	ldr	r3, [r2, #12]
  40349a:	4299      	cmp	r1, r3
  40349c:	d01d      	beq.n	4034da <tcp_pcb_remove+0x52>
  40349e:	b1f3      	cbz	r3, 4034de <tcp_pcb_remove+0x56>
  4034a0:	68da      	ldr	r2, [r3, #12]
  4034a2:	4294      	cmp	r4, r2
  4034a4:	d004      	beq.n	4034b0 <tcp_pcb_remove+0x28>
  4034a6:	4613      	mov	r3, r2
  4034a8:	e7f9      	b.n	40349e <tcp_pcb_remove+0x16>
  4034aa:	68d3      	ldr	r3, [r2, #12]
  4034ac:	6003      	str	r3, [r0, #0]
  4034ae:	e003      	b.n	4034b8 <tcp_pcb_remove+0x30>
  4034b0:	4a10      	ldr	r2, [pc, #64]	; (4034f4 <tcp_pcb_remove+0x6c>)
  4034b2:	6013      	str	r3, [r2, #0]
  4034b4:	68e2      	ldr	r2, [r4, #12]
  4034b6:	60da      	str	r2, [r3, #12]
  4034b8:	2300      	movs	r3, #0
  4034ba:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
  4034bc:	4620      	mov	r0, r4
  4034be:	4b0e      	ldr	r3, [pc, #56]	; (4034f8 <tcp_pcb_remove+0x70>)
  4034c0:	4798      	blx	r3
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
  4034c2:	7e23      	ldrb	r3, [r4, #24]
  4034c4:	2b0a      	cmp	r3, #10
  4034c6:	d005      	beq.n	4034d4 <tcp_pcb_remove+0x4c>
  4034c8:	2b01      	cmp	r3, #1
  4034ca:	d003      	beq.n	4034d4 <tcp_pcb_remove+0x4c>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
  4034cc:	7fa3      	ldrb	r3, [r4, #30]
     pcb->state != LISTEN &&
  4034ce:	f013 0f01 	tst.w	r3, #1
  4034d2:	d108      	bne.n	4034e6 <tcp_pcb_remove+0x5e>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
  4034d4:	2300      	movs	r3, #0
  4034d6:	7623      	strb	r3, [r4, #24]
  4034d8:	bd10      	pop	{r4, pc}
  TCP_RMV(pcblist, pcb);
  4034da:	4613      	mov	r3, r2
  4034dc:	e7ea      	b.n	4034b4 <tcp_pcb_remove+0x2c>
  4034de:	2200      	movs	r2, #0
  4034e0:	4b04      	ldr	r3, [pc, #16]	; (4034f4 <tcp_pcb_remove+0x6c>)
  4034e2:	601a      	str	r2, [r3, #0]
  4034e4:	e7e8      	b.n	4034b8 <tcp_pcb_remove+0x30>
    pcb->flags |= TF_ACK_NOW;
  4034e6:	f043 0302 	orr.w	r3, r3, #2
  4034ea:	77a3      	strb	r3, [r4, #30]
    tcp_output(pcb);
  4034ec:	4620      	mov	r0, r4
  4034ee:	4b03      	ldr	r3, [pc, #12]	; (4034fc <tcp_pcb_remove+0x74>)
  4034f0:	4798      	blx	r3
  4034f2:	e7ef      	b.n	4034d4 <tcp_pcb_remove+0x4c>
  4034f4:	204049d8 	.word	0x204049d8
  4034f8:	00403029 	.word	0x00403029
  4034fc:	0040576d 	.word	0x0040576d

00403500 <tcp_close_shutdown>:
{
  403500:	b530      	push	{r4, r5, lr}
  403502:	b083      	sub	sp, #12
  403504:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
  403506:	b121      	cbz	r1, 403512 <tcp_close_shutdown+0x12>
  403508:	7e03      	ldrb	r3, [r0, #24]
  40350a:	2b04      	cmp	r3, #4
  40350c:	d00b      	beq.n	403526 <tcp_close_shutdown+0x26>
  40350e:	2b07      	cmp	r3, #7
  403510:	d009      	beq.n	403526 <tcp_close_shutdown+0x26>
  switch (pcb->state) {
  403512:	7e23      	ldrb	r3, [r4, #24]
  403514:	2b07      	cmp	r3, #7
  403516:	f200 80b1 	bhi.w	40367c <tcp_close_shutdown+0x17c>
  40351a:	e8df f003 	tbb	[pc, r3]
  40351e:	754e      	.short	0x754e
  403520:	af9b8c7f 	.word	0xaf9b8c7f
  403524:	a4af      	.short	0xa4af
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
  403526:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  403528:	b1e3      	cbz	r3, 403564 <tcp_close_shutdown+0x64>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  40352a:	8ba3      	ldrh	r3, [r4, #28]
  40352c:	9301      	str	r3, [sp, #4]
  40352e:	8b63      	ldrh	r3, [r4, #26]
  403530:	9300      	str	r3, [sp, #0]
  403532:	1d23      	adds	r3, r4, #4
  403534:	4622      	mov	r2, r4
  403536:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  403538:	6d20      	ldr	r0, [r4, #80]	; 0x50
  40353a:	4d51      	ldr	r5, [pc, #324]	; (403680 <tcp_close_shutdown+0x180>)
  40353c:	47a8      	blx	r5
      tcp_pcb_purge(pcb);
  40353e:	4620      	mov	r0, r4
  403540:	4b50      	ldr	r3, [pc, #320]	; (403684 <tcp_close_shutdown+0x184>)
  403542:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  403544:	4b50      	ldr	r3, [pc, #320]	; (403688 <tcp_close_shutdown+0x188>)
  403546:	681a      	ldr	r2, [r3, #0]
  403548:	4294      	cmp	r4, r2
  40354a:	d011      	beq.n	403570 <tcp_close_shutdown+0x70>
  40354c:	4b4f      	ldr	r3, [pc, #316]	; (40368c <tcp_close_shutdown+0x18c>)
  40354e:	601a      	str	r2, [r3, #0]
  403550:	b1aa      	cbz	r2, 40357e <tcp_close_shutdown+0x7e>
  403552:	68d3      	ldr	r3, [r2, #12]
  403554:	429c      	cmp	r4, r3
  403556:	d020      	beq.n	40359a <tcp_close_shutdown+0x9a>
  403558:	b30b      	cbz	r3, 40359e <tcp_close_shutdown+0x9e>
  40355a:	68da      	ldr	r2, [r3, #12]
  40355c:	4294      	cmp	r4, r2
  40355e:	d00a      	beq.n	403576 <tcp_close_shutdown+0x76>
  403560:	4613      	mov	r3, r2
  403562:	e7f9      	b.n	403558 <tcp_close_shutdown+0x58>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
  403564:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
  403566:	f640 3368 	movw	r3, #2920	; 0xb68
  40356a:	429a      	cmp	r2, r3
  40356c:	d1dd      	bne.n	40352a <tcp_close_shutdown+0x2a>
  40356e:	e7d0      	b.n	403512 <tcp_close_shutdown+0x12>
      TCP_RMV_ACTIVE(pcb);
  403570:	68d2      	ldr	r2, [r2, #12]
  403572:	601a      	str	r2, [r3, #0]
  403574:	e003      	b.n	40357e <tcp_close_shutdown+0x7e>
  403576:	4a45      	ldr	r2, [pc, #276]	; (40368c <tcp_close_shutdown+0x18c>)
  403578:	6013      	str	r3, [r2, #0]
  40357a:	68e2      	ldr	r2, [r4, #12]
  40357c:	60da      	str	r2, [r3, #12]
  40357e:	2300      	movs	r3, #0
  403580:	60e3      	str	r3, [r4, #12]
  403582:	2201      	movs	r2, #1
  403584:	4b42      	ldr	r3, [pc, #264]	; (403690 <tcp_close_shutdown+0x190>)
  403586:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
  403588:	7e23      	ldrb	r3, [r4, #24]
  40358a:	2b04      	cmp	r3, #4
  40358c:	d00b      	beq.n	4035a6 <tcp_close_shutdown+0xa6>
        memp_free(MEMP_TCP_PCB, pcb);
  40358e:	4621      	mov	r1, r4
  403590:	2002      	movs	r0, #2
  403592:	4b40      	ldr	r3, [pc, #256]	; (403694 <tcp_close_shutdown+0x194>)
  403594:	4798      	blx	r3
      return ERR_OK;
  403596:	2300      	movs	r3, #0
  403598:	e059      	b.n	40364e <tcp_close_shutdown+0x14e>
      TCP_RMV_ACTIVE(pcb);
  40359a:	4613      	mov	r3, r2
  40359c:	e7ed      	b.n	40357a <tcp_close_shutdown+0x7a>
  40359e:	2200      	movs	r2, #0
  4035a0:	4b3a      	ldr	r3, [pc, #232]	; (40368c <tcp_close_shutdown+0x18c>)
  4035a2:	601a      	str	r2, [r3, #0]
  4035a4:	e7eb      	b.n	40357e <tcp_close_shutdown+0x7e>
        pcb->state = TIME_WAIT;
  4035a6:	230a      	movs	r3, #10
  4035a8:	7623      	strb	r3, [r4, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
  4035aa:	4b3b      	ldr	r3, [pc, #236]	; (403698 <tcp_close_shutdown+0x198>)
  4035ac:	681a      	ldr	r2, [r3, #0]
  4035ae:	60e2      	str	r2, [r4, #12]
  4035b0:	601c      	str	r4, [r3, #0]
  4035b2:	4b3a      	ldr	r3, [pc, #232]	; (40369c <tcp_close_shutdown+0x19c>)
  4035b4:	4798      	blx	r3
      return ERR_OK;
  4035b6:	2300      	movs	r3, #0
  4035b8:	e049      	b.n	40364e <tcp_close_shutdown+0x14e>
    if (pcb->local_port != 0) {
  4035ba:	8b63      	ldrh	r3, [r4, #26]
  4035bc:	b1c3      	cbz	r3, 4035f0 <tcp_close_shutdown+0xf0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  4035be:	4b38      	ldr	r3, [pc, #224]	; (4036a0 <tcp_close_shutdown+0x1a0>)
  4035c0:	681a      	ldr	r2, [r3, #0]
  4035c2:	4294      	cmp	r4, r2
  4035c4:	d00b      	beq.n	4035de <tcp_close_shutdown+0xde>
  4035c6:	4b31      	ldr	r3, [pc, #196]	; (40368c <tcp_close_shutdown+0x18c>)
  4035c8:	601a      	str	r2, [r3, #0]
  4035ca:	b17a      	cbz	r2, 4035ec <tcp_close_shutdown+0xec>
  4035cc:	68d3      	ldr	r3, [r2, #12]
  4035ce:	429c      	cmp	r4, r3
  4035d0:	d014      	beq.n	4035fc <tcp_close_shutdown+0xfc>
  4035d2:	b1ab      	cbz	r3, 403600 <tcp_close_shutdown+0x100>
  4035d4:	68da      	ldr	r2, [r3, #12]
  4035d6:	4294      	cmp	r4, r2
  4035d8:	d004      	beq.n	4035e4 <tcp_close_shutdown+0xe4>
  4035da:	4613      	mov	r3, r2
  4035dc:	e7f9      	b.n	4035d2 <tcp_close_shutdown+0xd2>
  4035de:	68d2      	ldr	r2, [r2, #12]
  4035e0:	601a      	str	r2, [r3, #0]
  4035e2:	e003      	b.n	4035ec <tcp_close_shutdown+0xec>
  4035e4:	4a29      	ldr	r2, [pc, #164]	; (40368c <tcp_close_shutdown+0x18c>)
  4035e6:	6013      	str	r3, [r2, #0]
  4035e8:	68e2      	ldr	r2, [r4, #12]
  4035ea:	60da      	str	r2, [r3, #12]
  4035ec:	2300      	movs	r3, #0
  4035ee:	60e3      	str	r3, [r4, #12]
    memp_free(MEMP_TCP_PCB, pcb);
  4035f0:	4621      	mov	r1, r4
  4035f2:	2002      	movs	r0, #2
  4035f4:	4b27      	ldr	r3, [pc, #156]	; (403694 <tcp_close_shutdown+0x194>)
  4035f6:	4798      	blx	r3
    err = ERR_OK;
  4035f8:	2300      	movs	r3, #0
    break;
  4035fa:	e028      	b.n	40364e <tcp_close_shutdown+0x14e>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  4035fc:	4613      	mov	r3, r2
  4035fe:	e7f3      	b.n	4035e8 <tcp_close_shutdown+0xe8>
  403600:	2200      	movs	r2, #0
  403602:	4b22      	ldr	r3, [pc, #136]	; (40368c <tcp_close_shutdown+0x18c>)
  403604:	601a      	str	r2, [r3, #0]
  403606:	e7f1      	b.n	4035ec <tcp_close_shutdown+0xec>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
  403608:	4621      	mov	r1, r4
  40360a:	4826      	ldr	r0, [pc, #152]	; (4036a4 <tcp_close_shutdown+0x1a4>)
  40360c:	4b26      	ldr	r3, [pc, #152]	; (4036a8 <tcp_close_shutdown+0x1a8>)
  40360e:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
  403610:	4621      	mov	r1, r4
  403612:	2003      	movs	r0, #3
  403614:	4b1f      	ldr	r3, [pc, #124]	; (403694 <tcp_close_shutdown+0x194>)
  403616:	4798      	blx	r3
    err = ERR_OK;
  403618:	2300      	movs	r3, #0
    break;
  40361a:	e018      	b.n	40364e <tcp_close_shutdown+0x14e>
    TCP_PCB_REMOVE_ACTIVE(pcb);
  40361c:	4621      	mov	r1, r4
  40361e:	481a      	ldr	r0, [pc, #104]	; (403688 <tcp_close_shutdown+0x188>)
  403620:	4b21      	ldr	r3, [pc, #132]	; (4036a8 <tcp_close_shutdown+0x1a8>)
  403622:	4798      	blx	r3
  403624:	2201      	movs	r2, #1
  403626:	4b1a      	ldr	r3, [pc, #104]	; (403690 <tcp_close_shutdown+0x190>)
  403628:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
  40362a:	4621      	mov	r1, r4
  40362c:	2002      	movs	r0, #2
  40362e:	4b19      	ldr	r3, [pc, #100]	; (403694 <tcp_close_shutdown+0x194>)
  403630:	4798      	blx	r3
    err = ERR_OK;
  403632:	2300      	movs	r3, #0
    break;
  403634:	e00b      	b.n	40364e <tcp_close_shutdown+0x14e>
    err = tcp_send_fin(pcb);
  403636:	4620      	mov	r0, r4
  403638:	4b1c      	ldr	r3, [pc, #112]	; (4036ac <tcp_close_shutdown+0x1ac>)
  40363a:	4798      	blx	r3
    if (err == ERR_OK) {
  40363c:	4603      	mov	r3, r0
  40363e:	b930      	cbnz	r0, 40364e <tcp_close_shutdown+0x14e>
      pcb->state = FIN_WAIT_1;
  403640:	2305      	movs	r3, #5
  403642:	7623      	strb	r3, [r4, #24]
  if (pcb != NULL && err == ERR_OK) {
  403644:	b1c4      	cbz	r4, 403678 <tcp_close_shutdown+0x178>
    tcp_output(pcb);
  403646:	4620      	mov	r0, r4
  403648:	4b19      	ldr	r3, [pc, #100]	; (4036b0 <tcp_close_shutdown+0x1b0>)
  40364a:	4798      	blx	r3
  40364c:	2300      	movs	r3, #0
}
  40364e:	4618      	mov	r0, r3
  403650:	b003      	add	sp, #12
  403652:	bd30      	pop	{r4, r5, pc}
    err = tcp_send_fin(pcb);
  403654:	4620      	mov	r0, r4
  403656:	4b15      	ldr	r3, [pc, #84]	; (4036ac <tcp_close_shutdown+0x1ac>)
  403658:	4798      	blx	r3
    if (err == ERR_OK) {
  40365a:	4603      	mov	r3, r0
  40365c:	2800      	cmp	r0, #0
  40365e:	d1f6      	bne.n	40364e <tcp_close_shutdown+0x14e>
      pcb->state = FIN_WAIT_1;
  403660:	2305      	movs	r3, #5
  403662:	7623      	strb	r3, [r4, #24]
  403664:	e7ee      	b.n	403644 <tcp_close_shutdown+0x144>
    err = tcp_send_fin(pcb);
  403666:	4620      	mov	r0, r4
  403668:	4b10      	ldr	r3, [pc, #64]	; (4036ac <tcp_close_shutdown+0x1ac>)
  40366a:	4798      	blx	r3
    if (err == ERR_OK) {
  40366c:	4603      	mov	r3, r0
  40366e:	2800      	cmp	r0, #0
  403670:	d1ed      	bne.n	40364e <tcp_close_shutdown+0x14e>
      pcb->state = LAST_ACK;
  403672:	2309      	movs	r3, #9
  403674:	7623      	strb	r3, [r4, #24]
  403676:	e7e5      	b.n	403644 <tcp_close_shutdown+0x144>
  403678:	2300      	movs	r3, #0
  40367a:	e7e8      	b.n	40364e <tcp_close_shutdown+0x14e>
    err = ERR_OK;
  40367c:	2300      	movs	r3, #0
  40367e:	e7e6      	b.n	40364e <tcp_close_shutdown+0x14e>
  403680:	00405a45 	.word	0x00405a45
  403684:	00403029 	.word	0x00403029
  403688:	204049cc 	.word	0x204049cc
  40368c:	204049d8 	.word	0x204049d8
  403690:	204049c8 	.word	0x204049c8
  403694:	00402689 	.word	0x00402689
  403698:	204049e0 	.word	0x204049e0
  40369c:	00402255 	.word	0x00402255
  4036a0:	204049dc 	.word	0x204049dc
  4036a4:	204049d4 	.word	0x204049d4
  4036a8:	00403489 	.word	0x00403489
  4036ac:	004056a5 	.word	0x004056a5
  4036b0:	0040576d 	.word	0x0040576d

004036b4 <tcp_abandon>:
{
  4036b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4036b8:	b083      	sub	sp, #12
  4036ba:	4604      	mov	r4, r0
  if (pcb->state == TIME_WAIT) {
  4036bc:	7e03      	ldrb	r3, [r0, #24]
  4036be:	2b0a      	cmp	r3, #10
  4036c0:	d027      	beq.n	403712 <tcp_abandon+0x5e>
  4036c2:	460e      	mov	r6, r1
    seqno = pcb->snd_nxt;
  4036c4:	f8d0 8050 	ldr.w	r8, [r0, #80]	; 0x50
    ackno = pcb->rcv_nxt;
  4036c8:	f8d0 9028 	ldr.w	r9, [r0, #40]	; 0x28
    errf = pcb->errf;
  4036cc:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
  4036d0:	6907      	ldr	r7, [r0, #16]
    TCP_PCB_REMOVE_ACTIVE(pcb);
  4036d2:	4601      	mov	r1, r0
  4036d4:	4819      	ldr	r0, [pc, #100]	; (40373c <tcp_abandon+0x88>)
  4036d6:	4b1a      	ldr	r3, [pc, #104]	; (403740 <tcp_abandon+0x8c>)
  4036d8:	4798      	blx	r3
  4036da:	2201      	movs	r2, #1
  4036dc:	4b19      	ldr	r3, [pc, #100]	; (403744 <tcp_abandon+0x90>)
  4036de:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
  4036e0:	6f20      	ldr	r0, [r4, #112]	; 0x70
  4036e2:	b108      	cbz	r0, 4036e8 <tcp_abandon+0x34>
      tcp_segs_free(pcb->unacked);
  4036e4:	4b18      	ldr	r3, [pc, #96]	; (403748 <tcp_abandon+0x94>)
  4036e6:	4798      	blx	r3
    if (pcb->unsent != NULL) {
  4036e8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  4036ea:	b108      	cbz	r0, 4036f0 <tcp_abandon+0x3c>
      tcp_segs_free(pcb->unsent);
  4036ec:	4b16      	ldr	r3, [pc, #88]	; (403748 <tcp_abandon+0x94>)
  4036ee:	4798      	blx	r3
    if (pcb->ooseq != NULL) {
  4036f0:	6f60      	ldr	r0, [r4, #116]	; 0x74
  4036f2:	b108      	cbz	r0, 4036f8 <tcp_abandon+0x44>
      tcp_segs_free(pcb->ooseq);
  4036f4:	4b14      	ldr	r3, [pc, #80]	; (403748 <tcp_abandon+0x94>)
  4036f6:	4798      	blx	r3
    if (reset) {
  4036f8:	b9a6      	cbnz	r6, 403724 <tcp_abandon+0x70>
    memp_free(MEMP_TCP_PCB, pcb);
  4036fa:	4621      	mov	r1, r4
  4036fc:	2002      	movs	r0, #2
  4036fe:	4b13      	ldr	r3, [pc, #76]	; (40374c <tcp_abandon+0x98>)
  403700:	4798      	blx	r3
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
  403702:	b11d      	cbz	r5, 40370c <tcp_abandon+0x58>
  403704:	f06f 0109 	mvn.w	r1, #9
  403708:	4638      	mov	r0, r7
  40370a:	47a8      	blx	r5
}
  40370c:	b003      	add	sp, #12
  40370e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
  403712:	4601      	mov	r1, r0
  403714:	480e      	ldr	r0, [pc, #56]	; (403750 <tcp_abandon+0x9c>)
  403716:	4b0a      	ldr	r3, [pc, #40]	; (403740 <tcp_abandon+0x8c>)
  403718:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB, pcb);
  40371a:	4621      	mov	r1, r4
  40371c:	2002      	movs	r0, #2
  40371e:	4b0b      	ldr	r3, [pc, #44]	; (40374c <tcp_abandon+0x98>)
  403720:	4798      	blx	r3
  403722:	e7f3      	b.n	40370c <tcp_abandon+0x58>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
  403724:	8ba3      	ldrh	r3, [r4, #28]
  403726:	9301      	str	r3, [sp, #4]
  403728:	8b63      	ldrh	r3, [r4, #26]
  40372a:	9300      	str	r3, [sp, #0]
  40372c:	1d23      	adds	r3, r4, #4
  40372e:	4622      	mov	r2, r4
  403730:	4649      	mov	r1, r9
  403732:	4640      	mov	r0, r8
  403734:	4e07      	ldr	r6, [pc, #28]	; (403754 <tcp_abandon+0xa0>)
  403736:	47b0      	blx	r6
  403738:	e7df      	b.n	4036fa <tcp_abandon+0x46>
  40373a:	bf00      	nop
  40373c:	204049cc 	.word	0x204049cc
  403740:	00403489 	.word	0x00403489
  403744:	204049c8 	.word	0x204049c8
  403748:	00402fb1 	.word	0x00402fb1
  40374c:	00402689 	.word	0x00402689
  403750:	204049e0 	.word	0x204049e0
  403754:	00405a45 	.word	0x00405a45

00403758 <tcp_abort>:
{
  403758:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
  40375a:	2101      	movs	r1, #1
  40375c:	4b01      	ldr	r3, [pc, #4]	; (403764 <tcp_abort+0xc>)
  40375e:	4798      	blx	r3
  403760:	bd08      	pop	{r3, pc}
  403762:	bf00      	nop
  403764:	004036b5 	.word	0x004036b5

00403768 <tcp_next_iss>:
u32_t
tcp_next_iss(void)
{
  static u32_t iss = 6510;
  
  iss += tcp_ticks;       /* XXX */
  403768:	4b03      	ldr	r3, [pc, #12]	; (403778 <tcp_next_iss+0x10>)
  40376a:	6818      	ldr	r0, [r3, #0]
  40376c:	4a03      	ldr	r2, [pc, #12]	; (40377c <tcp_next_iss+0x14>)
  40376e:	6812      	ldr	r2, [r2, #0]
  403770:	4410      	add	r0, r2
  403772:	6018      	str	r0, [r3, #0]
  return iss;
}
  403774:	4770      	bx	lr
  403776:	bf00      	nop
  403778:	20400008 	.word	0x20400008
  40377c:	204049d0 	.word	0x204049d0

00403780 <tcp_alloc>:
{
  403780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403782:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  403784:	2002      	movs	r0, #2
  403786:	4b45      	ldr	r3, [pc, #276]	; (40389c <tcp_alloc+0x11c>)
  403788:	4798      	blx	r3
  if (pcb == NULL) {
  40378a:	4604      	mov	r4, r0
  40378c:	2800      	cmp	r0, #0
  40378e:	d039      	beq.n	403804 <tcp_alloc+0x84>
    memset(pcb, 0, sizeof(struct tcp_pcb));
  403790:	2298      	movs	r2, #152	; 0x98
  403792:	2100      	movs	r1, #0
  403794:	4620      	mov	r0, r4
  403796:	4b42      	ldr	r3, [pc, #264]	; (4038a0 <tcp_alloc+0x120>)
  403798:	4798      	blx	r3
    pcb->prio = prio;
  40379a:	7665      	strb	r5, [r4, #25]
    pcb->snd_buf = TCP_SND_BUF;
  40379c:	f640 3368 	movw	r3, #2920	; 0xb68
  4037a0:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    pcb->snd_queuelen = 0;
  4037a4:	2500      	movs	r5, #0
  4037a6:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
    pcb->rcv_wnd = TCP_WND;
  4037aa:	85a3      	strh	r3, [r4, #44]	; 0x2c
    pcb->rcv_ann_wnd = TCP_WND;
  4037ac:	85e3      	strh	r3, [r4, #46]	; 0x2e
    pcb->tos = 0;
  4037ae:	7265      	strb	r5, [r4, #9]
    pcb->ttl = TCP_TTL;
  4037b0:	23ff      	movs	r3, #255	; 0xff
  4037b2:	72a3      	strb	r3, [r4, #10]
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
  4037b4:	f44f 7306 	mov.w	r3, #536	; 0x218
  4037b8:	86e3      	strh	r3, [r4, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
  4037ba:	2306      	movs	r3, #6
  4037bc:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    pcb->sa = 0;
  4037c0:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
  4037c4:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    pcb->rtime = -1;
  4037c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4037cc:	86a3      	strh	r3, [r4, #52]	; 0x34
    pcb->cwnd = 1;
  4037ce:	2301      	movs	r3, #1
  4037d0:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    iss = tcp_next_iss();
  4037d4:	4b33      	ldr	r3, [pc, #204]	; (4038a4 <tcp_alloc+0x124>)
  4037d6:	4798      	blx	r3
    pcb->snd_wl2 = iss;
  4037d8:	65a0      	str	r0, [r4, #88]	; 0x58
    pcb->snd_nxt = iss;
  4037da:	6520      	str	r0, [r4, #80]	; 0x50
    pcb->lastack = iss;
  4037dc:	64a0      	str	r0, [r4, #72]	; 0x48
    pcb->snd_lbb = iss;   
  4037de:	65e0      	str	r0, [r4, #92]	; 0x5c
    pcb->tmr = tcp_ticks;
  4037e0:	4b31      	ldr	r3, [pc, #196]	; (4038a8 <tcp_alloc+0x128>)
  4037e2:	681b      	ldr	r3, [r3, #0]
  4037e4:	6263      	str	r3, [r4, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
  4037e6:	4b31      	ldr	r3, [pc, #196]	; (4038ac <tcp_alloc+0x12c>)
  4037e8:	781b      	ldrb	r3, [r3, #0]
  4037ea:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    pcb->polltmr = 0;
  4037ee:	77e5      	strb	r5, [r4, #31]
    pcb->recv = tcp_recv_null;
  4037f0:	4b2f      	ldr	r3, [pc, #188]	; (4038b0 <tcp_alloc+0x130>)
  4037f2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
  4037f6:	4b2f      	ldr	r3, [pc, #188]	; (4038b4 <tcp_alloc+0x134>)
  4037f8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    pcb->keep_cnt_sent = 0;
  4037fc:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
}
  403800:	4620      	mov	r0, r4
  403802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
  403804:	482c      	ldr	r0, [pc, #176]	; (4038b8 <tcp_alloc+0x138>)
  403806:	4b2d      	ldr	r3, [pc, #180]	; (4038bc <tcp_alloc+0x13c>)
  403808:	4798      	blx	r3
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  40380a:	4b2d      	ldr	r3, [pc, #180]	; (4038c0 <tcp_alloc+0x140>)
  40380c:	681b      	ldr	r3, [r3, #0]
  40380e:	b1a3      	cbz	r3, 40383a <tcp_alloc+0xba>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  403810:	4a25      	ldr	r2, [pc, #148]	; (4038a8 <tcp_alloc+0x128>)
  403812:	6810      	ldr	r0, [r2, #0]
  403814:	2200      	movs	r2, #0
  403816:	e001      	b.n	40381c <tcp_alloc+0x9c>
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  403818:	68db      	ldr	r3, [r3, #12]
  40381a:	b133      	cbz	r3, 40382a <tcp_alloc+0xaa>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  40381c:	6a59      	ldr	r1, [r3, #36]	; 0x24
  40381e:	1a41      	subs	r1, r0, r1
  403820:	4291      	cmp	r1, r2
  403822:	d3f9      	bcc.n	403818 <tcp_alloc+0x98>
      inactivity = tcp_ticks - pcb->tmr;
  403824:	460a      	mov	r2, r1
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  403826:	461c      	mov	r4, r3
  403828:	e7f6      	b.n	403818 <tcp_alloc+0x98>
  if (inactive != NULL) {
  40382a:	b134      	cbz	r4, 40383a <tcp_alloc+0xba>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
  40382c:	4621      	mov	r1, r4
  40382e:	4825      	ldr	r0, [pc, #148]	; (4038c4 <tcp_alloc+0x144>)
  403830:	4b22      	ldr	r3, [pc, #136]	; (4038bc <tcp_alloc+0x13c>)
  403832:	4798      	blx	r3
    tcp_abort(inactive);
  403834:	4620      	mov	r0, r4
  403836:	4b24      	ldr	r3, [pc, #144]	; (4038c8 <tcp_alloc+0x148>)
  403838:	4798      	blx	r3
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  40383a:	2002      	movs	r0, #2
  40383c:	4b17      	ldr	r3, [pc, #92]	; (40389c <tcp_alloc+0x11c>)
  40383e:	4798      	blx	r3
    if (pcb == NULL) {
  403840:	4604      	mov	r4, r0
  403842:	2800      	cmp	r0, #0
  403844:	d1a4      	bne.n	403790 <tcp_alloc+0x10>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
  403846:	4629      	mov	r1, r5
  403848:	4820      	ldr	r0, [pc, #128]	; (4038cc <tcp_alloc+0x14c>)
  40384a:	4b1c      	ldr	r3, [pc, #112]	; (4038bc <tcp_alloc+0x13c>)
  40384c:	4798      	blx	r3
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  40384e:	4b20      	ldr	r3, [pc, #128]	; (4038d0 <tcp_alloc+0x150>)
  403850:	681b      	ldr	r3, [r3, #0]
  403852:	b1db      	cbz	r3, 40388c <tcp_alloc+0x10c>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  403854:	4a14      	ldr	r2, [pc, #80]	; (4038a8 <tcp_alloc+0x128>)
  403856:	6817      	ldr	r7, [r2, #0]
  403858:	2200      	movs	r2, #0
  40385a:	267f      	movs	r6, #127	; 0x7f
  40385c:	e001      	b.n	403862 <tcp_alloc+0xe2>
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  40385e:	68db      	ldr	r3, [r3, #12]
  403860:	b163      	cbz	r3, 40387c <tcp_alloc+0xfc>
    if (pcb->prio <= prio &&
  403862:	7e59      	ldrb	r1, [r3, #25]
  403864:	428d      	cmp	r5, r1
  403866:	d3fa      	bcc.n	40385e <tcp_alloc+0xde>
  403868:	42b1      	cmp	r1, r6
  40386a:	d8f8      	bhi.n	40385e <tcp_alloc+0xde>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  40386c:	6a58      	ldr	r0, [r3, #36]	; 0x24
  40386e:	1a38      	subs	r0, r7, r0
       pcb->prio <= mprio &&
  403870:	4290      	cmp	r0, r2
  403872:	d3f4      	bcc.n	40385e <tcp_alloc+0xde>
      mprio = pcb->prio;
  403874:	460e      	mov	r6, r1
      inactivity = tcp_ticks - pcb->tmr;
  403876:	4602      	mov	r2, r0
       pcb->prio <= mprio &&
  403878:	461c      	mov	r4, r3
  40387a:	e7f0      	b.n	40385e <tcp_alloc+0xde>
  if (inactive != NULL) {
  40387c:	b134      	cbz	r4, 40388c <tcp_alloc+0x10c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
  40387e:	4621      	mov	r1, r4
  403880:	4814      	ldr	r0, [pc, #80]	; (4038d4 <tcp_alloc+0x154>)
  403882:	4b0e      	ldr	r3, [pc, #56]	; (4038bc <tcp_alloc+0x13c>)
  403884:	4798      	blx	r3
    tcp_abort(inactive);
  403886:	4620      	mov	r0, r4
  403888:	4b0f      	ldr	r3, [pc, #60]	; (4038c8 <tcp_alloc+0x148>)
  40388a:	4798      	blx	r3
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  40388c:	2002      	movs	r0, #2
  40388e:	4b03      	ldr	r3, [pc, #12]	; (40389c <tcp_alloc+0x11c>)
  403890:	4798      	blx	r3
  if (pcb != NULL) {
  403892:	4604      	mov	r4, r0
  403894:	2800      	cmp	r0, #0
  403896:	d0b3      	beq.n	403800 <tcp_alloc+0x80>
  403898:	e77a      	b.n	403790 <tcp_alloc+0x10>
  40389a:	bf00      	nop
  40389c:	00402649 	.word	0x00402649
  4038a0:	00407445 	.word	0x00407445
  4038a4:	00403769 	.word	0x00403769
  4038a8:	204049d0 	.word	0x204049d0
  4038ac:	20402629 	.word	0x20402629
  4038b0:	00403965 	.word	0x00403965
  4038b4:	006ddd00 	.word	0x006ddd00
  4038b8:	0040a9c8 	.word	0x0040a9c8
  4038bc:	00407289 	.word	0x00407289
  4038c0:	204049e0 	.word	0x204049e0
  4038c4:	0040a9fc 	.word	0x0040a9fc
  4038c8:	00403759 	.word	0x00403759
  4038cc:	0040aa38 	.word	0x0040aa38
  4038d0:	204049cc 	.word	0x204049cc
  4038d4:	0040aa70 	.word	0x0040aa70

004038d8 <tcp_new>:
{
  4038d8:	b508      	push	{r3, lr}
  return tcp_alloc(TCP_PRIO_NORMAL);
  4038da:	2040      	movs	r0, #64	; 0x40
  4038dc:	4b01      	ldr	r3, [pc, #4]	; (4038e4 <tcp_new+0xc>)
  4038de:	4798      	blx	r3
}
  4038e0:	bd08      	pop	{r3, pc}
  4038e2:	bf00      	nop
  4038e4:	00403781 	.word	0x00403781

004038e8 <tcp_eff_send_mss>:
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t
tcp_eff_send_mss(u16_t sendmss, ip_addr_t *addr)
{
  4038e8:	b510      	push	{r4, lr}
  4038ea:	4604      	mov	r4, r0
  u16_t mss_s;
  struct netif *outif;

  outif = ip_route(addr);
  4038ec:	4608      	mov	r0, r1
  4038ee:	4b07      	ldr	r3, [pc, #28]	; (40390c <tcp_eff_send_mss+0x24>)
  4038f0:	4798      	blx	r3
  if ((outif != NULL) && (outif->mtu != 0)) {
  4038f2:	b138      	cbz	r0, 403904 <tcp_eff_send_mss+0x1c>
  4038f4:	8c80      	ldrh	r0, [r0, #36]	; 0x24
  4038f6:	b138      	cbz	r0, 403908 <tcp_eff_send_mss+0x20>
    mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
  4038f8:	3828      	subs	r0, #40	; 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
  4038fa:	b280      	uxth	r0, r0
  4038fc:	42a0      	cmp	r0, r4
  4038fe:	bf28      	it	cs
  403900:	4620      	movcs	r0, r4
  403902:	bd10      	pop	{r4, pc}
  403904:	4620      	mov	r0, r4
  403906:	bd10      	pop	{r4, pc}
  403908:	4620      	mov	r0, r4
  }
  return sendmss;
}
  40390a:	bd10      	pop	{r4, pc}
  40390c:	00401751 	.word	0x00401751

00403910 <tcp_debug_print_state>:
 *
 * @param s enum tcp_state to print
 */
void
tcp_debug_print_state(enum tcp_state s)
{
  403910:	b508      	push	{r3, lr}
  LWIP_DEBUGF(TCP_DEBUG, ("State: %s\n", tcp_state_str[s]));
  403912:	4b03      	ldr	r3, [pc, #12]	; (403920 <tcp_debug_print_state+0x10>)
  403914:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  403918:	4802      	ldr	r0, [pc, #8]	; (403924 <tcp_debug_print_state+0x14>)
  40391a:	4b03      	ldr	r3, [pc, #12]	; (403928 <tcp_debug_print_state+0x18>)
  40391c:	4798      	blx	r3
  40391e:	bd08      	pop	{r3, pc}
  403920:	0040af98 	.word	0x0040af98
  403924:	0040acbc 	.word	0x0040acbc
  403928:	00407289 	.word	0x00407289

0040392c <tcp_close>:
{
  40392c:	b510      	push	{r4, lr}
  40392e:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  403930:	4808      	ldr	r0, [pc, #32]	; (403954 <tcp_close+0x28>)
  403932:	4b09      	ldr	r3, [pc, #36]	; (403958 <tcp_close+0x2c>)
  403934:	4798      	blx	r3
  tcp_debug_print_state(pcb->state);
  403936:	7e20      	ldrb	r0, [r4, #24]
  403938:	4b08      	ldr	r3, [pc, #32]	; (40395c <tcp_close+0x30>)
  40393a:	4798      	blx	r3
  if (pcb->state != LISTEN) {
  40393c:	7e23      	ldrb	r3, [r4, #24]
  40393e:	2b01      	cmp	r3, #1
  403940:	d003      	beq.n	40394a <tcp_close+0x1e>
    pcb->flags |= TF_RXCLOSED;
  403942:	7fa3      	ldrb	r3, [r4, #30]
  403944:	f043 0310 	orr.w	r3, r3, #16
  403948:	77a3      	strb	r3, [r4, #30]
  return tcp_close_shutdown(pcb, 1);
  40394a:	2101      	movs	r1, #1
  40394c:	4620      	mov	r0, r4
  40394e:	4b04      	ldr	r3, [pc, #16]	; (403960 <tcp_close+0x34>)
  403950:	4798      	blx	r3
}
  403952:	bd10      	pop	{r4, pc}
  403954:	0040ab28 	.word	0x0040ab28
  403958:	00407289 	.word	0x00407289
  40395c:	00403911 	.word	0x00403911
  403960:	00403501 	.word	0x00403501

00403964 <tcp_recv_null>:
{
  403964:	b510      	push	{r4, lr}
  403966:	4608      	mov	r0, r1
  if (p != NULL) {
  403968:	b142      	cbz	r2, 40397c <tcp_recv_null+0x18>
  40396a:	4614      	mov	r4, r2
    tcp_recved(pcb, p->tot_len);
  40396c:	8911      	ldrh	r1, [r2, #8]
  40396e:	4b06      	ldr	r3, [pc, #24]	; (403988 <tcp_recv_null+0x24>)
  403970:	4798      	blx	r3
    pbuf_free(p);
  403972:	4620      	mov	r0, r4
  403974:	4b05      	ldr	r3, [pc, #20]	; (40398c <tcp_recv_null+0x28>)
  403976:	4798      	blx	r3
  return ERR_OK;
  403978:	2000      	movs	r0, #0
  40397a:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
  40397c:	b10b      	cbz	r3, 403982 <tcp_recv_null+0x1e>
  return ERR_OK;
  40397e:	2000      	movs	r0, #0
}
  403980:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
  403982:	4b03      	ldr	r3, [pc, #12]	; (403990 <tcp_recv_null+0x2c>)
  403984:	4798      	blx	r3
  403986:	bd10      	pop	{r4, pc}
  403988:	00402f31 	.word	0x00402f31
  40398c:	00402861 	.word	0x00402861
  403990:	0040392d 	.word	0x0040392d

00403994 <tcp_process_refused_data>:
{
  403994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403996:	4604      	mov	r4, r0
  u8_t refused_flags = pcb->refused_data->flags;
  403998:	6f86      	ldr	r6, [r0, #120]	; 0x78
  40399a:	7b77      	ldrb	r7, [r6, #13]
  pcb->refused_data = NULL;
  40399c:	2300      	movs	r3, #0
  40399e:	6783      	str	r3, [r0, #120]	; 0x78
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  4039a0:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
  4039a4:	b1e5      	cbz	r5, 4039e0 <tcp_process_refused_data+0x4c>
  4039a6:	4632      	mov	r2, r6
  4039a8:	4601      	mov	r1, r0
  4039aa:	6900      	ldr	r0, [r0, #16]
  4039ac:	47a8      	blx	r5
  4039ae:	4605      	mov	r5, r0
  if (err == ERR_OK) {
  4039b0:	b9f5      	cbnz	r5, 4039f0 <tcp_process_refused_data+0x5c>
    if (refused_flags & PBUF_FLAG_TCP_FIN) {
  4039b2:	f017 0f20 	tst.w	r7, #32
  4039b6:	d020      	beq.n	4039fa <tcp_process_refused_data+0x66>
      if (pcb->rcv_wnd != TCP_WND) {
  4039b8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  4039ba:	f640 3268 	movw	r2, #2920	; 0xb68
  4039be:	4293      	cmp	r3, r2
  4039c0:	d001      	beq.n	4039c6 <tcp_process_refused_data+0x32>
        pcb->rcv_wnd++;
  4039c2:	3301      	adds	r3, #1
  4039c4:	85a3      	strh	r3, [r4, #44]	; 0x2c
      TCP_EVENT_CLOSED(pcb, err);
  4039c6:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  4039ca:	b1b6      	cbz	r6, 4039fa <tcp_process_refused_data+0x66>
  4039cc:	2300      	movs	r3, #0
  4039ce:	461a      	mov	r2, r3
  4039d0:	4621      	mov	r1, r4
  4039d2:	6920      	ldr	r0, [r4, #16]
  4039d4:	47b0      	blx	r6
        return ERR_ABRT;
  4039d6:	f110 0f0a 	cmn.w	r0, #10
  4039da:	bf08      	it	eq
  4039dc:	4605      	moveq	r5, r0
  4039de:	e00c      	b.n	4039fa <tcp_process_refused_data+0x66>
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  4039e0:	2300      	movs	r3, #0
  4039e2:	4632      	mov	r2, r6
  4039e4:	4601      	mov	r1, r0
  4039e6:	4618      	mov	r0, r3
  4039e8:	4d05      	ldr	r5, [pc, #20]	; (403a00 <tcp_process_refused_data+0x6c>)
  4039ea:	47a8      	blx	r5
  4039ec:	4605      	mov	r5, r0
  4039ee:	e7df      	b.n	4039b0 <tcp_process_refused_data+0x1c>
  } else if (err == ERR_ABRT) {
  4039f0:	f115 0f0a 	cmn.w	r5, #10
  4039f4:	d001      	beq.n	4039fa <tcp_process_refused_data+0x66>
    pcb->refused_data = refused_data;
  4039f6:	67a6      	str	r6, [r4, #120]	; 0x78
  return ERR_OK;
  4039f8:	2500      	movs	r5, #0
}
  4039fa:	4628      	mov	r0, r5
  4039fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4039fe:	bf00      	nop
  403a00:	00403965 	.word	0x00403965

00403a04 <tcp_fasttmr>:
{
  403a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ++tcp_timer_ctr;
  403a08:	4a1b      	ldr	r2, [pc, #108]	; (403a78 <tcp_fasttmr+0x74>)
  403a0a:	7813      	ldrb	r3, [r2, #0]
  403a0c:	3301      	adds	r3, #1
  403a0e:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
  403a10:	4e1a      	ldr	r6, [pc, #104]	; (403a7c <tcp_fasttmr+0x78>)
    if (pcb->last_timer != tcp_timer_ctr) {
  403a12:	4615      	mov	r5, r2
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
  403a14:	f8df 9074 	ldr.w	r9, [pc, #116]	; 403a8c <tcp_fasttmr+0x88>
  403a18:	f8df 8074 	ldr.w	r8, [pc, #116]	; 403a90 <tcp_fasttmr+0x8c>
  pcb = tcp_active_pcbs;
  403a1c:	6834      	ldr	r4, [r6, #0]
  while(pcb != NULL) {
  403a1e:	b344      	cbz	r4, 403a72 <tcp_fasttmr+0x6e>
    if (pcb->last_timer != tcp_timer_ctr) {
  403a20:	782b      	ldrb	r3, [r5, #0]
  403a22:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
  403a26:	429a      	cmp	r2, r3
  403a28:	d100      	bne.n	403a2c <tcp_fasttmr+0x28>
  403a2a:	e7fe      	b.n	403a2a <tcp_fasttmr+0x26>
      pcb->last_timer = tcp_timer_ctr;
  403a2c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      if (pcb->flags & TF_ACK_DELAY) {
  403a30:	7fa3      	ldrb	r3, [r4, #30]
  403a32:	f013 0f01 	tst.w	r3, #1
  403a36:	d10e      	bne.n	403a56 <tcp_fasttmr+0x52>
      next = pcb->next;
  403a38:	f8d4 a00c 	ldr.w	sl, [r4, #12]
      if (pcb->refused_data != NULL) {
  403a3c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  403a3e:	b143      	cbz	r3, 403a52 <tcp_fasttmr+0x4e>
        tcp_active_pcbs_changed = 0;
  403a40:	4f0f      	ldr	r7, [pc, #60]	; (403a80 <tcp_fasttmr+0x7c>)
  403a42:	2300      	movs	r3, #0
  403a44:	703b      	strb	r3, [r7, #0]
        tcp_process_refused_data(pcb);
  403a46:	4620      	mov	r0, r4
  403a48:	4b0e      	ldr	r3, [pc, #56]	; (403a84 <tcp_fasttmr+0x80>)
  403a4a:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
  403a4c:	783b      	ldrb	r3, [r7, #0]
  403a4e:	2b00      	cmp	r3, #0
  403a50:	d1e4      	bne.n	403a1c <tcp_fasttmr+0x18>
{
  403a52:	4654      	mov	r4, sl
  403a54:	e7e3      	b.n	403a1e <tcp_fasttmr+0x1a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
  403a56:	4640      	mov	r0, r8
  403a58:	47c8      	blx	r9
        tcp_ack_now(pcb);
  403a5a:	7fa3      	ldrb	r3, [r4, #30]
  403a5c:	f043 0302 	orr.w	r3, r3, #2
  403a60:	77a3      	strb	r3, [r4, #30]
        tcp_output(pcb);
  403a62:	4620      	mov	r0, r4
  403a64:	4b08      	ldr	r3, [pc, #32]	; (403a88 <tcp_fasttmr+0x84>)
  403a66:	4798      	blx	r3
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  403a68:	7fa3      	ldrb	r3, [r4, #30]
  403a6a:	f023 0303 	bic.w	r3, r3, #3
  403a6e:	77a3      	strb	r3, [r4, #30]
  403a70:	e7e2      	b.n	403a38 <tcp_fasttmr+0x34>
  403a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403a76:	bf00      	nop
  403a78:	20402629 	.word	0x20402629
  403a7c:	204049cc 	.word	0x204049cc
  403a80:	204049c8 	.word	0x204049c8
  403a84:	00403995 	.word	0x00403995
  403a88:	0040576d 	.word	0x0040576d
  403a8c:	00407289 	.word	0x00407289
  403a90:	0040acc8 	.word	0x0040acc8

00403a94 <tcp_tmr>:
{
  403a94:	b508      	push	{r3, lr}
  tcp_fasttmr();
  403a96:	4b07      	ldr	r3, [pc, #28]	; (403ab4 <tcp_tmr+0x20>)
  403a98:	4798      	blx	r3
  if (++tcp_timer & 1) {
  403a9a:	4a07      	ldr	r2, [pc, #28]	; (403ab8 <tcp_tmr+0x24>)
  403a9c:	7813      	ldrb	r3, [r2, #0]
  403a9e:	3301      	adds	r3, #1
  403aa0:	b2db      	uxtb	r3, r3
  403aa2:	7013      	strb	r3, [r2, #0]
  403aa4:	f013 0f01 	tst.w	r3, #1
  403aa8:	d100      	bne.n	403aac <tcp_tmr+0x18>
  403aaa:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
  403aac:	4b03      	ldr	r3, [pc, #12]	; (403abc <tcp_tmr+0x28>)
  403aae:	4798      	blx	r3
}
  403ab0:	e7fb      	b.n	403aaa <tcp_tmr+0x16>
  403ab2:	bf00      	nop
  403ab4:	00403a05 	.word	0x00403a05
  403ab8:	20402628 	.word	0x20402628
  403abc:	004030b5 	.word	0x004030b5

00403ac0 <tcp_debug_print_flags>:
 *
 * @param flags tcp flags, all active flags are printed
 */
void
tcp_debug_print_flags(u8_t flags)
{
  403ac0:	b510      	push	{r4, lr}
  403ac2:	4604      	mov	r4, r0
  if (flags & TCP_FIN) {
  403ac4:	f010 0f01 	tst.w	r0, #1
  403ac8:	d118      	bne.n	403afc <tcp_debug_print_flags+0x3c>
    LWIP_DEBUGF(TCP_DEBUG, ("FIN "));
  }
  if (flags & TCP_SYN) {
  403aca:	f014 0f02 	tst.w	r4, #2
  403ace:	d119      	bne.n	403b04 <tcp_debug_print_flags+0x44>
    LWIP_DEBUGF(TCP_DEBUG, ("SYN "));
  }
  if (flags & TCP_RST) {
  403ad0:	f014 0f04 	tst.w	r4, #4
  403ad4:	d11a      	bne.n	403b0c <tcp_debug_print_flags+0x4c>
    LWIP_DEBUGF(TCP_DEBUG, ("RST "));
  }
  if (flags & TCP_PSH) {
  403ad6:	f014 0f08 	tst.w	r4, #8
  403ada:	d11b      	bne.n	403b14 <tcp_debug_print_flags+0x54>
    LWIP_DEBUGF(TCP_DEBUG, ("PSH "));
  }
  if (flags & TCP_ACK) {
  403adc:	f014 0f10 	tst.w	r4, #16
  403ae0:	d11c      	bne.n	403b1c <tcp_debug_print_flags+0x5c>
    LWIP_DEBUGF(TCP_DEBUG, ("ACK "));
  }
  if (flags & TCP_URG) {
  403ae2:	f014 0f20 	tst.w	r4, #32
  403ae6:	d11d      	bne.n	403b24 <tcp_debug_print_flags+0x64>
    LWIP_DEBUGF(TCP_DEBUG, ("URG "));
  }
  if (flags & TCP_ECE) {
  403ae8:	f014 0f40 	tst.w	r4, #64	; 0x40
  403aec:	d11e      	bne.n	403b2c <tcp_debug_print_flags+0x6c>
    LWIP_DEBUGF(TCP_DEBUG, ("ECE "));
  }
  if (flags & TCP_CWR) {
  403aee:	f014 0f80 	tst.w	r4, #128	; 0x80
  403af2:	d11f      	bne.n	403b34 <tcp_debug_print_flags+0x74>
    LWIP_DEBUGF(TCP_DEBUG, ("CWR "));
  }
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));
  403af4:	4811      	ldr	r0, [pc, #68]	; (403b3c <tcp_debug_print_flags+0x7c>)
  403af6:	4b12      	ldr	r3, [pc, #72]	; (403b40 <tcp_debug_print_flags+0x80>)
  403af8:	4798      	blx	r3
  403afa:	bd10      	pop	{r4, pc}
    LWIP_DEBUGF(TCP_DEBUG, ("FIN "));
  403afc:	4811      	ldr	r0, [pc, #68]	; (403b44 <tcp_debug_print_flags+0x84>)
  403afe:	4b10      	ldr	r3, [pc, #64]	; (403b40 <tcp_debug_print_flags+0x80>)
  403b00:	4798      	blx	r3
  403b02:	e7e2      	b.n	403aca <tcp_debug_print_flags+0xa>
    LWIP_DEBUGF(TCP_DEBUG, ("SYN "));
  403b04:	4810      	ldr	r0, [pc, #64]	; (403b48 <tcp_debug_print_flags+0x88>)
  403b06:	4b0e      	ldr	r3, [pc, #56]	; (403b40 <tcp_debug_print_flags+0x80>)
  403b08:	4798      	blx	r3
  403b0a:	e7e1      	b.n	403ad0 <tcp_debug_print_flags+0x10>
    LWIP_DEBUGF(TCP_DEBUG, ("RST "));
  403b0c:	480f      	ldr	r0, [pc, #60]	; (403b4c <tcp_debug_print_flags+0x8c>)
  403b0e:	4b0c      	ldr	r3, [pc, #48]	; (403b40 <tcp_debug_print_flags+0x80>)
  403b10:	4798      	blx	r3
  403b12:	e7e0      	b.n	403ad6 <tcp_debug_print_flags+0x16>
    LWIP_DEBUGF(TCP_DEBUG, ("PSH "));
  403b14:	480e      	ldr	r0, [pc, #56]	; (403b50 <tcp_debug_print_flags+0x90>)
  403b16:	4b0a      	ldr	r3, [pc, #40]	; (403b40 <tcp_debug_print_flags+0x80>)
  403b18:	4798      	blx	r3
  403b1a:	e7df      	b.n	403adc <tcp_debug_print_flags+0x1c>
    LWIP_DEBUGF(TCP_DEBUG, ("ACK "));
  403b1c:	480d      	ldr	r0, [pc, #52]	; (403b54 <tcp_debug_print_flags+0x94>)
  403b1e:	4b08      	ldr	r3, [pc, #32]	; (403b40 <tcp_debug_print_flags+0x80>)
  403b20:	4798      	blx	r3
  403b22:	e7de      	b.n	403ae2 <tcp_debug_print_flags+0x22>
    LWIP_DEBUGF(TCP_DEBUG, ("URG "));
  403b24:	480c      	ldr	r0, [pc, #48]	; (403b58 <tcp_debug_print_flags+0x98>)
  403b26:	4b06      	ldr	r3, [pc, #24]	; (403b40 <tcp_debug_print_flags+0x80>)
  403b28:	4798      	blx	r3
  403b2a:	e7dd      	b.n	403ae8 <tcp_debug_print_flags+0x28>
    LWIP_DEBUGF(TCP_DEBUG, ("ECE "));
  403b2c:	480b      	ldr	r0, [pc, #44]	; (403b5c <tcp_debug_print_flags+0x9c>)
  403b2e:	4b04      	ldr	r3, [pc, #16]	; (403b40 <tcp_debug_print_flags+0x80>)
  403b30:	4798      	blx	r3
  403b32:	e7dc      	b.n	403aee <tcp_debug_print_flags+0x2e>
    LWIP_DEBUGF(TCP_DEBUG, ("CWR "));
  403b34:	480a      	ldr	r0, [pc, #40]	; (403b60 <tcp_debug_print_flags+0xa0>)
  403b36:	4b02      	ldr	r3, [pc, #8]	; (403b40 <tcp_debug_print_flags+0x80>)
  403b38:	4798      	blx	r3
  403b3a:	e7db      	b.n	403af4 <tcp_debug_print_flags+0x34>
  403b3c:	0040ac78 	.word	0x0040ac78
  403b40:	00407289 	.word	0x00407289
  403b44:	0040ac7c 	.word	0x0040ac7c
  403b48:	0040ac84 	.word	0x0040ac84
  403b4c:	0040ac8c 	.word	0x0040ac8c
  403b50:	0040ac94 	.word	0x0040ac94
  403b54:	0040ac9c 	.word	0x0040ac9c
  403b58:	0040aca4 	.word	0x0040aca4
  403b5c:	0040acac 	.word	0x0040acac
  403b60:	0040acb4 	.word	0x0040acb4

00403b64 <tcp_debug_print>:
{
  403b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b68:	b08b      	sub	sp, #44	; 0x2c
  403b6a:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("TCP header:\n"));
  403b6c:	4834      	ldr	r0, [pc, #208]	; (403c40 <tcp_debug_print+0xdc>)
  403b6e:	4d35      	ldr	r5, [pc, #212]	; (403c44 <tcp_debug_print+0xe0>)
  403b70:	47a8      	blx	r5
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
  403b72:	4f35      	ldr	r7, [pc, #212]	; (403c48 <tcp_debug_print+0xe4>)
  403b74:	4638      	mov	r0, r7
  403b76:	47a8      	blx	r5
  LWIP_DEBUGF(TCP_DEBUG, ("|    %5"U16_F"      |    %5"U16_F"      | (src port, dest port)\n",
  403b78:	8820      	ldrh	r0, [r4, #0]
  403b7a:	4e34      	ldr	r6, [pc, #208]	; (403c4c <tcp_debug_print+0xe8>)
  403b7c:	47b0      	blx	r6
  403b7e:	4680      	mov	r8, r0
  403b80:	8860      	ldrh	r0, [r4, #2]
  403b82:	47b0      	blx	r6
  403b84:	4602      	mov	r2, r0
  403b86:	4641      	mov	r1, r8
  403b88:	4831      	ldr	r0, [pc, #196]	; (403c50 <tcp_debug_print+0xec>)
  403b8a:	47a8      	blx	r5
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
  403b8c:	4638      	mov	r0, r7
  403b8e:	47a8      	blx	r5
  LWIP_DEBUGF(TCP_DEBUG, ("|           %010"U32_F"          | (seq no)\n",
  403b90:	6860      	ldr	r0, [r4, #4]
  403b92:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 403c6c <tcp_debug_print+0x108>
  403b96:	47c0      	blx	r8
  403b98:	4601      	mov	r1, r0
  403b9a:	482e      	ldr	r0, [pc, #184]	; (403c54 <tcp_debug_print+0xf0>)
  403b9c:	47a8      	blx	r5
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
  403b9e:	4638      	mov	r0, r7
  403ba0:	47a8      	blx	r5
  LWIP_DEBUGF(TCP_DEBUG, ("|           %010"U32_F"          | (ack no)\n",
  403ba2:	68a0      	ldr	r0, [r4, #8]
  403ba4:	47c0      	blx	r8
  403ba6:	4601      	mov	r1, r0
  403ba8:	482b      	ldr	r0, [pc, #172]	; (403c58 <tcp_debug_print+0xf4>)
  403baa:	47a8      	blx	r5
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
  403bac:	4638      	mov	r0, r7
  403bae:	47a8      	blx	r5
  LWIP_DEBUGF(TCP_DEBUG, ("| %2"U16_F" |   |%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"|     %5"U16_F"     | (hdrlen, flags (",
  403bb0:	89a0      	ldrh	r0, [r4, #12]
  403bb2:	47b0      	blx	r6
  403bb4:	9007      	str	r0, [sp, #28]
  403bb6:	89a0      	ldrh	r0, [r4, #12]
  403bb8:	47b0      	blx	r6
  403bba:	9008      	str	r0, [sp, #32]
  403bbc:	89a0      	ldrh	r0, [r4, #12]
  403bbe:	47b0      	blx	r6
  403bc0:	9009      	str	r0, [sp, #36]	; 0x24
  403bc2:	89a0      	ldrh	r0, [r4, #12]
  403bc4:	47b0      	blx	r6
  403bc6:	4680      	mov	r8, r0
  403bc8:	89a0      	ldrh	r0, [r4, #12]
  403bca:	47b0      	blx	r6
  403bcc:	4681      	mov	r9, r0
  403bce:	89a0      	ldrh	r0, [r4, #12]
  403bd0:	47b0      	blx	r6
  403bd2:	4682      	mov	sl, r0
  403bd4:	89a0      	ldrh	r0, [r4, #12]
  403bd6:	47b0      	blx	r6
  403bd8:	4683      	mov	fp, r0
  403bda:	89e0      	ldrh	r0, [r4, #14]
  403bdc:	47b0      	blx	r6
  403bde:	9004      	str	r0, [sp, #16]
  403be0:	f00b 0301 	and.w	r3, fp, #1
  403be4:	9303      	str	r3, [sp, #12]
  403be6:	f3ca 0340 	ubfx	r3, sl, #1, #1
  403bea:	9302      	str	r3, [sp, #8]
  403bec:	f3c9 0380 	ubfx	r3, r9, #2, #1
  403bf0:	9301      	str	r3, [sp, #4]
  403bf2:	f3c8 03c0 	ubfx	r3, r8, #3, #1
  403bf6:	9300      	str	r3, [sp, #0]
  403bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403bfa:	f3c3 1300 	ubfx	r3, r3, #4, #1
  403bfe:	9a08      	ldr	r2, [sp, #32]
  403c00:	f3c2 1240 	ubfx	r2, r2, #5, #1
  403c04:	9907      	ldr	r1, [sp, #28]
  403c06:	f3c1 310f 	ubfx	r1, r1, #12, #16
  403c0a:	4814      	ldr	r0, [pc, #80]	; (403c5c <tcp_debug_print+0xf8>)
  403c0c:	47a8      	blx	r5
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  403c0e:	89a0      	ldrh	r0, [r4, #12]
  403c10:	47b0      	blx	r6
  403c12:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  403c16:	4b12      	ldr	r3, [pc, #72]	; (403c60 <tcp_debug_print+0xfc>)
  403c18:	4798      	blx	r3
  LWIP_DEBUGF(TCP_DEBUG, ("), win)\n"));
  403c1a:	4812      	ldr	r0, [pc, #72]	; (403c64 <tcp_debug_print+0x100>)
  403c1c:	47a8      	blx	r5
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
  403c1e:	4638      	mov	r0, r7
  403c20:	47a8      	blx	r5
  LWIP_DEBUGF(TCP_DEBUG, ("|    0x%04"X16_F"     |     %5"U16_F"     | (chksum, urgp)\n",
  403c22:	8a20      	ldrh	r0, [r4, #16]
  403c24:	47b0      	blx	r6
  403c26:	4680      	mov	r8, r0
  403c28:	8a60      	ldrh	r0, [r4, #18]
  403c2a:	47b0      	blx	r6
  403c2c:	4602      	mov	r2, r0
  403c2e:	4641      	mov	r1, r8
  403c30:	480d      	ldr	r0, [pc, #52]	; (403c68 <tcp_debug_print+0x104>)
  403c32:	47a8      	blx	r5
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
  403c34:	4638      	mov	r0, r7
  403c36:	47a8      	blx	r5
}
  403c38:	b00b      	add	sp, #44	; 0x2c
  403c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c3e:	bf00      	nop
  403c40:	0040ab40 	.word	0x0040ab40
  403c44:	00407289 	.word	0x00407289
  403c48:	0040ab50 	.word	0x0040ab50
  403c4c:	00401387 	.word	0x00401387
  403c50:	0040ab74 	.word	0x0040ab74
  403c54:	0040abac 	.word	0x0040abac
  403c58:	0040abd4 	.word	0x0040abd4
  403c5c:	0040abfc 	.word	0x0040abfc
  403c60:	00403ac1 	.word	0x00403ac1
  403c64:	0040ac3c 	.word	0x0040ac3c
  403c68:	0040ac48 	.word	0x0040ac48
  403c6c:	004013a9 	.word	0x004013a9

00403c70 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
  403c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403c72:	4605      	mov	r5, r0
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
  403c74:	4b22      	ldr	r3, [pc, #136]	; (403d00 <tcp_parseopt+0x90>)
  403c76:	681c      	ldr	r4, [r3, #0]

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
  403c78:	89a0      	ldrh	r0, [r4, #12]
  403c7a:	4b22      	ldr	r3, [pc, #136]	; (403d04 <tcp_parseopt+0x94>)
  403c7c:	4798      	blx	r3
  403c7e:	f3c0 300f 	ubfx	r0, r0, #12, #16
  403c82:	2805      	cmp	r0, #5
  403c84:	d800      	bhi.n	403c88 <tcp_parseopt+0x18>
  403c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
  403c88:	4b1d      	ldr	r3, [pc, #116]	; (403d00 <tcp_parseopt+0x90>)
  403c8a:	681b      	ldr	r3, [r3, #0]
  403c8c:	8998      	ldrh	r0, [r3, #12]
  403c8e:	4b1d      	ldr	r3, [pc, #116]	; (403d04 <tcp_parseopt+0x94>)
  403c90:	4798      	blx	r3
  403c92:	0b06      	lsrs	r6, r0, #12
  403c94:	3e05      	subs	r6, #5
  403c96:	00b6      	lsls	r6, r6, #2
  403c98:	b2b6      	uxth	r6, r6
    for (c = 0; c < max_c; ) {
  403c9a:	2e00      	cmp	r6, #0
  403c9c:	d0f3      	beq.n	403c86 <tcp_parseopt+0x16>
  opts = (u8_t *)tcphdr + TCP_HLEN;
  403c9e:	f104 0214 	add.w	r2, r4, #20
  403ca2:	2300      	movs	r3, #0
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  403ca4:	f240 57b3 	movw	r7, #1459	; 0x5b3
  403ca8:	f240 54b4 	movw	r4, #1460	; 0x5b4
  403cac:	e003      	b.n	403cb6 <tcp_parseopt+0x46>
        ++c;
  403cae:	3301      	adds	r3, #1
  403cb0:	b29b      	uxth	r3, r3
    for (c = 0; c < max_c; ) {
  403cb2:	429e      	cmp	r6, r3
  403cb4:	d9e7      	bls.n	403c86 <tcp_parseopt+0x16>
      opt = opts[c];
  403cb6:	4618      	mov	r0, r3
      switch (opt) {
  403cb8:	5cd1      	ldrb	r1, [r2, r3]
  403cba:	2901      	cmp	r1, #1
  403cbc:	d0f7      	beq.n	403cae <tcp_parseopt+0x3e>
  403cbe:	2900      	cmp	r1, #0
  403cc0:	d0e1      	beq.n	403c86 <tcp_parseopt+0x16>
  403cc2:	2902      	cmp	r1, #2
  403cc4:	d006      	beq.n	403cd4 <tcp_parseopt+0x64>
        c += 0x0A;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
  403cc6:	4410      	add	r0, r2
  403cc8:	7841      	ldrb	r1, [r0, #1]
  403cca:	2900      	cmp	r1, #0
  403ccc:	d0db      	beq.n	403c86 <tcp_parseopt+0x16>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        c += opts[c + 1];
  403cce:	440b      	add	r3, r1
  403cd0:	b29b      	uxth	r3, r3
  403cd2:	e7ee      	b.n	403cb2 <tcp_parseopt+0x42>
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
  403cd4:	18d1      	adds	r1, r2, r3
  403cd6:	7849      	ldrb	r1, [r1, #1]
  403cd8:	2904      	cmp	r1, #4
  403cda:	d1d4      	bne.n	403c86 <tcp_parseopt+0x16>
  403cdc:	1d19      	adds	r1, r3, #4
  403cde:	42b1      	cmp	r1, r6
  403ce0:	dcd1      	bgt.n	403c86 <tcp_parseopt+0x16>
        mss = (opts[c + 2] << 8) | opts[c + 3];
  403ce2:	4410      	add	r0, r2
  403ce4:	f890 e002 	ldrb.w	lr, [r0, #2]
  403ce8:	78c1      	ldrb	r1, [r0, #3]
  403cea:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  403cee:	1e48      	subs	r0, r1, #1
  403cf0:	b280      	uxth	r0, r0
  403cf2:	42b8      	cmp	r0, r7
  403cf4:	bf88      	it	hi
  403cf6:	4621      	movhi	r1, r4
  403cf8:	86e9      	strh	r1, [r5, #54]	; 0x36
        c += 0x04;
  403cfa:	3304      	adds	r3, #4
  403cfc:	b29b      	uxth	r3, r3
        break;
  403cfe:	e7d8      	b.n	403cb2 <tcp_parseopt+0x42>
  403d00:	20402654 	.word	0x20402654
  403d04:	00401387 	.word	0x00401387

00403d08 <tcp_oos_insert_segment>:
{
  403d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403d0c:	4605      	mov	r5, r0
  403d0e:	4689      	mov	r9, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  403d10:	6903      	ldr	r3, [r0, #16]
  403d12:	8998      	ldrh	r0, [r3, #12]
  403d14:	4b29      	ldr	r3, [pc, #164]	; (403dbc <tcp_oos_insert_segment+0xb4>)
  403d16:	4798      	blx	r3
  403d18:	f010 0f01 	tst.w	r0, #1
  403d1c:	d127      	bne.n	403d6e <tcp_oos_insert_segment+0x66>
    while (next &&
  403d1e:	f1b9 0f00 	cmp.w	r9, #0
  403d22:	d049      	beq.n	403db8 <tcp_oos_insert_segment+0xb0>
           TCP_SEQ_GEQ((seqno + cseg->len),
  403d24:	f8d9 2010 	ldr.w	r2, [r9, #16]
  403d28:	892b      	ldrh	r3, [r5, #8]
  403d2a:	6851      	ldr	r1, [r2, #4]
  403d2c:	1a5b      	subs	r3, r3, r1
  403d2e:	4924      	ldr	r1, [pc, #144]	; (403dc0 <tcp_oos_insert_segment+0xb8>)
  403d30:	6809      	ldr	r1, [r1, #0]
  403d32:	440b      	add	r3, r1
  403d34:	f8b9 1008 	ldrh.w	r1, [r9, #8]
  403d38:	1a5b      	subs	r3, r3, r1
    while (next &&
  403d3a:	2b00      	cmp	r3, #0
  403d3c:	db04      	blt.n	403d48 <tcp_oos_insert_segment+0x40>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  403d3e:	4f1f      	ldr	r7, [pc, #124]	; (403dbc <tcp_oos_insert_segment+0xb4>)
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  403d40:	f8df 808c 	ldr.w	r8, [pc, #140]	; 403dd0 <tcp_oos_insert_segment+0xc8>
      tcp_seg_free(old_seg);
  403d44:	4e1f      	ldr	r6, [pc, #124]	; (403dc4 <tcp_oos_insert_segment+0xbc>)
  403d46:	e028      	b.n	403d9a <tcp_oos_insert_segment+0x92>
    while (next &&
  403d48:	464c      	mov	r4, r9
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
  403d4a:	4b1d      	ldr	r3, [pc, #116]	; (403dc0 <tcp_oos_insert_segment+0xb8>)
  403d4c:	6819      	ldr	r1, [r3, #0]
  403d4e:	6923      	ldr	r3, [r4, #16]
  403d50:	685a      	ldr	r2, [r3, #4]
  403d52:	892b      	ldrh	r3, [r5, #8]
  403d54:	440b      	add	r3, r1
  403d56:	1a9b      	subs	r3, r3, r2
    if (next &&
  403d58:	2b00      	cmp	r3, #0
  403d5a:	dd05      	ble.n	403d68 <tcp_oos_insert_segment+0x60>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
  403d5c:	1a52      	subs	r2, r2, r1
  403d5e:	b291      	uxth	r1, r2
  403d60:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
  403d62:	6868      	ldr	r0, [r5, #4]
  403d64:	4b18      	ldr	r3, [pc, #96]	; (403dc8 <tcp_oos_insert_segment+0xc0>)
  403d66:	4798      	blx	r3
  cseg->next = next;
  403d68:	602c      	str	r4, [r5, #0]
}
  403d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    tcp_segs_free(next);
  403d6e:	4648      	mov	r0, r9
  403d70:	4b16      	ldr	r3, [pc, #88]	; (403dcc <tcp_oos_insert_segment+0xc4>)
  403d72:	4798      	blx	r3
    next = NULL;
  403d74:	2400      	movs	r4, #0
  403d76:	e7f7      	b.n	403d68 <tcp_oos_insert_segment+0x60>
      next = next->next;
  403d78:	f8d9 4000 	ldr.w	r4, [r9]
      tcp_seg_free(old_seg);
  403d7c:	4648      	mov	r0, r9
  403d7e:	47b0      	blx	r6
    while (next &&
  403d80:	b1d4      	cbz	r4, 403db8 <tcp_oos_insert_segment+0xb0>
           TCP_SEQ_GEQ((seqno + cseg->len),
  403d82:	6922      	ldr	r2, [r4, #16]
  403d84:	892b      	ldrh	r3, [r5, #8]
  403d86:	490e      	ldr	r1, [pc, #56]	; (403dc0 <tcp_oos_insert_segment+0xb8>)
  403d88:	6809      	ldr	r1, [r1, #0]
  403d8a:	440b      	add	r3, r1
  403d8c:	6851      	ldr	r1, [r2, #4]
  403d8e:	1a5b      	subs	r3, r3, r1
  403d90:	8921      	ldrh	r1, [r4, #8]
  403d92:	1a5b      	subs	r3, r3, r1
    while (next &&
  403d94:	2b00      	cmp	r3, #0
  403d96:	dbd8      	blt.n	403d4a <tcp_oos_insert_segment+0x42>
      next = next->next;
  403d98:	46a1      	mov	r9, r4
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  403d9a:	8990      	ldrh	r0, [r2, #12]
  403d9c:	47b8      	blx	r7
  403d9e:	f010 0f01 	tst.w	r0, #1
  403da2:	d0e9      	beq.n	403d78 <tcp_oos_insert_segment+0x70>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  403da4:	f8d5 a010 	ldr.w	sl, [r5, #16]
  403da8:	f8ba 400c 	ldrh.w	r4, [sl, #12]
  403dac:	2001      	movs	r0, #1
  403dae:	47c0      	blx	r8
  403db0:	4320      	orrs	r0, r4
  403db2:	f8aa 000c 	strh.w	r0, [sl, #12]
  403db6:	e7df      	b.n	403d78 <tcp_oos_insert_segment+0x70>
    next = NULL;
  403db8:	2400      	movs	r4, #0
  403dba:	e7d5      	b.n	403d68 <tcp_oos_insert_segment+0x60>
  403dbc:	00401387 	.word	0x00401387
  403dc0:	20402650 	.word	0x20402650
  403dc4:	00402f89 	.word	0x00402f89
  403dc8:	00402a01 	.word	0x00402a01
  403dcc:	00402fb1 	.word	0x00402fb1
  403dd0:	0040137d 	.word	0x0040137d

00403dd4 <tcp_receive>:
{
  403dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403dd8:	4604      	mov	r4, r0
  if (flags & TCP_ACK) {
  403dda:	4baa      	ldr	r3, [pc, #680]	; (404084 <tcp_receive+0x2b0>)
  403ddc:	781b      	ldrb	r3, [r3, #0]
  403dde:	f013 0f10 	tst.w	r3, #16
  403de2:	f000 816b 	beq.w	4040bc <tcp_receive+0x2e8>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  403de6:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
  403dea:	6d80      	ldr	r0, [r0, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  403dec:	6d62      	ldr	r2, [r4, #84]	; 0x54
  403dee:	4ba6      	ldr	r3, [pc, #664]	; (404088 <tcp_receive+0x2b4>)
  403df0:	681b      	ldr	r3, [r3, #0]
  403df2:	1ad1      	subs	r1, r2, r3
  403df4:	2900      	cmp	r1, #0
  403df6:	db28      	blt.n	403e4a <tcp_receive+0x76>
  403df8:	429a      	cmp	r2, r3
  403dfa:	d01b      	beq.n	403e34 <tcp_receive+0x60>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
  403dfc:	4aa3      	ldr	r2, [pc, #652]	; (40408c <tcp_receive+0x2b8>)
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  403dfe:	6812      	ldr	r2, [r2, #0]
  403e00:	4290      	cmp	r0, r2
  403e02:	d01d      	beq.n	403e40 <tcp_receive+0x6c>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
  403e04:	4ba1      	ldr	r3, [pc, #644]	; (40408c <tcp_receive+0x2b8>)
  403e06:	681a      	ldr	r2, [r3, #0]
  403e08:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403e0a:	1ad1      	subs	r1, r2, r3
  403e0c:	2900      	cmp	r1, #0
  403e0e:	dd41      	ble.n	403e94 <tcp_receive+0xc0>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)){
  403e10:	2901      	cmp	r1, #1
  403e12:	d403      	bmi.n	403e1c <tcp_receive+0x48>
  403e14:	6d21      	ldr	r1, [r4, #80]	; 0x50
  403e16:	1a51      	subs	r1, r2, r1
  403e18:	2900      	cmp	r1, #0
  403e1a:	dd6e      	ble.n	403efa <tcp_receive+0x126>
      pcb->acked = 0;
  403e1c:	2300      	movs	r3, #0
  403e1e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    while (pcb->unsent != NULL &&
  403e22:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  403e24:	2b00      	cmp	r3, #0
  403e26:	f000 8141 	beq.w	4040ac <tcp_receive+0x2d8>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
  403e2a:	4e98      	ldr	r6, [pc, #608]	; (40408c <tcp_receive+0x2b8>)
  403e2c:	f8df 8278 	ldr.w	r8, [pc, #632]	; 4040a8 <tcp_receive+0x2d4>
  403e30:	4f97      	ldr	r7, [pc, #604]	; (404090 <tcp_receive+0x2bc>)
  403e32:	e0f8      	b.n	404026 <tcp_receive+0x252>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  403e34:	4a95      	ldr	r2, [pc, #596]	; (40408c <tcp_receive+0x2b8>)
  403e36:	6812      	ldr	r2, [r2, #0]
  403e38:	1a82      	subs	r2, r0, r2
  403e3a:	2a00      	cmp	r2, #0
  403e3c:	dade      	bge.n	403dfc <tcp_receive+0x28>
  403e3e:	e004      	b.n	403e4a <tcp_receive+0x76>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
  403e40:	4a94      	ldr	r2, [pc, #592]	; (404094 <tcp_receive+0x2c0>)
  403e42:	6812      	ldr	r2, [r2, #0]
  403e44:	89d2      	ldrh	r2, [r2, #14]
  403e46:	42aa      	cmp	r2, r5
  403e48:	d9dc      	bls.n	403e04 <tcp_receive+0x30>
      pcb->snd_wnd = tcphdr->wnd;
  403e4a:	4a92      	ldr	r2, [pc, #584]	; (404094 <tcp_receive+0x2c0>)
  403e4c:	6812      	ldr	r2, [r2, #0]
  403e4e:	89d1      	ldrh	r1, [r2, #14]
  403e50:	b28e      	uxth	r6, r1
  403e52:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < tcphdr->wnd) {
  403e56:	89d2      	ldrh	r2, [r2, #14]
  403e58:	b291      	uxth	r1, r2
  403e5a:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
  403e5e:	428f      	cmp	r7, r1
        pcb->snd_wnd_max = tcphdr->wnd;
  403e60:	bf38      	it	cc
  403e62:	f8a4 2062 	strhcc.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
  403e66:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->snd_wl2 = ackno;
  403e68:	4b88      	ldr	r3, [pc, #544]	; (40408c <tcp_receive+0x2b8>)
  403e6a:	681b      	ldr	r3, [r3, #0]
  403e6c:	65a3      	str	r3, [r4, #88]	; 0x58
      if (pcb->snd_wnd == 0) {
  403e6e:	b94e      	cbnz	r6, 403e84 <tcp_receive+0xb0>
        if (pcb->persist_backoff == 0) {
  403e70:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
  403e74:	2b00      	cmp	r3, #0
  403e76:	d1c5      	bne.n	403e04 <tcp_receive+0x30>
          pcb->persist_cnt = 0;
  403e78:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
  403e7c:	2301      	movs	r3, #1
  403e7e:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  403e82:	e7bf      	b.n	403e04 <tcp_receive+0x30>
      } else if (pcb->persist_backoff > 0) {
  403e84:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
  403e88:	2b00      	cmp	r3, #0
  403e8a:	d0bb      	beq.n	403e04 <tcp_receive+0x30>
          pcb->persist_backoff = 0;
  403e8c:	2300      	movs	r3, #0
  403e8e:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  403e92:	e7b7      	b.n	403e04 <tcp_receive+0x30>
      pcb->acked = 0;
  403e94:	2100      	movs	r1, #0
  403e96:	f8a4 1064 	strh.w	r1, [r4, #100]	; 0x64
      if (tcplen == 0) {
  403e9a:	497f      	ldr	r1, [pc, #508]	; (404098 <tcp_receive+0x2c4>)
  403e9c:	8809      	ldrh	r1, [r1, #0]
  403e9e:	b931      	cbnz	r1, 403eae <tcp_receive+0xda>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  403ea0:	4428      	add	r0, r5
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
  403ea2:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
  403ea6:	6da5      	ldr	r5, [r4, #88]	; 0x58
  403ea8:	4429      	add	r1, r5
  403eaa:	4288      	cmp	r0, r1
  403eac:	d003      	beq.n	403eb6 <tcp_receive+0xe2>
        pcb->dupacks = 0;
  403eae:	2300      	movs	r3, #0
  403eb0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  403eb4:	e7b5      	b.n	403e22 <tcp_receive+0x4e>
          if (pcb->rtime >= 0) {
  403eb6:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
            if (pcb->lastack == ackno) {
  403eb8:	f411 4f00 	tst.w	r1, #32768	; 0x8000
  403ebc:	d1f7      	bne.n	403eae <tcp_receive+0xda>
  403ebe:	429a      	cmp	r2, r3
  403ec0:	d1f5      	bne.n	403eae <tcp_receive+0xda>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
  403ec2:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
  403ec6:	1c53      	adds	r3, r2, #1
  403ec8:	b2db      	uxtb	r3, r3
  403eca:	429a      	cmp	r2, r3
                ++pcb->dupacks;
  403ecc:	bf38      	it	cc
  403ece:	f884 3047 	strbcc.w	r3, [r4, #71]	; 0x47
              if (pcb->dupacks > 3) {
  403ed2:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
  403ed6:	2b03      	cmp	r3, #3
  403ed8:	d909      	bls.n	403eee <tcp_receive+0x11a>
                if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  403eda:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
  403ede:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  403ee0:	4413      	add	r3, r2
  403ee2:	b29b      	uxth	r3, r3
  403ee4:	429a      	cmp	r2, r3
  403ee6:	d29c      	bcs.n	403e22 <tcp_receive+0x4e>
                  pcb->cwnd += pcb->mss;
  403ee8:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  403eec:	e799      	b.n	403e22 <tcp_receive+0x4e>
              } else if (pcb->dupacks == 3) {
  403eee:	2b03      	cmp	r3, #3
  403ef0:	d197      	bne.n	403e22 <tcp_receive+0x4e>
                tcp_rexmit_fast(pcb);
  403ef2:	4620      	mov	r0, r4
  403ef4:	4b69      	ldr	r3, [pc, #420]	; (40409c <tcp_receive+0x2c8>)
  403ef6:	4798      	blx	r3
  403ef8:	e793      	b.n	403e22 <tcp_receive+0x4e>
      if (pcb->flags & TF_INFR) {
  403efa:	7fa1      	ldrb	r1, [r4, #30]
  403efc:	f011 0f04 	tst.w	r1, #4
  403f00:	d006      	beq.n	403f10 <tcp_receive+0x13c>
        pcb->flags &= ~TF_INFR;
  403f02:	f021 0104 	bic.w	r1, r1, #4
  403f06:	77a1      	strb	r1, [r4, #30]
        pcb->cwnd = pcb->ssthresh;
  403f08:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
  403f0c:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
      pcb->nrtx = 0;
  403f10:	2000      	movs	r0, #0
  403f12:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  403f16:	f9b4 5040 	ldrsh.w	r5, [r4, #64]	; 0x40
  403f1a:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
  403f1e:	eb01 01e5 	add.w	r1, r1, r5, asr #3
  403f22:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
      pcb->acked = (u16_t)(ackno - pcb->lastack);
  403f26:	1ad3      	subs	r3, r2, r3
  403f28:	b29b      	uxth	r3, r3
  403f2a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      pcb->snd_buf += pcb->acked;
  403f2e:	f8b4 1066 	ldrh.w	r1, [r4, #102]	; 0x66
  403f32:	440b      	add	r3, r1
  403f34:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
      pcb->dupacks = 0;
  403f38:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
      pcb->lastack = ackno;
  403f3c:	64a2      	str	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
  403f3e:	7e23      	ldrb	r3, [r4, #24]
  403f40:	2b03      	cmp	r3, #3
  403f42:	d90c      	bls.n	403f5e <tcp_receive+0x18a>
        if (pcb->cwnd < pcb->ssthresh) {
  403f44:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
  403f48:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
  403f4c:	4293      	cmp	r3, r2
  403f4e:	d90e      	bls.n	403f6e <tcp_receive+0x19a>
          if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  403f50:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  403f52:	4413      	add	r3, r2
  403f54:	b29b      	uxth	r3, r3
  403f56:	429a      	cmp	r2, r3
            pcb->cwnd += pcb->mss;
  403f58:	bf38      	it	cc
  403f5a:	f8a4 304c 	strhcc.w	r3, [r4, #76]	; 0x4c
      while (pcb->unacked != NULL &&
  403f5e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  403f60:	2b00      	cmp	r3, #0
  403f62:	d04b      	beq.n	403ffc <tcp_receive+0x228>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
  403f64:	f8df 8140 	ldr.w	r8, [pc, #320]	; 4040a8 <tcp_receive+0x2d4>
  403f68:	4e49      	ldr	r6, [pc, #292]	; (404090 <tcp_receive+0x2bc>)
  403f6a:	4f48      	ldr	r7, [pc, #288]	; (40408c <tcp_receive+0x2b8>)
  403f6c:	e018      	b.n	403fa0 <tcp_receive+0x1cc>
          u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
  403f6e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  403f70:	fb03 f303 	mul.w	r3, r3, r3
  403f74:	fb93 f3f2 	sdiv	r3, r3, r2
  403f78:	4413      	add	r3, r2
  403f7a:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
  403f7c:	429a      	cmp	r2, r3
  403f7e:	d2ee      	bcs.n	403f5e <tcp_receive+0x18a>
            pcb->cwnd = new_cwnd;
  403f80:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  403f84:	e7eb      	b.n	403f5e <tcp_receive+0x18a>
        pcb->snd_queuelen -= pbuf_clen(next->p);
  403f86:	6868      	ldr	r0, [r5, #4]
  403f88:	4b45      	ldr	r3, [pc, #276]	; (4040a0 <tcp_receive+0x2cc>)
  403f8a:	4798      	blx	r3
  403f8c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
  403f90:	1a18      	subs	r0, r3, r0
  403f92:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
        tcp_seg_free(next);
  403f96:	4628      	mov	r0, r5
  403f98:	4b42      	ldr	r3, [pc, #264]	; (4040a4 <tcp_receive+0x2d0>)
  403f9a:	4798      	blx	r3
      while (pcb->unacked != NULL &&
  403f9c:	6f23      	ldr	r3, [r4, #112]	; 0x70
  403f9e:	b36b      	cbz	r3, 403ffc <tcp_receive+0x228>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
  403fa0:	691b      	ldr	r3, [r3, #16]
  403fa2:	6858      	ldr	r0, [r3, #4]
  403fa4:	47c0      	blx	r8
  403fa6:	4605      	mov	r5, r0
  403fa8:	6f23      	ldr	r3, [r4, #112]	; 0x70
  403faa:	f8b3 9008 	ldrh.w	r9, [r3, #8]
  403fae:	691b      	ldr	r3, [r3, #16]
  403fb0:	8998      	ldrh	r0, [r3, #12]
  403fb2:	47b0      	blx	r6
  403fb4:	f010 0003 	ands.w	r0, r0, #3
  403fb8:	bf18      	it	ne
  403fba:	2001      	movne	r0, #1
  403fbc:	4448      	add	r0, r9
  403fbe:	683b      	ldr	r3, [r7, #0]
  403fc0:	1aed      	subs	r5, r5, r3
  403fc2:	4428      	add	r0, r5
      while (pcb->unacked != NULL &&
  403fc4:	2800      	cmp	r0, #0
  403fc6:	dc12      	bgt.n	403fee <tcp_receive+0x21a>
        next = pcb->unacked;
  403fc8:	6f25      	ldr	r5, [r4, #112]	; 0x70
        pcb->unacked = pcb->unacked->next;
  403fca:	682b      	ldr	r3, [r5, #0]
  403fcc:	6723      	str	r3, [r4, #112]	; 0x70
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
  403fce:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
  403fd2:	2b00      	cmp	r3, #0
  403fd4:	d0d7      	beq.n	403f86 <tcp_receive+0x1b2>
  403fd6:	692b      	ldr	r3, [r5, #16]
  403fd8:	8998      	ldrh	r0, [r3, #12]
  403fda:	47b0      	blx	r6
  403fdc:	f010 0f01 	tst.w	r0, #1
  403fe0:	d0d1      	beq.n	403f86 <tcp_receive+0x1b2>
          pcb->acked--;
  403fe2:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
  403fe6:	3b01      	subs	r3, #1
  403fe8:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  403fec:	e7cb      	b.n	403f86 <tcp_receive+0x1b2>
      if(pcb->unacked == NULL)
  403fee:	6f23      	ldr	r3, [r4, #112]	; 0x70
  403ff0:	b123      	cbz	r3, 403ffc <tcp_receive+0x228>
        pcb->rtime = 0;
  403ff2:	2300      	movs	r3, #0
  403ff4:	86a3      	strh	r3, [r4, #52]	; 0x34
      pcb->polltmr = 0;
  403ff6:	2300      	movs	r3, #0
  403ff8:	77e3      	strb	r3, [r4, #31]
  403ffa:	e712      	b.n	403e22 <tcp_receive+0x4e>
        pcb->rtime = -1;
  403ffc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404000:	86a3      	strh	r3, [r4, #52]	; 0x34
  404002:	e7f8      	b.n	403ff6 <tcp_receive+0x222>
        pcb->unsent_oversize = 0;
  404004:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  404008:	e02c      	b.n	404064 <tcp_receive+0x290>
      pcb->snd_queuelen -= pbuf_clen(next->p);
  40400a:	6868      	ldr	r0, [r5, #4]
  40400c:	4b24      	ldr	r3, [pc, #144]	; (4040a0 <tcp_receive+0x2cc>)
  40400e:	4798      	blx	r3
  404010:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
  404014:	1a18      	subs	r0, r3, r0
  404016:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      tcp_seg_free(next);
  40401a:	4628      	mov	r0, r5
  40401c:	4b21      	ldr	r3, [pc, #132]	; (4040a4 <tcp_receive+0x2d0>)
  40401e:	4798      	blx	r3
    while (pcb->unsent != NULL &&
  404020:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  404022:	2b00      	cmp	r3, #0
  404024:	d042      	beq.n	4040ac <tcp_receive+0x2d8>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
  404026:	6835      	ldr	r5, [r6, #0]
  404028:	691b      	ldr	r3, [r3, #16]
  40402a:	6858      	ldr	r0, [r3, #4]
  40402c:	47c0      	blx	r8
  40402e:	4682      	mov	sl, r0
  404030:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  404032:	f8b3 9008 	ldrh.w	r9, [r3, #8]
  404036:	691b      	ldr	r3, [r3, #16]
  404038:	8998      	ldrh	r0, [r3, #12]
  40403a:	47b8      	blx	r7
  40403c:	eba5 050a 	sub.w	r5, r5, sl
  404040:	f010 0003 	ands.w	r0, r0, #3
  404044:	bf18      	it	ne
  404046:	2001      	movne	r0, #1
  404048:	4448      	add	r0, r9
  40404a:	1a2d      	subs	r5, r5, r0
    while (pcb->unsent != NULL &&
  40404c:	2d00      	cmp	r5, #0
  40404e:	db2d      	blt.n	4040ac <tcp_receive+0x2d8>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
  404050:	6833      	ldr	r3, [r6, #0]
  404052:	6d22      	ldr	r2, [r4, #80]	; 0x50
  404054:	1a9b      	subs	r3, r3, r2
  404056:	2b00      	cmp	r3, #0
  404058:	dc28      	bgt.n	4040ac <tcp_receive+0x2d8>
      next = pcb->unsent;
  40405a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      pcb->unsent = pcb->unsent->next;
  40405c:	682b      	ldr	r3, [r5, #0]
  40405e:	66e3      	str	r3, [r4, #108]	; 0x6c
      if (pcb->unsent == NULL) {
  404060:	2b00      	cmp	r3, #0
  404062:	d0cf      	beq.n	404004 <tcp_receive+0x230>
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
  404064:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
  404068:	2b00      	cmp	r3, #0
  40406a:	d0ce      	beq.n	40400a <tcp_receive+0x236>
  40406c:	692b      	ldr	r3, [r5, #16]
  40406e:	8998      	ldrh	r0, [r3, #12]
  404070:	47b8      	blx	r7
  404072:	f010 0f01 	tst.w	r0, #1
  404076:	d0c8      	beq.n	40400a <tcp_receive+0x236>
        pcb->acked--;
  404078:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
  40407c:	3b01      	subs	r3, #1
  40407e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  404082:	e7c2      	b.n	40400a <tcp_receive+0x236>
  404084:	20402630 	.word	0x20402630
  404088:	20402650 	.word	0x20402650
  40408c:	2040262c 	.word	0x2040262c
  404090:	00401387 	.word	0x00401387
  404094:	20402654 	.word	0x20402654
  404098:	20402658 	.word	0x20402658
  40409c:	00405b89 	.word	0x00405b89
  4040a0:	00402a61 	.word	0x00402a61
  4040a4:	00402f89 	.word	0x00402f89
  4040a8:	004013a9 	.word	0x004013a9
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
  4040ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4040ae:	b12b      	cbz	r3, 4040bc <tcp_receive+0x2e8>
  4040b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4040b2:	499f      	ldr	r1, [pc, #636]	; (404330 <tcp_receive+0x55c>)
  4040b4:	6809      	ldr	r1, [r1, #0]
  4040b6:	1a52      	subs	r2, r2, r1
  4040b8:	2a00      	cmp	r2, #0
  4040ba:	db23      	blt.n	404104 <tcp_receive+0x330>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
  4040bc:	4b9d      	ldr	r3, [pc, #628]	; (404334 <tcp_receive+0x560>)
  4040be:	881b      	ldrh	r3, [r3, #0]
  4040c0:	2b00      	cmp	r3, #0
  4040c2:	f000 825c 	beq.w	40457e <tcp_receive+0x7aa>
  4040c6:	7e22      	ldrb	r2, [r4, #24]
  4040c8:	2a06      	cmp	r2, #6
  4040ca:	f200 8258 	bhi.w	40457e <tcp_receive+0x7aa>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
  4040ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  4040d0:	4a99      	ldr	r2, [pc, #612]	; (404338 <tcp_receive+0x564>)
  4040d2:	6812      	ldr	r2, [r2, #0]
  4040d4:	1a8d      	subs	r5, r1, r2
  4040d6:	2d01      	cmp	r5, #1
  4040d8:	d405      	bmi.n	4040e6 <tcp_receive+0x312>
  4040da:	f1c2 0001 	rsb	r0, r2, #1
  4040de:	1ac3      	subs	r3, r0, r3
  4040e0:	440b      	add	r3, r1
  4040e2:	2b00      	cmp	r3, #0
  4040e4:	dd2f      	ble.n	404146 <tcp_receive+0x372>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
  4040e6:	1a53      	subs	r3, r2, r1
  4040e8:	2b00      	cmp	r3, #0
  4040ea:	db56      	blt.n	40419a <tcp_receive+0x3c6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  4040ec:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  4040ee:	f1c3 0301 	rsb	r3, r3, #1
  4040f2:	4413      	add	r3, r2
  4040f4:	1a5b      	subs	r3, r3, r1
  4040f6:	2b00      	cmp	r3, #0
  4040f8:	dd54      	ble.n	4041a4 <tcp_receive+0x3d0>
      tcp_send_empty_ack(pcb);
  4040fa:	4620      	mov	r0, r4
  4040fc:	4b8f      	ldr	r3, [pc, #572]	; (40433c <tcp_receive+0x568>)
  4040fe:	4798      	blx	r3
  404100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      m = m - (pcb->sa >> 3);
  404104:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
      m = (s16_t)(tcp_ticks - pcb->rttest);
  404108:	4a8d      	ldr	r2, [pc, #564]	; (404340 <tcp_receive+0x56c>)
  40410a:	6812      	ldr	r2, [r2, #0]
  40410c:	1ad3      	subs	r3, r2, r3
      m = m - (pcb->sa >> 3);
  40410e:	eba3 03e1 	sub.w	r3, r3, r1, asr #3
  404112:	b29b      	uxth	r3, r3
  404114:	b218      	sxth	r0, r3
      pcb->sa += m;
  404116:	185a      	adds	r2, r3, r1
  404118:	b212      	sxth	r2, r2
  40411a:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      if (m < 0) {
  40411e:	2800      	cmp	r0, #0
  404120:	db0e      	blt.n	404140 <tcp_receive+0x36c>
      m = m - (pcb->sv >> 2);
  404122:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
      pcb->sv += m;
  404126:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
  40412a:	4403      	add	r3, r0
  40412c:	b29b      	uxth	r3, r3
  40412e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  404132:	eb03 03e2 	add.w	r3, r3, r2, asr #3
  404136:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
      pcb->rttest = 0;
  40413a:	2300      	movs	r3, #0
  40413c:	63a3      	str	r3, [r4, #56]	; 0x38
  40413e:	e7bd      	b.n	4040bc <tcp_receive+0x2e8>
        m = -m;
  404140:	425b      	negs	r3, r3
  404142:	b218      	sxth	r0, r3
  404144:	e7ed      	b.n	404122 <tcp_receive+0x34e>
      off = pcb->rcv_nxt - seqno;
  404146:	462b      	mov	r3, r5
      p = inseg.p;
  404148:	4a7e      	ldr	r2, [pc, #504]	; (404344 <tcp_receive+0x570>)
  40414a:	6850      	ldr	r0, [r2, #4]
      if (inseg.p->len < off) {
  40414c:	8942      	ldrh	r2, [r0, #10]
  40414e:	4295      	cmp	r5, r2
  404150:	dd1e      	ble.n	404190 <tcp_receive+0x3bc>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
  404152:	8901      	ldrh	r1, [r0, #8]
  404154:	1b49      	subs	r1, r1, r5
  404156:	b289      	uxth	r1, r1
          p->len = 0;
  404158:	2500      	movs	r5, #0
          off -= p->len;
  40415a:	1a9b      	subs	r3, r3, r2
          p->tot_len = new_tot_len;
  40415c:	8101      	strh	r1, [r0, #8]
          p->len = 0;
  40415e:	8145      	strh	r5, [r0, #10]
          p = p->next;
  404160:	6800      	ldr	r0, [r0, #0]
        while (p->len < off) {
  404162:	8942      	ldrh	r2, [r0, #10]
  404164:	429a      	cmp	r2, r3
  404166:	dbf8      	blt.n	40415a <tcp_receive+0x386>
        if(pbuf_header(p, (s16_t)-off)) {
  404168:	425b      	negs	r3, r3
  40416a:	b219      	sxth	r1, r3
  40416c:	4b76      	ldr	r3, [pc, #472]	; (404348 <tcp_receive+0x574>)
  40416e:	4798      	blx	r3
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
  404170:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  404172:	4974      	ldr	r1, [pc, #464]	; (404344 <tcp_receive+0x570>)
  404174:	4870      	ldr	r0, [pc, #448]	; (404338 <tcp_receive+0x564>)
  404176:	6803      	ldr	r3, [r0, #0]
  404178:	890d      	ldrh	r5, [r1, #8]
  40417a:	442b      	add	r3, r5
  40417c:	1a9b      	subs	r3, r3, r2
  40417e:	810b      	strh	r3, [r1, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
  404180:	690b      	ldr	r3, [r1, #16]
  404182:	6002      	str	r2, [r0, #0]
  404184:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  404186:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  404188:	1a53      	subs	r3, r2, r1
  40418a:	2b00      	cmp	r3, #0
  40418c:	daae      	bge.n	4040ec <tcp_receive+0x318>
  40418e:	e7b4      	b.n	4040fa <tcp_receive+0x326>
        if(pbuf_header(inseg.p, (s16_t)-off)) {
  404190:	4269      	negs	r1, r5
  404192:	b209      	sxth	r1, r1
  404194:	4b6c      	ldr	r3, [pc, #432]	; (404348 <tcp_receive+0x574>)
  404196:	4798      	blx	r3
  404198:	e7ea      	b.n	404170 <tcp_receive+0x39c>
        tcp_ack_now(pcb);
  40419a:	7fa3      	ldrb	r3, [r4, #30]
  40419c:	f043 0302 	orr.w	r3, r3, #2
  4041a0:	77a3      	strb	r3, [r4, #30]
  4041a2:	e7aa      	b.n	4040fa <tcp_receive+0x326>
      if (pcb->rcv_nxt == seqno) {
  4041a4:	428a      	cmp	r2, r1
  4041a6:	d013      	beq.n	4041d0 <tcp_receive+0x3fc>
        tcp_send_empty_ack(pcb);
  4041a8:	4620      	mov	r0, r4
  4041aa:	4b64      	ldr	r3, [pc, #400]	; (40433c <tcp_receive+0x568>)
  4041ac:	4798      	blx	r3
        if (pcb->ooseq == NULL) {
  4041ae:	6f66      	ldr	r6, [r4, #116]	; 0x74
  4041b0:	2e00      	cmp	r6, #0
  4041b2:	f000 812d 	beq.w	404410 <tcp_receive+0x63c>
            if (seqno == next->tcphdr->seqno) {
  4041b6:	6931      	ldr	r1, [r6, #16]
  4041b8:	684a      	ldr	r2, [r1, #4]
  4041ba:	4b5f      	ldr	r3, [pc, #380]	; (404338 <tcp_receive+0x564>)
  4041bc:	6818      	ldr	r0, [r3, #0]
  4041be:	4282      	cmp	r2, r0
  4041c0:	f000 812c 	beq.w	40441c <tcp_receive+0x648>
  4041c4:	2700      	movs	r7, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  4041c6:	f100 3eff 	add.w	lr, r0, #4294967295
  4041ca:	f100 0c01 	add.w	ip, r0, #1
  4041ce:	e148      	b.n	404462 <tcp_receive+0x68e>
        tcplen = TCP_TCPLEN(&inseg);
  4041d0:	4b5c      	ldr	r3, [pc, #368]	; (404344 <tcp_receive+0x570>)
  4041d2:	891d      	ldrh	r5, [r3, #8]
  4041d4:	691b      	ldr	r3, [r3, #16]
  4041d6:	8998      	ldrh	r0, [r3, #12]
  4041d8:	4b5c      	ldr	r3, [pc, #368]	; (40434c <tcp_receive+0x578>)
  4041da:	4798      	blx	r3
  4041dc:	f010 0303 	ands.w	r3, r0, #3
  4041e0:	bf18      	it	ne
  4041e2:	2301      	movne	r3, #1
  4041e4:	442b      	add	r3, r5
  4041e6:	b29b      	uxth	r3, r3
  4041e8:	4a52      	ldr	r2, [pc, #328]	; (404334 <tcp_receive+0x560>)
  4041ea:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
  4041ec:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
  4041ee:	429a      	cmp	r2, r3
  4041f0:	d317      	bcc.n	404222 <tcp_receive+0x44e>
        if (pcb->ooseq != NULL) {
  4041f2:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4041f4:	2b00      	cmp	r3, #0
  4041f6:	f000 81ef 	beq.w	4045d8 <tcp_receive+0x804>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  4041fa:	4b52      	ldr	r3, [pc, #328]	; (404344 <tcp_receive+0x570>)
  4041fc:	691b      	ldr	r3, [r3, #16]
  4041fe:	8998      	ldrh	r0, [r3, #12]
  404200:	4b52      	ldr	r3, [pc, #328]	; (40434c <tcp_receive+0x578>)
  404202:	4798      	blx	r3
  404204:	f010 0f01 	tst.w	r0, #1
  404208:	d042      	beq.n	404290 <tcp_receive+0x4bc>
            while (pcb->ooseq != NULL) {
  40420a:	6f60      	ldr	r0, [r4, #116]	; 0x74
  40420c:	2800      	cmp	r0, #0
  40420e:	f000 81e3 	beq.w	4045d8 <tcp_receive+0x804>
              tcp_seg_free(old_ooseq);
  404212:	4d4f      	ldr	r5, [pc, #316]	; (404350 <tcp_receive+0x57c>)
              pcb->ooseq = pcb->ooseq->next;
  404214:	6803      	ldr	r3, [r0, #0]
  404216:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
  404218:	47a8      	blx	r5
            while (pcb->ooseq != NULL) {
  40421a:	6f60      	ldr	r0, [r4, #116]	; 0x74
  40421c:	2800      	cmp	r0, #0
  40421e:	d1f9      	bne.n	404214 <tcp_receive+0x440>
  404220:	e1da      	b.n	4045d8 <tcp_receive+0x804>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  404222:	4b48      	ldr	r3, [pc, #288]	; (404344 <tcp_receive+0x570>)
  404224:	691b      	ldr	r3, [r3, #16]
  404226:	8998      	ldrh	r0, [r3, #12]
  404228:	4b48      	ldr	r3, [pc, #288]	; (40434c <tcp_receive+0x578>)
  40422a:	4798      	blx	r3
  40422c:	f010 0f01 	tst.w	r0, #1
  404230:	d11f      	bne.n	404272 <tcp_receive+0x49e>
          inseg.len = pcb->rcv_wnd;
  404232:	4b44      	ldr	r3, [pc, #272]	; (404344 <tcp_receive+0x570>)
  404234:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
  404236:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  404238:	691b      	ldr	r3, [r3, #16]
  40423a:	8998      	ldrh	r0, [r3, #12]
  40423c:	4b43      	ldr	r3, [pc, #268]	; (40434c <tcp_receive+0x578>)
  40423e:	4798      	blx	r3
  404240:	f010 0f02 	tst.w	r0, #2
  404244:	d003      	beq.n	40424e <tcp_receive+0x47a>
            inseg.len -= 1;
  404246:	4a3f      	ldr	r2, [pc, #252]	; (404344 <tcp_receive+0x570>)
  404248:	8913      	ldrh	r3, [r2, #8]
  40424a:	3b01      	subs	r3, #1
  40424c:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
  40424e:	4d3d      	ldr	r5, [pc, #244]	; (404344 <tcp_receive+0x570>)
  404250:	8929      	ldrh	r1, [r5, #8]
  404252:	6868      	ldr	r0, [r5, #4]
  404254:	4b3f      	ldr	r3, [pc, #252]	; (404354 <tcp_receive+0x580>)
  404256:	4798      	blx	r3
          tcplen = TCP_TCPLEN(&inseg);
  404258:	892e      	ldrh	r6, [r5, #8]
  40425a:	692b      	ldr	r3, [r5, #16]
  40425c:	8998      	ldrh	r0, [r3, #12]
  40425e:	4b3b      	ldr	r3, [pc, #236]	; (40434c <tcp_receive+0x578>)
  404260:	4798      	blx	r3
  404262:	f010 0003 	ands.w	r0, r0, #3
  404266:	bf18      	it	ne
  404268:	2001      	movne	r0, #1
  40426a:	4406      	add	r6, r0
  40426c:	4b31      	ldr	r3, [pc, #196]	; (404334 <tcp_receive+0x560>)
  40426e:	801e      	strh	r6, [r3, #0]
  404270:	e7bf      	b.n	4041f2 <tcp_receive+0x41e>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
  404272:	4b34      	ldr	r3, [pc, #208]	; (404344 <tcp_receive+0x570>)
  404274:	691e      	ldr	r6, [r3, #16]
  404276:	89b5      	ldrh	r5, [r6, #12]
  404278:	4628      	mov	r0, r5
  40427a:	4b34      	ldr	r3, [pc, #208]	; (40434c <tcp_receive+0x578>)
  40427c:	4798      	blx	r3
  40427e:	f000 003e 	and.w	r0, r0, #62	; 0x3e
  404282:	4b35      	ldr	r3, [pc, #212]	; (404358 <tcp_receive+0x584>)
  404284:	4798      	blx	r3
  404286:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
  40428a:	4305      	orrs	r5, r0
  40428c:	81b5      	strh	r5, [r6, #12]
  40428e:	e7d0      	b.n	404232 <tcp_receive+0x45e>
            next = pcb->ooseq;
  404290:	f8d4 9074 	ldr.w	r9, [r4, #116]	; 0x74
            while (next &&
  404294:	f1b9 0f00 	cmp.w	r9, #0
  404298:	f000 819c 	beq.w	4045d4 <tcp_receive+0x800>
                   TCP_SEQ_GEQ(seqno + tcplen,
  40429c:	f8d9 2010 	ldr.w	r2, [r9, #16]
  4042a0:	4b24      	ldr	r3, [pc, #144]	; (404334 <tcp_receive+0x560>)
  4042a2:	881b      	ldrh	r3, [r3, #0]
  4042a4:	4924      	ldr	r1, [pc, #144]	; (404338 <tcp_receive+0x564>)
  4042a6:	6809      	ldr	r1, [r1, #0]
  4042a8:	440b      	add	r3, r1
  4042aa:	6851      	ldr	r1, [r2, #4]
  4042ac:	1a5b      	subs	r3, r3, r1
  4042ae:	f8b9 1008 	ldrh.w	r1, [r9, #8]
  4042b2:	1a5b      	subs	r3, r3, r1
            while (next &&
  4042b4:	2b00      	cmp	r3, #0
  4042b6:	f2c0 81c0 	blt.w	40463a <tcp_receive+0x866>
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
  4042ba:	4e24      	ldr	r6, [pc, #144]	; (40434c <tcp_receive+0x578>)
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  4042bc:	4f21      	ldr	r7, [pc, #132]	; (404344 <tcp_receive+0x570>)
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  4042be:	f8df 8098 	ldr.w	r8, [pc, #152]	; 404358 <tcp_receive+0x584>
  4042c2:	e015      	b.n	4042f0 <tcp_receive+0x51c>
              next = next->next;
  4042c4:	f8d9 5000 	ldr.w	r5, [r9]
              tcp_seg_free(prev);
  4042c8:	4648      	mov	r0, r9
  4042ca:	4b21      	ldr	r3, [pc, #132]	; (404350 <tcp_receive+0x57c>)
  4042cc:	4798      	blx	r3
            while (next &&
  4042ce:	2d00      	cmp	r5, #0
  4042d0:	f000 8180 	beq.w	4045d4 <tcp_receive+0x800>
                   TCP_SEQ_GEQ(seqno + tcplen,
  4042d4:	692a      	ldr	r2, [r5, #16]
  4042d6:	4b17      	ldr	r3, [pc, #92]	; (404334 <tcp_receive+0x560>)
  4042d8:	881b      	ldrh	r3, [r3, #0]
  4042da:	4917      	ldr	r1, [pc, #92]	; (404338 <tcp_receive+0x564>)
  4042dc:	6809      	ldr	r1, [r1, #0]
  4042de:	440b      	add	r3, r1
  4042e0:	6851      	ldr	r1, [r2, #4]
  4042e2:	1a5b      	subs	r3, r3, r1
  4042e4:	8929      	ldrh	r1, [r5, #8]
  4042e6:	1a5b      	subs	r3, r3, r1
            while (next &&
  4042e8:	2b00      	cmp	r3, #0
  4042ea:	f2c0 81a7 	blt.w	40463c <tcp_receive+0x868>
              next = next->next;
  4042ee:	46a9      	mov	r9, r5
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
  4042f0:	8990      	ldrh	r0, [r2, #12]
  4042f2:	47b0      	blx	r6
  4042f4:	f010 0f01 	tst.w	r0, #1
  4042f8:	d0e4      	beq.n	4042c4 <tcp_receive+0x4f0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  4042fa:	693b      	ldr	r3, [r7, #16]
  4042fc:	8998      	ldrh	r0, [r3, #12]
  4042fe:	47b0      	blx	r6
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
  404300:	f010 0f02 	tst.w	r0, #2
  404304:	d1de      	bne.n	4042c4 <tcp_receive+0x4f0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  404306:	f8d7 a010 	ldr.w	sl, [r7, #16]
  40430a:	f8ba 500c 	ldrh.w	r5, [sl, #12]
  40430e:	2001      	movs	r0, #1
  404310:	47c0      	blx	r8
  404312:	4328      	orrs	r0, r5
  404314:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
  404318:	893d      	ldrh	r5, [r7, #8]
  40431a:	693b      	ldr	r3, [r7, #16]
  40431c:	8998      	ldrh	r0, [r3, #12]
  40431e:	47b0      	blx	r6
  404320:	f010 0003 	ands.w	r0, r0, #3
  404324:	bf18      	it	ne
  404326:	2001      	movne	r0, #1
  404328:	4405      	add	r5, r0
  40432a:	4b02      	ldr	r3, [pc, #8]	; (404334 <tcp_receive+0x560>)
  40432c:	801d      	strh	r5, [r3, #0]
  40432e:	e7c9      	b.n	4042c4 <tcp_receive+0x4f0>
  404330:	2040262c 	.word	0x2040262c
  404334:	20402658 	.word	0x20402658
  404338:	20402650 	.word	0x20402650
  40433c:	004056f5 	.word	0x004056f5
  404340:	204049d0 	.word	0x204049d0
  404344:	20402634 	.word	0x20402634
  404348:	004027d5 	.word	0x004027d5
  40434c:	00401387 	.word	0x00401387
  404350:	00402f89 	.word	0x00402f89
  404354:	00402a01 	.word	0x00402a01
  404358:	0040137d 	.word	0x0040137d
              recv_data = cseg->p;
  40435c:	4b91      	ldr	r3, [pc, #580]	; (4045a4 <tcp_receive+0x7d0>)
  40435e:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
  404360:	2300      	movs	r3, #0
  404362:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  404364:	692b      	ldr	r3, [r5, #16]
  404366:	8998      	ldrh	r0, [r3, #12]
  404368:	47b0      	blx	r6
  40436a:	f010 0f01 	tst.w	r0, #1
  40436e:	d007      	beq.n	404380 <tcp_receive+0x5ac>
            recv_flags |= TF_GOT_FIN;
  404370:	4a8d      	ldr	r2, [pc, #564]	; (4045a8 <tcp_receive+0x7d4>)
  404372:	7813      	ldrb	r3, [r2, #0]
  404374:	f043 0320 	orr.w	r3, r3, #32
  404378:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
  40437a:	7e23      	ldrb	r3, [r4, #24]
  40437c:	2b04      	cmp	r3, #4
  40437e:	d034      	beq.n	4043ea <tcp_receive+0x616>
          pcb->ooseq = cseg->next;
  404380:	682b      	ldr	r3, [r5, #0]
  404382:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
  404384:	4628      	mov	r0, r5
  404386:	4b89      	ldr	r3, [pc, #548]	; (4045ac <tcp_receive+0x7d8>)
  404388:	4798      	blx	r3
        while (pcb->ooseq != NULL &&
  40438a:	6f65      	ldr	r5, [r4, #116]	; 0x74
  40438c:	2d00      	cmp	r5, #0
  40438e:	d02f      	beq.n	4043f0 <tcp_receive+0x61c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  404390:	692b      	ldr	r3, [r5, #16]
  404392:	685a      	ldr	r2, [r3, #4]
        while (pcb->ooseq != NULL &&
  404394:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  404396:	428a      	cmp	r2, r1
  404398:	d12a      	bne.n	4043f0 <tcp_receive+0x61c>
          seqno = pcb->ooseq->tcphdr->seqno;
  40439a:	f8c8 2000 	str.w	r2, [r8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  40439e:	f8b5 9008 	ldrh.w	r9, [r5, #8]
  4043a2:	8998      	ldrh	r0, [r3, #12]
  4043a4:	47b0      	blx	r6
  4043a6:	f010 0003 	ands.w	r0, r0, #3
  4043aa:	bf18      	it	ne
  4043ac:	2001      	movne	r0, #1
  4043ae:	4448      	add	r0, r9
  4043b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4043b2:	4418      	add	r0, r3
  4043b4:	62a0      	str	r0, [r4, #40]	; 0x28
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
  4043b6:	f8b5 9008 	ldrh.w	r9, [r5, #8]
  4043ba:	692b      	ldr	r3, [r5, #16]
  4043bc:	8998      	ldrh	r0, [r3, #12]
  4043be:	47b0      	blx	r6
  4043c0:	f010 0003 	ands.w	r0, r0, #3
  4043c4:	bf18      	it	ne
  4043c6:	2001      	movne	r0, #1
  4043c8:	4448      	add	r0, r9
  4043ca:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  4043cc:	1a18      	subs	r0, r3, r0
  4043ce:	85a0      	strh	r0, [r4, #44]	; 0x2c
          tcp_update_rcv_ann_wnd(pcb);
  4043d0:	4620      	mov	r0, r4
  4043d2:	47b8      	blx	r7
          if (cseg->p->tot_len > 0) {
  4043d4:	6869      	ldr	r1, [r5, #4]
  4043d6:	890b      	ldrh	r3, [r1, #8]
  4043d8:	2b00      	cmp	r3, #0
  4043da:	d0c3      	beq.n	404364 <tcp_receive+0x590>
            if (recv_data) {
  4043dc:	4b71      	ldr	r3, [pc, #452]	; (4045a4 <tcp_receive+0x7d0>)
  4043de:	6818      	ldr	r0, [r3, #0]
  4043e0:	2800      	cmp	r0, #0
  4043e2:	d0bb      	beq.n	40435c <tcp_receive+0x588>
              pbuf_cat(recv_data, cseg->p);
  4043e4:	4b72      	ldr	r3, [pc, #456]	; (4045b0 <tcp_receive+0x7dc>)
  4043e6:	4798      	blx	r3
  4043e8:	e7ba      	b.n	404360 <tcp_receive+0x58c>
              pcb->state = CLOSE_WAIT;
  4043ea:	2307      	movs	r3, #7
  4043ec:	7623      	strb	r3, [r4, #24]
  4043ee:	e7c7      	b.n	404380 <tcp_receive+0x5ac>
        tcp_ack(pcb);
  4043f0:	7fa3      	ldrb	r3, [r4, #30]
  4043f2:	f013 0f01 	tst.w	r3, #1
  4043f6:	d006      	beq.n	404406 <tcp_receive+0x632>
  4043f8:	f023 0301 	bic.w	r3, r3, #1
  4043fc:	f043 0302 	orr.w	r3, r3, #2
  404400:	77a3      	strb	r3, [r4, #30]
  404402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404406:	f043 0301 	orr.w	r3, r3, #1
  40440a:	77a3      	strb	r3, [r4, #30]
  40440c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          pcb->ooseq = tcp_seg_copy(&inseg);
  404410:	4868      	ldr	r0, [pc, #416]	; (4045b4 <tcp_receive+0x7e0>)
  404412:	4b69      	ldr	r3, [pc, #420]	; (4045b8 <tcp_receive+0x7e4>)
  404414:	4798      	blx	r3
  404416:	6760      	str	r0, [r4, #116]	; 0x74
  404418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (seqno == next->tcphdr->seqno) {
  40441c:	4635      	mov	r5, r6
  40441e:	2600      	movs	r6, #0
              if (inseg.len > next->len) {
  404420:	4b64      	ldr	r3, [pc, #400]	; (4045b4 <tcp_receive+0x7e0>)
  404422:	891a      	ldrh	r2, [r3, #8]
  404424:	892b      	ldrh	r3, [r5, #8]
  404426:	429a      	cmp	r2, r3
  404428:	d94f      	bls.n	4044ca <tcp_receive+0x6f6>
                cseg = tcp_seg_copy(&inseg);
  40442a:	4862      	ldr	r0, [pc, #392]	; (4045b4 <tcp_receive+0x7e0>)
  40442c:	4b62      	ldr	r3, [pc, #392]	; (4045b8 <tcp_receive+0x7e4>)
  40442e:	4798      	blx	r3
                if (cseg != NULL) {
  404430:	4603      	mov	r3, r0
  404432:	2800      	cmp	r0, #0
  404434:	d049      	beq.n	4044ca <tcp_receive+0x6f6>
                  if (prev != NULL) {
  404436:	b136      	cbz	r6, 404446 <tcp_receive+0x672>
                    prev->next = cseg;
  404438:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
  40443a:	4629      	mov	r1, r5
  40443c:	4618      	mov	r0, r3
  40443e:	4b5f      	ldr	r3, [pc, #380]	; (4045bc <tcp_receive+0x7e8>)
  404440:	4798      	blx	r3
  404442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    pcb->ooseq = cseg;
  404446:	6760      	str	r0, [r4, #116]	; 0x74
  404448:	e7f7      	b.n	40443a <tcp_receive+0x666>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
  40444a:	1a83      	subs	r3, r0, r2
  40444c:	2b00      	cmp	r3, #0
  40444e:	db2f      	blt.n	4044b0 <tcp_receive+0x6dc>
              if (next->next == NULL &&
  404450:	6835      	ldr	r5, [r6, #0]
  404452:	2d00      	cmp	r5, #0
  404454:	d036      	beq.n	4044c4 <tcp_receive+0x6f0>
            if (seqno == next->tcphdr->seqno) {
  404456:	6929      	ldr	r1, [r5, #16]
  404458:	684a      	ldr	r2, [r1, #4]
  40445a:	4637      	mov	r7, r6
  40445c:	4282      	cmp	r2, r0
  40445e:	d0df      	beq.n	404420 <tcp_receive+0x64c>
              if (next->next == NULL &&
  404460:	462e      	mov	r6, r5
              if (prev == NULL) {
  404462:	2f00      	cmp	r7, #0
  404464:	d0f1      	beq.n	40444a <tcp_receive+0x676>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  404466:	693b      	ldr	r3, [r7, #16]
  404468:	685b      	ldr	r3, [r3, #4]
  40446a:	ebae 0303 	sub.w	r3, lr, r3
  40446e:	2b00      	cmp	r3, #0
  404470:	dbee      	blt.n	404450 <tcp_receive+0x67c>
  404472:	ebac 0302 	sub.w	r3, ip, r2
  404476:	2b00      	cmp	r3, #0
  404478:	dcea      	bgt.n	404450 <tcp_receive+0x67c>
                  cseg = tcp_seg_copy(&inseg);
  40447a:	484e      	ldr	r0, [pc, #312]	; (4045b4 <tcp_receive+0x7e0>)
  40447c:	4b4e      	ldr	r3, [pc, #312]	; (4045b8 <tcp_receive+0x7e4>)
  40447e:	4798      	blx	r3
                  if (cseg != NULL) {
  404480:	4604      	mov	r4, r0
  404482:	b310      	cbz	r0, 4044ca <tcp_receive+0x6f6>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
  404484:	693b      	ldr	r3, [r7, #16]
  404486:	6859      	ldr	r1, [r3, #4]
  404488:	4b4d      	ldr	r3, [pc, #308]	; (4045c0 <tcp_receive+0x7ec>)
  40448a:	681b      	ldr	r3, [r3, #0]
  40448c:	893a      	ldrh	r2, [r7, #8]
  40448e:	440a      	add	r2, r1
  404490:	1ad2      	subs	r2, r2, r3
  404492:	2a00      	cmp	r2, #0
  404494:	dd05      	ble.n	4044a2 <tcp_receive+0x6ce>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
  404496:	1a5b      	subs	r3, r3, r1
  404498:	b299      	uxth	r1, r3
  40449a:	8139      	strh	r1, [r7, #8]
                      pbuf_realloc(prev->p, prev->len);
  40449c:	6878      	ldr	r0, [r7, #4]
  40449e:	4b49      	ldr	r3, [pc, #292]	; (4045c4 <tcp_receive+0x7f0>)
  4044a0:	4798      	blx	r3
                    prev->next = cseg;
  4044a2:	603c      	str	r4, [r7, #0]
                    tcp_oos_insert_segment(cseg, next);
  4044a4:	4631      	mov	r1, r6
  4044a6:	4620      	mov	r0, r4
  4044a8:	4b44      	ldr	r3, [pc, #272]	; (4045bc <tcp_receive+0x7e8>)
  4044aa:	4798      	blx	r3
  4044ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                  cseg = tcp_seg_copy(&inseg);
  4044b0:	4840      	ldr	r0, [pc, #256]	; (4045b4 <tcp_receive+0x7e0>)
  4044b2:	4b41      	ldr	r3, [pc, #260]	; (4045b8 <tcp_receive+0x7e4>)
  4044b4:	4798      	blx	r3
                  if (cseg != NULL) {
  4044b6:	b140      	cbz	r0, 4044ca <tcp_receive+0x6f6>
                    pcb->ooseq = cseg;
  4044b8:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
  4044ba:	4631      	mov	r1, r6
  4044bc:	4b3f      	ldr	r3, [pc, #252]	; (4045bc <tcp_receive+0x7e8>)
  4044be:	4798      	blx	r3
  4044c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
  4044c4:	1a82      	subs	r2, r0, r2
              if (next->next == NULL &&
  4044c6:	2a00      	cmp	r2, #0
  4044c8:	dc01      	bgt.n	4044ce <tcp_receive+0x6fa>
  4044ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  4044ce:	8988      	ldrh	r0, [r1, #12]
  4044d0:	4b3d      	ldr	r3, [pc, #244]	; (4045c8 <tcp_receive+0x7f4>)
  4044d2:	4798      	blx	r3
  4044d4:	f010 0f01 	tst.w	r0, #1
  4044d8:	d1f7      	bne.n	4044ca <tcp_receive+0x6f6>
                next->next = tcp_seg_copy(&inseg);
  4044da:	4836      	ldr	r0, [pc, #216]	; (4045b4 <tcp_receive+0x7e0>)
  4044dc:	4b36      	ldr	r3, [pc, #216]	; (4045b8 <tcp_receive+0x7e4>)
  4044de:	4798      	blx	r3
  4044e0:	6030      	str	r0, [r6, #0]
                if (next->next != NULL) {
  4044e2:	2800      	cmp	r0, #0
  4044e4:	d0f1      	beq.n	4044ca <tcp_receive+0x6f6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
  4044e6:	6933      	ldr	r3, [r6, #16]
  4044e8:	6859      	ldr	r1, [r3, #4]
  4044ea:	4b35      	ldr	r3, [pc, #212]	; (4045c0 <tcp_receive+0x7ec>)
  4044ec:	681b      	ldr	r3, [r3, #0]
  4044ee:	8932      	ldrh	r2, [r6, #8]
  4044f0:	440a      	add	r2, r1
  4044f2:	1ad2      	subs	r2, r2, r3
  4044f4:	2a00      	cmp	r2, #0
  4044f6:	dd05      	ble.n	404504 <tcp_receive+0x730>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
  4044f8:	1a5b      	subs	r3, r3, r1
  4044fa:	b299      	uxth	r1, r3
  4044fc:	8131      	strh	r1, [r6, #8]
                    pbuf_realloc(next->p, next->len);
  4044fe:	6870      	ldr	r0, [r6, #4]
  404500:	4b30      	ldr	r3, [pc, #192]	; (4045c4 <tcp_receive+0x7f0>)
  404502:	4798      	blx	r3
                  if ((u32_t)tcplen + seqno > pcb->rcv_nxt + (u32_t)pcb->rcv_wnd) {
  404504:	4b31      	ldr	r3, [pc, #196]	; (4045cc <tcp_receive+0x7f8>)
  404506:	881a      	ldrh	r2, [r3, #0]
  404508:	4b2d      	ldr	r3, [pc, #180]	; (4045c0 <tcp_receive+0x7ec>)
  40450a:	681b      	ldr	r3, [r3, #0]
  40450c:	441a      	add	r2, r3
  40450e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  404510:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  404512:	440b      	add	r3, r1
  404514:	429a      	cmp	r2, r3
  404516:	d9d8      	bls.n	4044ca <tcp_receive+0x6f6>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
  404518:	6833      	ldr	r3, [r6, #0]
  40451a:	691b      	ldr	r3, [r3, #16]
  40451c:	8998      	ldrh	r0, [r3, #12]
  40451e:	4b2a      	ldr	r3, [pc, #168]	; (4045c8 <tcp_receive+0x7f4>)
  404520:	4798      	blx	r3
  404522:	f010 0f01 	tst.w	r0, #1
  404526:	d11b      	bne.n	404560 <tcp_receive+0x78c>
                    next->next->len = pcb->rcv_nxt + pcb->rcv_wnd - seqno;
  404528:	6832      	ldr	r2, [r6, #0]
  40452a:	4b25      	ldr	r3, [pc, #148]	; (4045c0 <tcp_receive+0x7ec>)
  40452c:	6819      	ldr	r1, [r3, #0]
  40452e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  404530:	1a5b      	subs	r3, r3, r1
  404532:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  404534:	440b      	add	r3, r1
  404536:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
  404538:	6833      	ldr	r3, [r6, #0]
  40453a:	8919      	ldrh	r1, [r3, #8]
  40453c:	6858      	ldr	r0, [r3, #4]
  40453e:	4b21      	ldr	r3, [pc, #132]	; (4045c4 <tcp_receive+0x7f0>)
  404540:	4798      	blx	r3
                    tcplen = TCP_TCPLEN(next->next);
  404542:	6833      	ldr	r3, [r6, #0]
  404544:	891c      	ldrh	r4, [r3, #8]
  404546:	691b      	ldr	r3, [r3, #16]
  404548:	8998      	ldrh	r0, [r3, #12]
  40454a:	4b1f      	ldr	r3, [pc, #124]	; (4045c8 <tcp_receive+0x7f4>)
  40454c:	4798      	blx	r3
  40454e:	f010 0003 	ands.w	r0, r0, #3
  404552:	bf18      	it	ne
  404554:	2001      	movne	r0, #1
  404556:	4404      	add	r4, r0
  404558:	4b1c      	ldr	r3, [pc, #112]	; (4045cc <tcp_receive+0x7f8>)
  40455a:	801c      	strh	r4, [r3, #0]
  40455c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) &~ TCP_FIN);
  404560:	6833      	ldr	r3, [r6, #0]
  404562:	691f      	ldr	r7, [r3, #16]
  404564:	89bd      	ldrh	r5, [r7, #12]
  404566:	4628      	mov	r0, r5
  404568:	4b17      	ldr	r3, [pc, #92]	; (4045c8 <tcp_receive+0x7f4>)
  40456a:	4798      	blx	r3
  40456c:	f000 003e 	and.w	r0, r0, #62	; 0x3e
  404570:	4b17      	ldr	r3, [pc, #92]	; (4045d0 <tcp_receive+0x7fc>)
  404572:	4798      	blx	r3
  404574:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
  404578:	4305      	orrs	r5, r0
  40457a:	81bd      	strh	r5, [r7, #12]
  40457c:	e7d4      	b.n	404528 <tcp_receive+0x754>
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
  40457e:	4b10      	ldr	r3, [pc, #64]	; (4045c0 <tcp_receive+0x7ec>)
  404580:	681b      	ldr	r3, [r3, #0]
  404582:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  404584:	1a99      	subs	r1, r3, r2
  404586:	2900      	cmp	r1, #0
  404588:	db05      	blt.n	404596 <tcp_receive+0x7c2>
  40458a:	3301      	adds	r3, #1
  40458c:	1a9b      	subs	r3, r3, r2
  40458e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
  404590:	1a9b      	subs	r3, r3, r2
  404592:	2b00      	cmp	r3, #0
  404594:	dd99      	ble.n	4044ca <tcp_receive+0x6f6>
      tcp_ack_now(pcb);
  404596:	7fa3      	ldrb	r3, [r4, #30]
  404598:	f043 0302 	orr.w	r3, r3, #2
  40459c:	77a3      	strb	r3, [r4, #30]
}
  40459e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4045a2:	bf00      	nop
  4045a4:	20402648 	.word	0x20402648
  4045a8:	2040264c 	.word	0x2040264c
  4045ac:	00402f89 	.word	0x00402f89
  4045b0:	00402a81 	.word	0x00402a81
  4045b4:	20402634 	.word	0x20402634
  4045b8:	00402fd1 	.word	0x00402fd1
  4045bc:	00403d09 	.word	0x00403d09
  4045c0:	20402650 	.word	0x20402650
  4045c4:	00402a01 	.word	0x00402a01
  4045c8:	00401387 	.word	0x00401387
  4045cc:	20402658 	.word	0x20402658
  4045d0:	0040137d 	.word	0x0040137d
              next = next->next;
  4045d4:	2500      	movs	r5, #0
            pcb->ooseq = next;
  4045d6:	6765      	str	r5, [r4, #116]	; 0x74
        pcb->rcv_nxt = seqno + tcplen;
  4045d8:	4b2d      	ldr	r3, [pc, #180]	; (404690 <tcp_receive+0x8bc>)
  4045da:	881a      	ldrh	r2, [r3, #0]
  4045dc:	4b2d      	ldr	r3, [pc, #180]	; (404694 <tcp_receive+0x8c0>)
  4045de:	681b      	ldr	r3, [r3, #0]
  4045e0:	4413      	add	r3, r2
  4045e2:	62a3      	str	r3, [r4, #40]	; 0x28
        pcb->rcv_wnd -= tcplen;
  4045e4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  4045e6:	1a9b      	subs	r3, r3, r2
  4045e8:	85a3      	strh	r3, [r4, #44]	; 0x2c
        tcp_update_rcv_ann_wnd(pcb);
  4045ea:	4620      	mov	r0, r4
  4045ec:	4b2a      	ldr	r3, [pc, #168]	; (404698 <tcp_receive+0x8c4>)
  4045ee:	4798      	blx	r3
        if (inseg.p->tot_len > 0) {
  4045f0:	4b2a      	ldr	r3, [pc, #168]	; (40469c <tcp_receive+0x8c8>)
  4045f2:	685b      	ldr	r3, [r3, #4]
  4045f4:	891a      	ldrh	r2, [r3, #8]
  4045f6:	b122      	cbz	r2, 404602 <tcp_receive+0x82e>
          recv_data = inseg.p;
  4045f8:	4a29      	ldr	r2, [pc, #164]	; (4046a0 <tcp_receive+0x8cc>)
  4045fa:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
  4045fc:	2200      	movs	r2, #0
  4045fe:	4b27      	ldr	r3, [pc, #156]	; (40469c <tcp_receive+0x8c8>)
  404600:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  404602:	4b26      	ldr	r3, [pc, #152]	; (40469c <tcp_receive+0x8c8>)
  404604:	691b      	ldr	r3, [r3, #16]
  404606:	8998      	ldrh	r0, [r3, #12]
  404608:	4b26      	ldr	r3, [pc, #152]	; (4046a4 <tcp_receive+0x8d0>)
  40460a:	4798      	blx	r3
  40460c:	f010 0f01 	tst.w	r0, #1
  404610:	d004      	beq.n	40461c <tcp_receive+0x848>
          recv_flags |= TF_GOT_FIN;
  404612:	4a25      	ldr	r2, [pc, #148]	; (4046a8 <tcp_receive+0x8d4>)
  404614:	7813      	ldrb	r3, [r2, #0]
  404616:	f043 0320 	orr.w	r3, r3, #32
  40461a:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
  40461c:	6f65      	ldr	r5, [r4, #116]	; 0x74
  40461e:	2d00      	cmp	r5, #0
  404620:	f43f aee6 	beq.w	4043f0 <tcp_receive+0x61c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  404624:	692b      	ldr	r3, [r5, #16]
  404626:	685a      	ldr	r2, [r3, #4]
        while (pcb->ooseq != NULL &&
  404628:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  40462a:	428a      	cmp	r2, r1
  40462c:	f47f aee0 	bne.w	4043f0 <tcp_receive+0x61c>
          seqno = pcb->ooseq->tcphdr->seqno;
  404630:	f8df 8060 	ldr.w	r8, [pc, #96]	; 404694 <tcp_receive+0x8c0>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  404634:	4e1b      	ldr	r6, [pc, #108]	; (4046a4 <tcp_receive+0x8d0>)
          tcp_update_rcv_ann_wnd(pcb);
  404636:	4f18      	ldr	r7, [pc, #96]	; (404698 <tcp_receive+0x8c4>)
  404638:	e6af      	b.n	40439a <tcp_receive+0x5c6>
            next = pcb->ooseq;
  40463a:	464d      	mov	r5, r9
                TCP_SEQ_GT(seqno + tcplen,
  40463c:	4b15      	ldr	r3, [pc, #84]	; (404694 <tcp_receive+0x8c0>)
  40463e:	6819      	ldr	r1, [r3, #0]
  404640:	692b      	ldr	r3, [r5, #16]
  404642:	685a      	ldr	r2, [r3, #4]
  404644:	4b12      	ldr	r3, [pc, #72]	; (404690 <tcp_receive+0x8bc>)
  404646:	881b      	ldrh	r3, [r3, #0]
  404648:	440b      	add	r3, r1
  40464a:	1a9b      	subs	r3, r3, r2
            if (next &&
  40464c:	2b00      	cmp	r3, #0
  40464e:	ddc2      	ble.n	4045d6 <tcp_receive+0x802>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
  404650:	4b12      	ldr	r3, [pc, #72]	; (40469c <tcp_receive+0x8c8>)
  404652:	1a52      	subs	r2, r2, r1
  404654:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  404656:	691b      	ldr	r3, [r3, #16]
  404658:	8998      	ldrh	r0, [r3, #12]
  40465a:	4b12      	ldr	r3, [pc, #72]	; (4046a4 <tcp_receive+0x8d0>)
  40465c:	4798      	blx	r3
  40465e:	f010 0f02 	tst.w	r0, #2
  404662:	d003      	beq.n	40466c <tcp_receive+0x898>
                inseg.len -= 1;
  404664:	4a0d      	ldr	r2, [pc, #52]	; (40469c <tcp_receive+0x8c8>)
  404666:	8913      	ldrh	r3, [r2, #8]
  404668:	3b01      	subs	r3, #1
  40466a:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
  40466c:	4e0b      	ldr	r6, [pc, #44]	; (40469c <tcp_receive+0x8c8>)
  40466e:	8931      	ldrh	r1, [r6, #8]
  404670:	6870      	ldr	r0, [r6, #4]
  404672:	4b0e      	ldr	r3, [pc, #56]	; (4046ac <tcp_receive+0x8d8>)
  404674:	4798      	blx	r3
              tcplen = TCP_TCPLEN(&inseg);
  404676:	8937      	ldrh	r7, [r6, #8]
  404678:	6933      	ldr	r3, [r6, #16]
  40467a:	8998      	ldrh	r0, [r3, #12]
  40467c:	4b09      	ldr	r3, [pc, #36]	; (4046a4 <tcp_receive+0x8d0>)
  40467e:	4798      	blx	r3
  404680:	f010 0003 	ands.w	r0, r0, #3
  404684:	bf18      	it	ne
  404686:	2001      	movne	r0, #1
  404688:	4407      	add	r7, r0
  40468a:	4b01      	ldr	r3, [pc, #4]	; (404690 <tcp_receive+0x8bc>)
  40468c:	801f      	strh	r7, [r3, #0]
  40468e:	e7a2      	b.n	4045d6 <tcp_receive+0x802>
  404690:	20402658 	.word	0x20402658
  404694:	20402650 	.word	0x20402650
  404698:	00402ef5 	.word	0x00402ef5
  40469c:	20402634 	.word	0x20402634
  4046a0:	20402648 	.word	0x20402648
  4046a4:	00401387 	.word	0x00401387
  4046a8:	2040264c 	.word	0x2040264c
  4046ac:	00402a01 	.word	0x00402a01

004046b0 <tcp_input>:
{
  4046b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4046b4:	b083      	sub	sp, #12
  4046b6:	4604      	mov	r4, r0
  4046b8:	460d      	mov	r5, r1
  iphdr = (struct ip_hdr *)p->payload;
  4046ba:	6843      	ldr	r3, [r0, #4]
  4046bc:	7819      	ldrb	r1, [r3, #0]
  4046be:	f001 010f 	and.w	r1, r1, #15
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
  4046c2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  4046c6:	4a8a      	ldr	r2, [pc, #552]	; (4048f0 <tcp_input+0x240>)
  4046c8:	6013      	str	r3, [r2, #0]
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
  4046ca:	0089      	lsls	r1, r1, #2
  4046cc:	4249      	negs	r1, r1
  4046ce:	4b89      	ldr	r3, [pc, #548]	; (4048f4 <tcp_input+0x244>)
  4046d0:	4798      	blx	r3
  4046d2:	b910      	cbnz	r0, 4046da <tcp_input+0x2a>
  4046d4:	8923      	ldrh	r3, [r4, #8]
  4046d6:	2b13      	cmp	r3, #19
  4046d8:	d805      	bhi.n	4046e6 <tcp_input+0x36>
  pbuf_free(p);
  4046da:	4620      	mov	r0, r4
  4046dc:	4b86      	ldr	r3, [pc, #536]	; (4048f8 <tcp_input+0x248>)
  4046de:	4798      	blx	r3
}
  4046e0:	b003      	add	sp, #12
  4046e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
  4046e6:	4629      	mov	r1, r5
  4046e8:	4b84      	ldr	r3, [pc, #528]	; (4048fc <tcp_input+0x24c>)
  4046ea:	6818      	ldr	r0, [r3, #0]
  4046ec:	4b84      	ldr	r3, [pc, #528]	; (404900 <tcp_input+0x250>)
  4046ee:	4798      	blx	r3
  4046f0:	2800      	cmp	r0, #0
  4046f2:	d1f2      	bne.n	4046da <tcp_input+0x2a>
      ip_addr_ismulticast(&current_iphdr_dest)) {
  4046f4:	4b81      	ldr	r3, [pc, #516]	; (4048fc <tcp_input+0x24c>)
  4046f6:	681b      	ldr	r3, [r3, #0]
  4046f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
  4046fc:	2be0      	cmp	r3, #224	; 0xe0
  4046fe:	d0ec      	beq.n	4046da <tcp_input+0x2a>
  if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
  404700:	8923      	ldrh	r3, [r4, #8]
  404702:	9300      	str	r3, [sp, #0]
  404704:	2306      	movs	r3, #6
  404706:	4a7d      	ldr	r2, [pc, #500]	; (4048fc <tcp_input+0x24c>)
  404708:	497e      	ldr	r1, [pc, #504]	; (404904 <tcp_input+0x254>)
  40470a:	4620      	mov	r0, r4
  40470c:	4d7e      	ldr	r5, [pc, #504]	; (404908 <tcp_input+0x258>)
  40470e:	47a8      	blx	r5
  404710:	b120      	cbz	r0, 40471c <tcp_input+0x6c>
    tcp_debug_print(tcphdr);
  404712:	4b77      	ldr	r3, [pc, #476]	; (4048f0 <tcp_input+0x240>)
  404714:	6818      	ldr	r0, [r3, #0]
  404716:	4b7d      	ldr	r3, [pc, #500]	; (40490c <tcp_input+0x25c>)
  404718:	4798      	blx	r3
    goto dropped;
  40471a:	e7de      	b.n	4046da <tcp_input+0x2a>
  hdrlen = TCPH_HDRLEN(tcphdr);
  40471c:	4b74      	ldr	r3, [pc, #464]	; (4048f0 <tcp_input+0x240>)
  40471e:	681b      	ldr	r3, [r3, #0]
  404720:	8998      	ldrh	r0, [r3, #12]
  404722:	4b7b      	ldr	r3, [pc, #492]	; (404910 <tcp_input+0x260>)
  404724:	4798      	blx	r3
  404726:	0b00      	lsrs	r0, r0, #12
  if(pbuf_header(p, -(hdrlen * 4))){
  404728:	ebc0 3080 	rsb	r0, r0, r0, lsl #14
  40472c:	0081      	lsls	r1, r0, #2
  40472e:	b209      	sxth	r1, r1
  404730:	4620      	mov	r0, r4
  404732:	4b70      	ldr	r3, [pc, #448]	; (4048f4 <tcp_input+0x244>)
  404734:	4798      	blx	r3
  404736:	2800      	cmp	r0, #0
  404738:	d1cf      	bne.n	4046da <tcp_input+0x2a>
  tcphdr->src = ntohs(tcphdr->src);
  40473a:	4d6d      	ldr	r5, [pc, #436]	; (4048f0 <tcp_input+0x240>)
  40473c:	682f      	ldr	r7, [r5, #0]
  40473e:	8838      	ldrh	r0, [r7, #0]
  404740:	4e73      	ldr	r6, [pc, #460]	; (404910 <tcp_input+0x260>)
  404742:	47b0      	blx	r6
  404744:	8038      	strh	r0, [r7, #0]
  tcphdr->dest = ntohs(tcphdr->dest);
  404746:	682f      	ldr	r7, [r5, #0]
  404748:	8878      	ldrh	r0, [r7, #2]
  40474a:	47b0      	blx	r6
  40474c:	8078      	strh	r0, [r7, #2]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  40474e:	682f      	ldr	r7, [r5, #0]
  404750:	6878      	ldr	r0, [r7, #4]
  404752:	f8df 8204 	ldr.w	r8, [pc, #516]	; 404958 <tcp_input+0x2a8>
  404756:	47c0      	blx	r8
  404758:	6078      	str	r0, [r7, #4]
  40475a:	4b6e      	ldr	r3, [pc, #440]	; (404914 <tcp_input+0x264>)
  40475c:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  40475e:	682f      	ldr	r7, [r5, #0]
  404760:	68b8      	ldr	r0, [r7, #8]
  404762:	47c0      	blx	r8
  404764:	60b8      	str	r0, [r7, #8]
  404766:	4b6c      	ldr	r3, [pc, #432]	; (404918 <tcp_input+0x268>)
  404768:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = ntohs(tcphdr->wnd);
  40476a:	682f      	ldr	r7, [r5, #0]
  40476c:	89f8      	ldrh	r0, [r7, #14]
  40476e:	47b0      	blx	r6
  404770:	81f8      	strh	r0, [r7, #14]
  flags = TCPH_FLAGS(tcphdr);
  404772:	682b      	ldr	r3, [r5, #0]
  404774:	8998      	ldrh	r0, [r3, #12]
  404776:	47b0      	blx	r6
  404778:	fa5f fe80 	uxtb.w	lr, r0
  40477c:	f00e 023f 	and.w	r2, lr, #63	; 0x3f
  404780:	4b66      	ldr	r3, [pc, #408]	; (40491c <tcp_input+0x26c>)
  404782:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
  404784:	f01e 0303 	ands.w	r3, lr, #3
  404788:	bf18      	it	ne
  40478a:	2301      	movne	r3, #1
  40478c:	8921      	ldrh	r1, [r4, #8]
  40478e:	440b      	add	r3, r1
  404790:	b299      	uxth	r1, r3
  404792:	4b63      	ldr	r3, [pc, #396]	; (404920 <tcp_input+0x270>)
  404794:	8019      	strh	r1, [r3, #0]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  404796:	4b63      	ldr	r3, [pc, #396]	; (404924 <tcp_input+0x274>)
  404798:	6818      	ldr	r0, [r3, #0]
  40479a:	2800      	cmp	r0, #0
  40479c:	f000 808b 	beq.w	4048b6 <tcp_input+0x206>
    if (pcb->remote_port == tcphdr->src &&
  4047a0:	682f      	ldr	r7, [r5, #0]
  4047a2:	883e      	ldrh	r6, [r7, #0]
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  4047a4:	4b57      	ldr	r3, [pc, #348]	; (404904 <tcp_input+0x254>)
  4047a6:	f8d3 c000 	ldr.w	ip, [r3]
       ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
  4047aa:	4b54      	ldr	r3, [pc, #336]	; (4048fc <tcp_input+0x24c>)
  4047ac:	f8d3 8000 	ldr.w	r8, [r3]
  4047b0:	4605      	mov	r5, r0
  4047b2:	2200      	movs	r2, #0
  4047b4:	e004      	b.n	4047c0 <tcp_input+0x110>
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  4047b6:	68eb      	ldr	r3, [r5, #12]
  4047b8:	462a      	mov	r2, r5
  4047ba:	2b00      	cmp	r3, #0
  4047bc:	d07b      	beq.n	4048b6 <tcp_input+0x206>
  4047be:	461d      	mov	r5, r3
    if (pcb->remote_port == tcphdr->src &&
  4047c0:	8bab      	ldrh	r3, [r5, #28]
  4047c2:	42b3      	cmp	r3, r6
  4047c4:	d1f7      	bne.n	4047b6 <tcp_input+0x106>
  4047c6:	f8b5 901a 	ldrh.w	r9, [r5, #26]
  4047ca:	887b      	ldrh	r3, [r7, #2]
  4047cc:	4599      	cmp	r9, r3
  4047ce:	d1f2      	bne.n	4047b6 <tcp_input+0x106>
       pcb->local_port == tcphdr->dest &&
  4047d0:	686b      	ldr	r3, [r5, #4]
  4047d2:	4563      	cmp	r3, ip
  4047d4:	d1ef      	bne.n	4047b6 <tcp_input+0x106>
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  4047d6:	682b      	ldr	r3, [r5, #0]
  4047d8:	4543      	cmp	r3, r8
  4047da:	d1ec      	bne.n	4047b6 <tcp_input+0x106>
      if (prev != NULL) {
  4047dc:	b122      	cbz	r2, 4047e8 <tcp_input+0x138>
        prev->next = pcb->next;
  4047de:	68eb      	ldr	r3, [r5, #12]
  4047e0:	60d3      	str	r3, [r2, #12]
        pcb->next = tcp_active_pcbs;
  4047e2:	60e8      	str	r0, [r5, #12]
        tcp_active_pcbs = pcb;
  4047e4:	4b4f      	ldr	r3, [pc, #316]	; (404924 <tcp_input+0x274>)
  4047e6:	601d      	str	r5, [r3, #0]
  if (pcb == NULL) {
  4047e8:	2d00      	cmp	r5, #0
  4047ea:	d064      	beq.n	4048b6 <tcp_input+0x206>
    inseg.next = NULL;
  4047ec:	4b4e      	ldr	r3, [pc, #312]	; (404928 <tcp_input+0x278>)
  4047ee:	2200      	movs	r2, #0
  4047f0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
  4047f2:	8921      	ldrh	r1, [r4, #8]
  4047f4:	8119      	strh	r1, [r3, #8]
    inseg.p = p;
  4047f6:	605c      	str	r4, [r3, #4]
    inseg.tcphdr = tcphdr;
  4047f8:	611f      	str	r7, [r3, #16]
    recv_data = NULL;
  4047fa:	4b4c      	ldr	r3, [pc, #304]	; (40492c <tcp_input+0x27c>)
  4047fc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
  4047fe:	4b4c      	ldr	r3, [pc, #304]	; (404930 <tcp_input+0x280>)
  404800:	701a      	strb	r2, [r3, #0]
    if (flags & TCP_PSH) {
  404802:	f01e 0f08 	tst.w	lr, #8
  404806:	d003      	beq.n	404810 <tcp_input+0x160>
      p->flags |= PBUF_FLAG_PUSH;
  404808:	7b63      	ldrb	r3, [r4, #13]
  40480a:	f043 0301 	orr.w	r3, r3, #1
  40480e:	7363      	strb	r3, [r4, #13]
    if (pcb->refused_data != NULL) {
  404810:	6fab      	ldr	r3, [r5, #120]	; 0x78
  404812:	b15b      	cbz	r3, 40482c <tcp_input+0x17c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  404814:	4628      	mov	r0, r5
  404816:	4b47      	ldr	r3, [pc, #284]	; (404934 <tcp_input+0x284>)
  404818:	4798      	blx	r3
  40481a:	f110 0f0a 	cmn.w	r0, #10
  40481e:	d03a      	beq.n	404896 <tcp_input+0x1e6>
  404820:	6fab      	ldr	r3, [r5, #120]	; 0x78
  404822:	b11b      	cbz	r3, 40482c <tcp_input+0x17c>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  404824:	4b3e      	ldr	r3, [pc, #248]	; (404920 <tcp_input+0x270>)
  404826:	881b      	ldrh	r3, [r3, #0]
  404828:	2b00      	cmp	r3, #0
  40482a:	d134      	bne.n	404896 <tcp_input+0x1e6>
    tcp_input_pcb = pcb;
  40482c:	4b42      	ldr	r3, [pc, #264]	; (404938 <tcp_input+0x288>)
  40482e:	601d      	str	r5, [r3, #0]
  if (flags & TCP_RST) {
  404830:	4b3a      	ldr	r3, [pc, #232]	; (40491c <tcp_input+0x26c>)
  404832:	781b      	ldrb	r3, [r3, #0]
  404834:	f013 0f04 	tst.w	r3, #4
  404838:	f000 8163 	beq.w	404b02 <tcp_input+0x452>
    if (pcb->state == SYN_SENT) {
  40483c:	7e2b      	ldrb	r3, [r5, #24]
  40483e:	2b02      	cmp	r3, #2
  404840:	f000 814d 	beq.w	404ade <tcp_input+0x42e>
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  404844:	4b33      	ldr	r3, [pc, #204]	; (404914 <tcp_input+0x264>)
  404846:	681b      	ldr	r3, [r3, #0]
  404848:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  40484a:	1a9b      	subs	r3, r3, r2
  40484c:	d408      	bmi.n	404860 <tcp_input+0x1b0>
  40484e:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
  404850:	1a9b      	subs	r3, r3, r2
  u8_t acceptable = 0;
  404852:	2b00      	cmp	r3, #0
  404854:	bfcc      	ite	gt
  404856:	2300      	movgt	r3, #0
  404858:	2301      	movle	r3, #1
    if (acceptable) {
  40485a:	2b00      	cmp	r3, #0
  40485c:	f040 8147 	bne.w	404aee <tcp_input+0x43e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
  404860:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  404862:	4b2c      	ldr	r3, [pc, #176]	; (404914 <tcp_input+0x264>)
  404864:	6819      	ldr	r1, [r3, #0]
  404866:	4835      	ldr	r0, [pc, #212]	; (40493c <tcp_input+0x28c>)
  404868:	4b35      	ldr	r3, [pc, #212]	; (404940 <tcp_input+0x290>)
  40486a:	4798      	blx	r3
      if (recv_flags & TF_RESET) {
  40486c:	4b30      	ldr	r3, [pc, #192]	; (404930 <tcp_input+0x280>)
  40486e:	781b      	ldrb	r3, [r3, #0]
  404870:	f013 0f08 	tst.w	r3, #8
  404874:	f000 83bd 	beq.w	404ff2 <tcp_input+0x942>
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
  404878:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  40487c:	b11b      	cbz	r3, 404886 <tcp_input+0x1d6>
  40487e:	f06f 010a 	mvn.w	r1, #10
  404882:	6928      	ldr	r0, [r5, #16]
  404884:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  404886:	4629      	mov	r1, r5
  404888:	4826      	ldr	r0, [pc, #152]	; (404924 <tcp_input+0x274>)
  40488a:	4b2e      	ldr	r3, [pc, #184]	; (404944 <tcp_input+0x294>)
  40488c:	4798      	blx	r3
        memp_free(MEMP_TCP_PCB, pcb);
  40488e:	4629      	mov	r1, r5
  404890:	2002      	movs	r0, #2
  404892:	4b2d      	ldr	r3, [pc, #180]	; (404948 <tcp_input+0x298>)
  404894:	4798      	blx	r3
    tcp_input_pcb = NULL;
  404896:	2300      	movs	r3, #0
  404898:	4a27      	ldr	r2, [pc, #156]	; (404938 <tcp_input+0x288>)
  40489a:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
  40489c:	4a23      	ldr	r2, [pc, #140]	; (40492c <tcp_input+0x27c>)
  40489e:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL)
  4048a0:	4b21      	ldr	r3, [pc, #132]	; (404928 <tcp_input+0x278>)
  4048a2:	6858      	ldr	r0, [r3, #4]
  4048a4:	2800      	cmp	r0, #0
  4048a6:	f43f af1b 	beq.w	4046e0 <tcp_input+0x30>
      pbuf_free(inseg.p);
  4048aa:	4b13      	ldr	r3, [pc, #76]	; (4048f8 <tcp_input+0x248>)
  4048ac:	4798      	blx	r3
      inseg.p = NULL;
  4048ae:	2200      	movs	r2, #0
  4048b0:	4b1d      	ldr	r3, [pc, #116]	; (404928 <tcp_input+0x278>)
  4048b2:	605a      	str	r2, [r3, #4]
  4048b4:	e714      	b.n	4046e0 <tcp_input+0x30>
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  4048b6:	4b25      	ldr	r3, [pc, #148]	; (40494c <tcp_input+0x29c>)
  4048b8:	6818      	ldr	r0, [r3, #0]
  4048ba:	2800      	cmp	r0, #0
  4048bc:	d079      	beq.n	4049b2 <tcp_input+0x302>
      if (pcb->remote_port == tcphdr->src &&
  4048be:	4b0c      	ldr	r3, [pc, #48]	; (4048f0 <tcp_input+0x240>)
  4048c0:	681f      	ldr	r7, [r3, #0]
  4048c2:	883a      	ldrh	r2, [r7, #0]
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  4048c4:	4b0f      	ldr	r3, [pc, #60]	; (404904 <tcp_input+0x254>)
  4048c6:	f8d3 8000 	ldr.w	r8, [r3]
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
  4048ca:	4b0c      	ldr	r3, [pc, #48]	; (4048fc <tcp_input+0x24c>)
  4048cc:	f8d3 c000 	ldr.w	ip, [r3]
  4048d0:	e046      	b.n	404960 <tcp_input+0x2b0>
  } else if (flags & TCP_FIN) {
  4048d2:	f01e 0f01 	tst.w	lr, #1
  4048d6:	d002      	beq.n	4048de <tcp_input+0x22e>
    pcb->tmr = tcp_ticks;
  4048d8:	4b1d      	ldr	r3, [pc, #116]	; (404950 <tcp_input+0x2a0>)
  4048da:	681b      	ldr	r3, [r3, #0]
  4048dc:	6243      	str	r3, [r0, #36]	; 0x24
  if ((tcplen > 0))  {
  4048de:	2900      	cmp	r1, #0
  4048e0:	d063      	beq.n	4049aa <tcp_input+0x2fa>
    pcb->flags |= TF_ACK_NOW;
  4048e2:	7f83      	ldrb	r3, [r0, #30]
  4048e4:	f043 0302 	orr.w	r3, r3, #2
  4048e8:	7783      	strb	r3, [r0, #30]
    return tcp_output(pcb);
  4048ea:	4b1a      	ldr	r3, [pc, #104]	; (404954 <tcp_input+0x2a4>)
  4048ec:	4798      	blx	r3
  4048ee:	e05c      	b.n	4049aa <tcp_input+0x2fa>
  4048f0:	20402654 	.word	0x20402654
  4048f4:	004027d5 	.word	0x004027d5
  4048f8:	00402861 	.word	0x00402861
  4048fc:	204039a0 	.word	0x204039a0
  404900:	00401a99 	.word	0x00401a99
  404904:	20403998 	.word	0x20403998
  404908:	00401655 	.word	0x00401655
  40490c:	00403b65 	.word	0x00403b65
  404910:	00401387 	.word	0x00401387
  404914:	20402650 	.word	0x20402650
  404918:	2040262c 	.word	0x2040262c
  40491c:	20402630 	.word	0x20402630
  404920:	20402658 	.word	0x20402658
  404924:	204049cc 	.word	0x204049cc
  404928:	20402634 	.word	0x20402634
  40492c:	20402648 	.word	0x20402648
  404930:	2040264c 	.word	0x2040264c
  404934:	00403995 	.word	0x00403995
  404938:	204049e4 	.word	0x204049e4
  40493c:	0040b014 	.word	0x0040b014
  404940:	00407289 	.word	0x00407289
  404944:	00403489 	.word	0x00403489
  404948:	00402689 	.word	0x00402689
  40494c:	204049e0 	.word	0x204049e0
  404950:	204049d0 	.word	0x204049d0
  404954:	0040576d 	.word	0x0040576d
  404958:	004013a9 	.word	0x004013a9
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  40495c:	68c0      	ldr	r0, [r0, #12]
  40495e:	b340      	cbz	r0, 4049b2 <tcp_input+0x302>
      if (pcb->remote_port == tcphdr->src &&
  404960:	8b83      	ldrh	r3, [r0, #28]
  404962:	4293      	cmp	r3, r2
  404964:	d1fa      	bne.n	40495c <tcp_input+0x2ac>
         pcb->local_port == tcphdr->dest &&
  404966:	8b45      	ldrh	r5, [r0, #26]
      if (pcb->remote_port == tcphdr->src &&
  404968:	887e      	ldrh	r6, [r7, #2]
  40496a:	42ae      	cmp	r6, r5
  40496c:	d1f6      	bne.n	40495c <tcp_input+0x2ac>
         pcb->local_port == tcphdr->dest &&
  40496e:	6846      	ldr	r6, [r0, #4]
  404970:	4546      	cmp	r6, r8
  404972:	d1f3      	bne.n	40495c <tcp_input+0x2ac>
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  404974:	6806      	ldr	r6, [r0, #0]
  404976:	4566      	cmp	r6, ip
  404978:	d1f0      	bne.n	40495c <tcp_input+0x2ac>
  if (flags & TCP_RST)  {
  40497a:	f01e 0f04 	tst.w	lr, #4
  40497e:	d114      	bne.n	4049aa <tcp_input+0x2fa>
  if (flags & TCP_SYN) {
  404980:	f01e 0f02 	tst.w	lr, #2
  404984:	d0a5      	beq.n	4048d2 <tcp_input+0x222>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
  404986:	4a82      	ldr	r2, [pc, #520]	; (404b90 <tcp_input+0x4e0>)
  404988:	6816      	ldr	r6, [r2, #0]
  40498a:	6a82      	ldr	r2, [r0, #40]	; 0x28
  40498c:	1ab2      	subs	r2, r6, r2
  40498e:	d4a6      	bmi.n	4048de <tcp_input+0x22e>
  404990:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
  404992:	1bd2      	subs	r2, r2, r7
  404994:	2a00      	cmp	r2, #0
  404996:	dca2      	bgt.n	4048de <tcp_input+0x22e>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  404998:	9301      	str	r3, [sp, #4]
  40499a:	9500      	str	r5, [sp, #0]
  40499c:	4b7d      	ldr	r3, [pc, #500]	; (404b94 <tcp_input+0x4e4>)
  40499e:	4a7e      	ldr	r2, [pc, #504]	; (404b98 <tcp_input+0x4e8>)
  4049a0:	4431      	add	r1, r6
  4049a2:	487e      	ldr	r0, [pc, #504]	; (404b9c <tcp_input+0x4ec>)
  4049a4:	6800      	ldr	r0, [r0, #0]
  4049a6:	4d7e      	ldr	r5, [pc, #504]	; (404ba0 <tcp_input+0x4f0>)
  4049a8:	47a8      	blx	r5
        pbuf_free(p);
  4049aa:	4620      	mov	r0, r4
  4049ac:	4b7d      	ldr	r3, [pc, #500]	; (404ba4 <tcp_input+0x4f4>)
  4049ae:	4798      	blx	r3
        return;
  4049b0:	e696      	b.n	4046e0 <tcp_input+0x30>
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  4049b2:	4b7d      	ldr	r3, [pc, #500]	; (404ba8 <tcp_input+0x4f8>)
  4049b4:	f8d3 c000 	ldr.w	ip, [r3]
  4049b8:	f1bc 0f00 	cmp.w	ip, #0
  4049bc:	f000 8387 	beq.w	4050ce <tcp_input+0xa1e>
      if (lpcb->local_port == tcphdr->dest) {
  4049c0:	4b7a      	ldr	r3, [pc, #488]	; (404bac <tcp_input+0x4fc>)
  4049c2:	681f      	ldr	r7, [r3, #0]
  4049c4:	8878      	ldrh	r0, [r7, #2]
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
  4049c6:	4b74      	ldr	r3, [pc, #464]	; (404b98 <tcp_input+0x4e8>)
  4049c8:	681e      	ldr	r6, [r3, #0]
  4049ca:	4665      	mov	r5, ip
  4049cc:	2200      	movs	r2, #0
  4049ce:	e005      	b.n	4049dc <tcp_input+0x32c>
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  4049d0:	68eb      	ldr	r3, [r5, #12]
  4049d2:	462a      	mov	r2, r5
  4049d4:	2b00      	cmp	r3, #0
  4049d6:	f000 837a 	beq.w	4050ce <tcp_input+0xa1e>
  4049da:	461d      	mov	r5, r3
      if (lpcb->local_port == tcphdr->dest) {
  4049dc:	8b6b      	ldrh	r3, [r5, #26]
  4049de:	4283      	cmp	r3, r0
  4049e0:	d1f6      	bne.n	4049d0 <tcp_input+0x320>
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
  4049e2:	682b      	ldr	r3, [r5, #0]
  4049e4:	42b3      	cmp	r3, r6
  4049e6:	d002      	beq.n	4049ee <tcp_input+0x33e>
            ip_addr_isany(&(lpcb->local_ip))) {
  4049e8:	b10d      	cbz	r5, 4049ee <tcp_input+0x33e>
  4049ea:	2b00      	cmp	r3, #0
  4049ec:	d1f0      	bne.n	4049d0 <tcp_input+0x320>
    if (lpcb != NULL) {
  4049ee:	2d00      	cmp	r5, #0
  4049f0:	f000 836d 	beq.w	4050ce <tcp_input+0xa1e>
      if (prev != NULL) {
  4049f4:	b12a      	cbz	r2, 404a02 <tcp_input+0x352>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
  4049f6:	68eb      	ldr	r3, [r5, #12]
  4049f8:	60d3      	str	r3, [r2, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
  4049fa:	f8c5 c00c 	str.w	ip, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
  4049fe:	4b6a      	ldr	r3, [pc, #424]	; (404ba8 <tcp_input+0x4f8>)
  404a00:	601d      	str	r5, [r3, #0]
  if (flags & TCP_RST) {
  404a02:	f01e 0f04 	tst.w	lr, #4
  404a06:	d105      	bne.n	404a14 <tcp_input+0x364>
  if (flags & TCP_ACK) {
  404a08:	f01e 0f10 	tst.w	lr, #16
  404a0c:	d106      	bne.n	404a1c <tcp_input+0x36c>
  } else if (flags & TCP_SYN) {
  404a0e:	f01e 0f02 	tst.w	lr, #2
  404a12:	d111      	bne.n	404a38 <tcp_input+0x388>
      pbuf_free(p);
  404a14:	4620      	mov	r0, r4
  404a16:	4b63      	ldr	r3, [pc, #396]	; (404ba4 <tcp_input+0x4f4>)
  404a18:	4798      	blx	r3
      return;
  404a1a:	e661      	b.n	4046e0 <tcp_input+0x30>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  404a1c:	4b5c      	ldr	r3, [pc, #368]	; (404b90 <tcp_input+0x4e0>)
  404a1e:	6818      	ldr	r0, [r3, #0]
  404a20:	883b      	ldrh	r3, [r7, #0]
  404a22:	9301      	str	r3, [sp, #4]
  404a24:	887b      	ldrh	r3, [r7, #2]
  404a26:	9300      	str	r3, [sp, #0]
  404a28:	4b5a      	ldr	r3, [pc, #360]	; (404b94 <tcp_input+0x4e4>)
  404a2a:	4a5b      	ldr	r2, [pc, #364]	; (404b98 <tcp_input+0x4e8>)
  404a2c:	4401      	add	r1, r0
  404a2e:	485b      	ldr	r0, [pc, #364]	; (404b9c <tcp_input+0x4ec>)
  404a30:	6800      	ldr	r0, [r0, #0]
  404a32:	4d5b      	ldr	r5, [pc, #364]	; (404ba0 <tcp_input+0x4f0>)
  404a34:	47a8      	blx	r5
  404a36:	e7ed      	b.n	404a14 <tcp_input+0x364>
    LWIP_DEBUGF(TCP_DEBUG, ("TCP connection request %"U16_F" -> %"U16_F".\n", tcphdr->src, tcphdr->dest));
  404a38:	887a      	ldrh	r2, [r7, #2]
  404a3a:	8839      	ldrh	r1, [r7, #0]
  404a3c:	485c      	ldr	r0, [pc, #368]	; (404bb0 <tcp_input+0x500>)
  404a3e:	4b5d      	ldr	r3, [pc, #372]	; (404bb4 <tcp_input+0x504>)
  404a40:	4798      	blx	r3
    npcb = tcp_alloc(pcb->prio);
  404a42:	7e68      	ldrb	r0, [r5, #25]
  404a44:	4b5c      	ldr	r3, [pc, #368]	; (404bb8 <tcp_input+0x508>)
  404a46:	4798      	blx	r3
    if (npcb == NULL) {
  404a48:	4606      	mov	r6, r0
  404a4a:	2800      	cmp	r0, #0
  404a4c:	d03f      	beq.n	404ace <tcp_input+0x41e>
    ip_addr_copy(npcb->local_ip, current_iphdr_dest);
  404a4e:	4b52      	ldr	r3, [pc, #328]	; (404b98 <tcp_input+0x4e8>)
  404a50:	681b      	ldr	r3, [r3, #0]
  404a52:	6003      	str	r3, [r0, #0]
    npcb->local_port = pcb->local_port;
  404a54:	8b6b      	ldrh	r3, [r5, #26]
  404a56:	8343      	strh	r3, [r0, #26]
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
  404a58:	4b4e      	ldr	r3, [pc, #312]	; (404b94 <tcp_input+0x4e4>)
  404a5a:	681b      	ldr	r3, [r3, #0]
  404a5c:	6043      	str	r3, [r0, #4]
    npcb->remote_port = tcphdr->src;
  404a5e:	4b53      	ldr	r3, [pc, #332]	; (404bac <tcp_input+0x4fc>)
  404a60:	681a      	ldr	r2, [r3, #0]
  404a62:	8813      	ldrh	r3, [r2, #0]
  404a64:	8383      	strh	r3, [r0, #28]
    npcb->state = SYN_RCVD;
  404a66:	2303      	movs	r3, #3
  404a68:	7603      	strb	r3, [r0, #24]
    npcb->rcv_nxt = seqno + 1;
  404a6a:	4b49      	ldr	r3, [pc, #292]	; (404b90 <tcp_input+0x4e0>)
  404a6c:	681b      	ldr	r3, [r3, #0]
  404a6e:	1c59      	adds	r1, r3, #1
  404a70:	6281      	str	r1, [r0, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
  404a72:	6301      	str	r1, [r0, #48]	; 0x30
    npcb->snd_wnd = tcphdr->wnd;
  404a74:	89d1      	ldrh	r1, [r2, #14]
  404a76:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
    npcb->snd_wnd_max = tcphdr->wnd;
  404a7a:	89d2      	ldrh	r2, [r2, #14]
  404a7c:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
    npcb->ssthresh = npcb->snd_wnd;
  404a80:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
  404a84:	3b01      	subs	r3, #1
  404a86:	6543      	str	r3, [r0, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
  404a88:	692b      	ldr	r3, [r5, #16]
  404a8a:	6103      	str	r3, [r0, #16]
    npcb->accept = pcb->accept;
  404a8c:	696b      	ldr	r3, [r5, #20]
  404a8e:	6143      	str	r3, [r0, #20]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
  404a90:	7a2b      	ldrb	r3, [r5, #8]
  404a92:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  404a96:	7203      	strb	r3, [r0, #8]
    TCP_REG_ACTIVE(npcb);
  404a98:	4b48      	ldr	r3, [pc, #288]	; (404bbc <tcp_input+0x50c>)
  404a9a:	681a      	ldr	r2, [r3, #0]
  404a9c:	60c2      	str	r2, [r0, #12]
  404a9e:	6018      	str	r0, [r3, #0]
  404aa0:	4b47      	ldr	r3, [pc, #284]	; (404bc0 <tcp_input+0x510>)
  404aa2:	4798      	blx	r3
  404aa4:	2201      	movs	r2, #1
  404aa6:	4b47      	ldr	r3, [pc, #284]	; (404bc4 <tcp_input+0x514>)
  404aa8:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
  404aaa:	4630      	mov	r0, r6
  404aac:	4b46      	ldr	r3, [pc, #280]	; (404bc8 <tcp_input+0x518>)
  404aae:	4798      	blx	r3
    npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
  404ab0:	1d31      	adds	r1, r6, #4
  404ab2:	8ef0      	ldrh	r0, [r6, #54]	; 0x36
  404ab4:	4b45      	ldr	r3, [pc, #276]	; (404bcc <tcp_input+0x51c>)
  404ab6:	4798      	blx	r3
  404ab8:	86f0      	strh	r0, [r6, #54]	; 0x36
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
  404aba:	2112      	movs	r1, #18
  404abc:	4630      	mov	r0, r6
  404abe:	4b44      	ldr	r3, [pc, #272]	; (404bd0 <tcp_input+0x520>)
  404ac0:	4798      	blx	r3
    if (rc != ERR_OK) {
  404ac2:	b140      	cbz	r0, 404ad6 <tcp_input+0x426>
      tcp_abandon(npcb, 0);
  404ac4:	2100      	movs	r1, #0
  404ac6:	4630      	mov	r0, r6
  404ac8:	4b42      	ldr	r3, [pc, #264]	; (404bd4 <tcp_input+0x524>)
  404aca:	4798      	blx	r3
  404acc:	e7a2      	b.n	404a14 <tcp_input+0x364>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
  404ace:	4842      	ldr	r0, [pc, #264]	; (404bd8 <tcp_input+0x528>)
  404ad0:	4b38      	ldr	r3, [pc, #224]	; (404bb4 <tcp_input+0x504>)
  404ad2:	4798      	blx	r3
  404ad4:	e79e      	b.n	404a14 <tcp_input+0x364>
    return tcp_output(npcb);
  404ad6:	4630      	mov	r0, r6
  404ad8:	4b40      	ldr	r3, [pc, #256]	; (404bdc <tcp_input+0x52c>)
  404ada:	4798      	blx	r3
  404adc:	e79a      	b.n	404a14 <tcp_input+0x364>
      if (ackno == pcb->snd_nxt) {
  404ade:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  404ae0:	4a2e      	ldr	r2, [pc, #184]	; (404b9c <tcp_input+0x4ec>)
  404ae2:	6812      	ldr	r2, [r2, #0]
  u8_t acceptable = 0;
  404ae4:	4293      	cmp	r3, r2
  404ae6:	bf14      	ite	ne
  404ae8:	2300      	movne	r3, #0
  404aea:	2301      	moveq	r3, #1
  404aec:	e6b5      	b.n	40485a <tcp_input+0x1aa>
      recv_flags |= TF_RESET;
  404aee:	4a3c      	ldr	r2, [pc, #240]	; (404be0 <tcp_input+0x530>)
  404af0:	7813      	ldrb	r3, [r2, #0]
  404af2:	f043 0308 	orr.w	r3, r3, #8
  404af6:	7013      	strb	r3, [r2, #0]
      pcb->flags &= ~TF_ACK_DELAY;
  404af8:	7fab      	ldrb	r3, [r5, #30]
  404afa:	f023 0301 	bic.w	r3, r3, #1
  404afe:	77ab      	strb	r3, [r5, #30]
  404b00:	e6b4      	b.n	40486c <tcp_input+0x1bc>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) { 
  404b02:	f013 0f02 	tst.w	r3, #2
  404b06:	d009      	beq.n	404b1c <tcp_input+0x46c>
  404b08:	7e2b      	ldrb	r3, [r5, #24]
  404b0a:	3b02      	subs	r3, #2
  404b0c:	b2db      	uxtb	r3, r3
  404b0e:	2b01      	cmp	r3, #1
  404b10:	d904      	bls.n	404b1c <tcp_input+0x46c>
    tcp_ack_now(pcb);
  404b12:	7fab      	ldrb	r3, [r5, #30]
  404b14:	f043 0302 	orr.w	r3, r3, #2
  404b18:	77ab      	strb	r3, [r5, #30]
  404b1a:	e6a7      	b.n	40486c <tcp_input+0x1bc>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
  404b1c:	7fab      	ldrb	r3, [r5, #30]
  404b1e:	f013 0f10 	tst.w	r3, #16
  404b22:	d102      	bne.n	404b2a <tcp_input+0x47a>
    pcb->tmr = tcp_ticks;
  404b24:	4b2f      	ldr	r3, [pc, #188]	; (404be4 <tcp_input+0x534>)
  404b26:	681b      	ldr	r3, [r3, #0]
  404b28:	626b      	str	r3, [r5, #36]	; 0x24
  pcb->keep_cnt_sent = 0;
  404b2a:	2300      	movs	r3, #0
  404b2c:	f885 3096 	strb.w	r3, [r5, #150]	; 0x96
  tcp_parseopt(pcb);
  404b30:	4628      	mov	r0, r5
  404b32:	4b25      	ldr	r3, [pc, #148]	; (404bc8 <tcp_input+0x518>)
  404b34:	4798      	blx	r3
  switch (pcb->state) {
  404b36:	7e2b      	ldrb	r3, [r5, #24]
  404b38:	3b02      	subs	r3, #2
  404b3a:	2b07      	cmp	r3, #7
  404b3c:	f63f ae96 	bhi.w	40486c <tcp_input+0x1bc>
  404b40:	e8df f013 	tbh	[pc, r3, lsl #1]
  404b44:	00ad0008 	.word	0x00ad0008
  404b48:	01220112 	.word	0x01220112
  404b4c:	011201b6 	.word	0x011201b6
  404b50:	023b01f8 	.word	0x023b01f8
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
  404b54:	4b24      	ldr	r3, [pc, #144]	; (404be8 <tcp_input+0x538>)
  404b56:	781b      	ldrb	r3, [r3, #0]
  404b58:	f003 0312 	and.w	r3, r3, #18
  404b5c:	2b12      	cmp	r3, #18
  404b5e:	d047      	beq.n	404bf0 <tcp_input+0x540>
    else if (flags & TCP_ACK) {
  404b60:	4b21      	ldr	r3, [pc, #132]	; (404be8 <tcp_input+0x538>)
  404b62:	781b      	ldrb	r3, [r3, #0]
  404b64:	f013 0f10 	tst.w	r3, #16
  404b68:	f43f ae80 	beq.w	40486c <tcp_input+0x1bc>
        tcphdr->dest, tcphdr->src);
  404b6c:	4b0f      	ldr	r3, [pc, #60]	; (404bac <tcp_input+0x4fc>)
  404b6e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  404b70:	4a1e      	ldr	r2, [pc, #120]	; (404bec <tcp_input+0x53c>)
  404b72:	8810      	ldrh	r0, [r2, #0]
  404b74:	4a06      	ldr	r2, [pc, #24]	; (404b90 <tcp_input+0x4e0>)
  404b76:	6811      	ldr	r1, [r2, #0]
  404b78:	881a      	ldrh	r2, [r3, #0]
  404b7a:	9201      	str	r2, [sp, #4]
  404b7c:	885b      	ldrh	r3, [r3, #2]
  404b7e:	9300      	str	r3, [sp, #0]
  404b80:	4b04      	ldr	r3, [pc, #16]	; (404b94 <tcp_input+0x4e4>)
  404b82:	4a05      	ldr	r2, [pc, #20]	; (404b98 <tcp_input+0x4e8>)
  404b84:	4401      	add	r1, r0
  404b86:	4805      	ldr	r0, [pc, #20]	; (404b9c <tcp_input+0x4ec>)
  404b88:	6800      	ldr	r0, [r0, #0]
  404b8a:	4c05      	ldr	r4, [pc, #20]	; (404ba0 <tcp_input+0x4f0>)
  404b8c:	47a0      	blx	r4
  404b8e:	e66d      	b.n	40486c <tcp_input+0x1bc>
  404b90:	20402650 	.word	0x20402650
  404b94:	20403998 	.word	0x20403998
  404b98:	204039a0 	.word	0x204039a0
  404b9c:	2040262c 	.word	0x2040262c
  404ba0:	00405a45 	.word	0x00405a45
  404ba4:	00402861 	.word	0x00402861
  404ba8:	204049d4 	.word	0x204049d4
  404bac:	20402654 	.word	0x20402654
  404bb0:	0040afc4 	.word	0x0040afc4
  404bb4:	00407289 	.word	0x00407289
  404bb8:	00403781 	.word	0x00403781
  404bbc:	204049cc 	.word	0x204049cc
  404bc0:	00402255 	.word	0x00402255
  404bc4:	204049c8 	.word	0x204049c8
  404bc8:	00403c71 	.word	0x00403c71
  404bcc:	004038e9 	.word	0x004038e9
  404bd0:	004055d1 	.word	0x004055d1
  404bd4:	004036b5 	.word	0x004036b5
  404bd8:	0040afe8 	.word	0x0040afe8
  404bdc:	0040576d 	.word	0x0040576d
  404be0:	2040264c 	.word	0x2040264c
  404be4:	204049d0 	.word	0x204049d0
  404be8:	20402630 	.word	0x20402630
  404bec:	20402658 	.word	0x20402658
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
  404bf0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  404bf2:	691b      	ldr	r3, [r3, #16]
  404bf4:	6858      	ldr	r0, [r3, #4]
  404bf6:	4b95      	ldr	r3, [pc, #596]	; (404e4c <tcp_input+0x79c>)
  404bf8:	4798      	blx	r3
  404bfa:	3001      	adds	r0, #1
  404bfc:	4b94      	ldr	r3, [pc, #592]	; (404e50 <tcp_input+0x7a0>)
  404bfe:	681b      	ldr	r3, [r3, #0]
  404c00:	4298      	cmp	r0, r3
  404c02:	d1ad      	bne.n	404b60 <tcp_input+0x4b0>
      pcb->snd_buf++;
  404c04:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
  404c08:	3301      	adds	r3, #1
  404c0a:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
      pcb->rcv_nxt = seqno + 1;
  404c0e:	4b91      	ldr	r3, [pc, #580]	; (404e54 <tcp_input+0x7a4>)
  404c10:	681b      	ldr	r3, [r3, #0]
  404c12:	1c5a      	adds	r2, r3, #1
  404c14:	62aa      	str	r2, [r5, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  404c16:	632a      	str	r2, [r5, #48]	; 0x30
      pcb->lastack = ackno;
  404c18:	64a8      	str	r0, [r5, #72]	; 0x48
      pcb->snd_wnd = tcphdr->wnd;
  404c1a:	4a8f      	ldr	r2, [pc, #572]	; (404e58 <tcp_input+0x7a8>)
  404c1c:	6812      	ldr	r2, [r2, #0]
  404c1e:	89d1      	ldrh	r1, [r2, #14]
  404c20:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
      pcb->snd_wnd_max = tcphdr->wnd;
  404c24:	89d2      	ldrh	r2, [r2, #14]
  404c26:	f8a5 2062 	strh.w	r2, [r5, #98]	; 0x62
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
  404c2a:	3b01      	subs	r3, #1
  404c2c:	656b      	str	r3, [r5, #84]	; 0x54
      pcb->state = ESTABLISHED;
  404c2e:	2304      	movs	r3, #4
  404c30:	762b      	strb	r3, [r5, #24]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
  404c32:	18e9      	adds	r1, r5, r3
  404c34:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
  404c36:	4b89      	ldr	r3, [pc, #548]	; (404e5c <tcp_input+0x7ac>)
  404c38:	4798      	blx	r3
  404c3a:	86e8      	strh	r0, [r5, #54]	; 0x36
      pcb->ssthresh = pcb->mss * 10;
  404c3c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
  404c40:	005b      	lsls	r3, r3, #1
  404c42:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
  404c46:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
  404c4a:	2b01      	cmp	r3, #1
  404c4c:	d101      	bne.n	404c52 <tcp_input+0x5a2>
  404c4e:	0040      	lsls	r0, r0, #1
  404c50:	b280      	uxth	r0, r0
  404c52:	f8a5 004c 	strh.w	r0, [r5, #76]	; 0x4c
      --pcb->snd_queuelen;
  404c56:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
  404c5a:	3b01      	subs	r3, #1
  404c5c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
      rseg = pcb->unacked;
  404c60:	6f28      	ldr	r0, [r5, #112]	; 0x70
      pcb->unacked = rseg->next;
  404c62:	6803      	ldr	r3, [r0, #0]
  404c64:	672b      	str	r3, [r5, #112]	; 0x70
      tcp_seg_free(rseg);
  404c66:	4b7e      	ldr	r3, [pc, #504]	; (404e60 <tcp_input+0x7b0>)
  404c68:	4798      	blx	r3
      if(pcb->unacked == NULL)
  404c6a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  404c6c:	b993      	cbnz	r3, 404c94 <tcp_input+0x5e4>
        pcb->rtime = -1;
  404c6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404c72:	86ab      	strh	r3, [r5, #52]	; 0x34
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
  404c74:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
  404c78:	b13b      	cbz	r3, 404c8a <tcp_input+0x5da>
  404c7a:	2200      	movs	r2, #0
  404c7c:	4629      	mov	r1, r5
  404c7e:	6928      	ldr	r0, [r5, #16]
  404c80:	4798      	blx	r3
      if (err == ERR_ABRT) {
  404c82:	f110 0f0a 	cmn.w	r0, #10
  404c86:	f43f ae06 	beq.w	404896 <tcp_input+0x1e6>
      tcp_ack_now(pcb);
  404c8a:	7fab      	ldrb	r3, [r5, #30]
  404c8c:	f043 0302 	orr.w	r3, r3, #2
  404c90:	77ab      	strb	r3, [r5, #30]
  404c92:	e5eb      	b.n	40486c <tcp_input+0x1bc>
        pcb->rtime = 0;
  404c94:	2300      	movs	r3, #0
  404c96:	86ab      	strh	r3, [r5, #52]	; 0x34
        pcb->nrtx = 0;
  404c98:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
  404c9c:	e7ea      	b.n	404c74 <tcp_input+0x5c4>
    if (flags & TCP_ACK) {
  404c9e:	4b71      	ldr	r3, [pc, #452]	; (404e64 <tcp_input+0x7b4>)
  404ca0:	781b      	ldrb	r3, [r3, #0]
  404ca2:	f013 0f10 	tst.w	r3, #16
  404ca6:	d050      	beq.n	404d4a <tcp_input+0x69a>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  404ca8:	4b69      	ldr	r3, [pc, #420]	; (404e50 <tcp_input+0x7a0>)
  404caa:	6818      	ldr	r0, [r3, #0]
  404cac:	6cab      	ldr	r3, [r5, #72]	; 0x48
  404cae:	43db      	mvns	r3, r3
  404cb0:	42c3      	cmn	r3, r0
  404cb2:	d403      	bmi.n	404cbc <tcp_input+0x60c>
  404cb4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  404cb6:	1ac3      	subs	r3, r0, r3
  404cb8:	2b00      	cmp	r3, #0
  404cba:	dd0f      	ble.n	404cdc <tcp_input+0x62c>
                tcphdr->dest, tcphdr->src);
  404cbc:	4b66      	ldr	r3, [pc, #408]	; (404e58 <tcp_input+0x7a8>)
  404cbe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  404cc0:	4a69      	ldr	r2, [pc, #420]	; (404e68 <tcp_input+0x7b8>)
  404cc2:	8814      	ldrh	r4, [r2, #0]
  404cc4:	4a63      	ldr	r2, [pc, #396]	; (404e54 <tcp_input+0x7a4>)
  404cc6:	6811      	ldr	r1, [r2, #0]
  404cc8:	881a      	ldrh	r2, [r3, #0]
  404cca:	9201      	str	r2, [sp, #4]
  404ccc:	885b      	ldrh	r3, [r3, #2]
  404cce:	9300      	str	r3, [sp, #0]
  404cd0:	4b66      	ldr	r3, [pc, #408]	; (404e6c <tcp_input+0x7bc>)
  404cd2:	4a67      	ldr	r2, [pc, #412]	; (404e70 <tcp_input+0x7c0>)
  404cd4:	4421      	add	r1, r4
  404cd6:	4c67      	ldr	r4, [pc, #412]	; (404e74 <tcp_input+0x7c4>)
  404cd8:	47a0      	blx	r4
  404cda:	e5c7      	b.n	40486c <tcp_input+0x1bc>
        pcb->state = ESTABLISHED;
  404cdc:	2304      	movs	r3, #4
  404cde:	762b      	strb	r3, [r5, #24]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
  404ce0:	4b65      	ldr	r3, [pc, #404]	; (404e78 <tcp_input+0x7c8>)
  404ce2:	691b      	ldr	r3, [r3, #16]
  404ce4:	885a      	ldrh	r2, [r3, #2]
  404ce6:	8819      	ldrh	r1, [r3, #0]
  404ce8:	4864      	ldr	r0, [pc, #400]	; (404e7c <tcp_input+0x7cc>)
  404cea:	4b65      	ldr	r3, [pc, #404]	; (404e80 <tcp_input+0x7d0>)
  404cec:	4798      	blx	r3
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
  404cee:	696b      	ldr	r3, [r5, #20]
  404cf0:	b143      	cbz	r3, 404d04 <tcp_input+0x654>
  404cf2:	2200      	movs	r2, #0
  404cf4:	4629      	mov	r1, r5
  404cf6:	6928      	ldr	r0, [r5, #16]
  404cf8:	4798      	blx	r3
        if (err != ERR_OK) {
  404cfa:	b138      	cbz	r0, 404d0c <tcp_input+0x65c>
          if (err != ERR_ABRT) {
  404cfc:	f110 0f0a 	cmn.w	r0, #10
  404d00:	f43f adc9 	beq.w	404896 <tcp_input+0x1e6>
            tcp_abort(pcb);
  404d04:	4628      	mov	r0, r5
  404d06:	4b5f      	ldr	r3, [pc, #380]	; (404e84 <tcp_input+0x7d4>)
  404d08:	4798      	blx	r3
  404d0a:	e5c4      	b.n	404896 <tcp_input+0x1e6>
        old_cwnd = pcb->cwnd;
  404d0c:	f8b5 404c 	ldrh.w	r4, [r5, #76]	; 0x4c
        tcp_receive(pcb);
  404d10:	4628      	mov	r0, r5
  404d12:	4b5d      	ldr	r3, [pc, #372]	; (404e88 <tcp_input+0x7d8>)
  404d14:	4798      	blx	r3
        if (pcb->acked != 0) {
  404d16:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
  404d1a:	b113      	cbz	r3, 404d22 <tcp_input+0x672>
          pcb->acked--;
  404d1c:	3b01      	subs	r3, #1
  404d1e:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
        pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
  404d22:	2c01      	cmp	r4, #1
  404d24:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
  404d26:	bf04      	itt	eq
  404d28:	005b      	lsleq	r3, r3, #1
  404d2a:	b29b      	uxtheq	r3, r3
  404d2c:	f8a5 304c 	strh.w	r3, [r5, #76]	; 0x4c
        if (recv_flags & TF_GOT_FIN) {
  404d30:	4b56      	ldr	r3, [pc, #344]	; (404e8c <tcp_input+0x7dc>)
  404d32:	781b      	ldrb	r3, [r3, #0]
  404d34:	f013 0f20 	tst.w	r3, #32
  404d38:	f43f ad98 	beq.w	40486c <tcp_input+0x1bc>
          tcp_ack_now(pcb);
  404d3c:	7fab      	ldrb	r3, [r5, #30]
  404d3e:	f043 0302 	orr.w	r3, r3, #2
  404d42:	77ab      	strb	r3, [r5, #30]
          pcb->state = CLOSE_WAIT;
  404d44:	2307      	movs	r3, #7
  404d46:	762b      	strb	r3, [r5, #24]
  404d48:	e590      	b.n	40486c <tcp_input+0x1bc>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
  404d4a:	f013 0f02 	tst.w	r3, #2
  404d4e:	f43f ad8d 	beq.w	40486c <tcp_input+0x1bc>
  404d52:	6aab      	ldr	r3, [r5, #40]	; 0x28
  404d54:	3b01      	subs	r3, #1
  404d56:	4a3f      	ldr	r2, [pc, #252]	; (404e54 <tcp_input+0x7a4>)
  404d58:	6812      	ldr	r2, [r2, #0]
  404d5a:	4293      	cmp	r3, r2
  404d5c:	f47f ad86 	bne.w	40486c <tcp_input+0x1bc>
      tcp_rexmit(pcb);
  404d60:	4628      	mov	r0, r5
  404d62:	4b4b      	ldr	r3, [pc, #300]	; (404e90 <tcp_input+0x7e0>)
  404d64:	4798      	blx	r3
  404d66:	e581      	b.n	40486c <tcp_input+0x1bc>
    tcp_receive(pcb);
  404d68:	4628      	mov	r0, r5
  404d6a:	4b47      	ldr	r3, [pc, #284]	; (404e88 <tcp_input+0x7d8>)
  404d6c:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) { /* passive close */
  404d6e:	4b47      	ldr	r3, [pc, #284]	; (404e8c <tcp_input+0x7dc>)
  404d70:	781b      	ldrb	r3, [r3, #0]
  404d72:	f013 0f20 	tst.w	r3, #32
  404d76:	f43f ad79 	beq.w	40486c <tcp_input+0x1bc>
      tcp_ack_now(pcb);
  404d7a:	7fab      	ldrb	r3, [r5, #30]
  404d7c:	f043 0302 	orr.w	r3, r3, #2
  404d80:	77ab      	strb	r3, [r5, #30]
      pcb->state = CLOSE_WAIT;
  404d82:	2307      	movs	r3, #7
  404d84:	762b      	strb	r3, [r5, #24]
  404d86:	e571      	b.n	40486c <tcp_input+0x1bc>
    tcp_receive(pcb);
  404d88:	4628      	mov	r0, r5
  404d8a:	4b3f      	ldr	r3, [pc, #252]	; (404e88 <tcp_input+0x7d8>)
  404d8c:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) {
  404d8e:	4b3f      	ldr	r3, [pc, #252]	; (404e8c <tcp_input+0x7dc>)
  404d90:	781b      	ldrb	r3, [r3, #0]
  404d92:	f013 0f20 	tst.w	r3, #32
  404d96:	d049      	beq.n	404e2c <tcp_input+0x77c>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
  404d98:	4b32      	ldr	r3, [pc, #200]	; (404e64 <tcp_input+0x7b4>)
  404d9a:	781b      	ldrb	r3, [r3, #0]
  404d9c:	f013 0f10 	tst.w	r3, #16
  404da0:	d03d      	beq.n	404e1e <tcp_input+0x76e>
  404da2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404da4:	4b2a      	ldr	r3, [pc, #168]	; (404e50 <tcp_input+0x7a0>)
  404da6:	681b      	ldr	r3, [r3, #0]
  404da8:	429a      	cmp	r2, r3
  404daa:	d138      	bne.n	404e1e <tcp_input+0x76e>
        LWIP_DEBUGF(TCP_DEBUG,
  404dac:	4b32      	ldr	r3, [pc, #200]	; (404e78 <tcp_input+0x7c8>)
  404dae:	691b      	ldr	r3, [r3, #16]
  404db0:	885a      	ldrh	r2, [r3, #2]
  404db2:	8819      	ldrh	r1, [r3, #0]
  404db4:	4837      	ldr	r0, [pc, #220]	; (404e94 <tcp_input+0x7e4>)
  404db6:	4b32      	ldr	r3, [pc, #200]	; (404e80 <tcp_input+0x7d0>)
  404db8:	4798      	blx	r3
        tcp_ack_now(pcb);
  404dba:	7fab      	ldrb	r3, [r5, #30]
  404dbc:	f043 0302 	orr.w	r3, r3, #2
  404dc0:	77ab      	strb	r3, [r5, #30]
        tcp_pcb_purge(pcb);
  404dc2:	4628      	mov	r0, r5
  404dc4:	4b34      	ldr	r3, [pc, #208]	; (404e98 <tcp_input+0x7e8>)
  404dc6:	4798      	blx	r3
        TCP_RMV_ACTIVE(pcb);
  404dc8:	4b34      	ldr	r3, [pc, #208]	; (404e9c <tcp_input+0x7ec>)
  404dca:	681b      	ldr	r3, [r3, #0]
  404dcc:	42ab      	cmp	r3, r5
  404dce:	d10e      	bne.n	404dee <tcp_input+0x73e>
  404dd0:	68ea      	ldr	r2, [r5, #12]
  404dd2:	4b32      	ldr	r3, [pc, #200]	; (404e9c <tcp_input+0x7ec>)
  404dd4:	601a      	str	r2, [r3, #0]
  404dd6:	2201      	movs	r2, #1
  404dd8:	4b31      	ldr	r3, [pc, #196]	; (404ea0 <tcp_input+0x7f0>)
  404dda:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
  404ddc:	230a      	movs	r3, #10
  404dde:	762b      	strb	r3, [r5, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
  404de0:	4b30      	ldr	r3, [pc, #192]	; (404ea4 <tcp_input+0x7f4>)
  404de2:	681a      	ldr	r2, [r3, #0]
  404de4:	60ea      	str	r2, [r5, #12]
  404de6:	601d      	str	r5, [r3, #0]
  404de8:	4b2f      	ldr	r3, [pc, #188]	; (404ea8 <tcp_input+0x7f8>)
  404dea:	4798      	blx	r3
  404dec:	e53e      	b.n	40486c <tcp_input+0x1bc>
        TCP_RMV_ACTIVE(pcb);
  404dee:	4a2f      	ldr	r2, [pc, #188]	; (404eac <tcp_input+0x7fc>)
  404df0:	6013      	str	r3, [r2, #0]
  404df2:	2200      	movs	r2, #0
  404df4:	2001      	movs	r0, #1
  404df6:	e004      	b.n	404e02 <tcp_input+0x752>
  404df8:	68d9      	ldr	r1, [r3, #12]
  404dfa:	42a9      	cmp	r1, r5
  404dfc:	d009      	beq.n	404e12 <tcp_input+0x762>
  404dfe:	4602      	mov	r2, r0
  404e00:	460b      	mov	r3, r1
  404e02:	2b00      	cmp	r3, #0
  404e04:	d1f8      	bne.n	404df8 <tcp_input+0x748>
  404e06:	2a00      	cmp	r2, #0
  404e08:	d0e5      	beq.n	404dd6 <tcp_input+0x726>
  404e0a:	2200      	movs	r2, #0
  404e0c:	4b27      	ldr	r3, [pc, #156]	; (404eac <tcp_input+0x7fc>)
  404e0e:	601a      	str	r2, [r3, #0]
  404e10:	e7e1      	b.n	404dd6 <tcp_input+0x726>
  404e12:	b10a      	cbz	r2, 404e18 <tcp_input+0x768>
  404e14:	4a25      	ldr	r2, [pc, #148]	; (404eac <tcp_input+0x7fc>)
  404e16:	6013      	str	r3, [r2, #0]
  404e18:	68ca      	ldr	r2, [r1, #12]
  404e1a:	60da      	str	r2, [r3, #12]
  404e1c:	e7db      	b.n	404dd6 <tcp_input+0x726>
        tcp_ack_now(pcb);
  404e1e:	7fab      	ldrb	r3, [r5, #30]
  404e20:	f043 0302 	orr.w	r3, r3, #2
  404e24:	77ab      	strb	r3, [r5, #30]
        pcb->state = CLOSING;
  404e26:	2308      	movs	r3, #8
  404e28:	762b      	strb	r3, [r5, #24]
  404e2a:	e51f      	b.n	40486c <tcp_input+0x1bc>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
  404e2c:	4b0d      	ldr	r3, [pc, #52]	; (404e64 <tcp_input+0x7b4>)
  404e2e:	781b      	ldrb	r3, [r3, #0]
  404e30:	f013 0f10 	tst.w	r3, #16
  404e34:	f43f ad1a 	beq.w	40486c <tcp_input+0x1bc>
  404e38:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404e3a:	4b05      	ldr	r3, [pc, #20]	; (404e50 <tcp_input+0x7a0>)
  404e3c:	681b      	ldr	r3, [r3, #0]
  404e3e:	429a      	cmp	r2, r3
  404e40:	f47f ad14 	bne.w	40486c <tcp_input+0x1bc>
      pcb->state = FIN_WAIT_2;
  404e44:	2306      	movs	r3, #6
  404e46:	762b      	strb	r3, [r5, #24]
  404e48:	e510      	b.n	40486c <tcp_input+0x1bc>
  404e4a:	bf00      	nop
  404e4c:	004013a9 	.word	0x004013a9
  404e50:	2040262c 	.word	0x2040262c
  404e54:	20402650 	.word	0x20402650
  404e58:	20402654 	.word	0x20402654
  404e5c:	004038e9 	.word	0x004038e9
  404e60:	00402f89 	.word	0x00402f89
  404e64:	20402630 	.word	0x20402630
  404e68:	20402658 	.word	0x20402658
  404e6c:	20403998 	.word	0x20403998
  404e70:	204039a0 	.word	0x204039a0
  404e74:	00405a45 	.word	0x00405a45
  404e78:	20402634 	.word	0x20402634
  404e7c:	0040b04c 	.word	0x0040b04c
  404e80:	00407289 	.word	0x00407289
  404e84:	00403759 	.word	0x00403759
  404e88:	00403dd5 	.word	0x00403dd5
  404e8c:	2040264c 	.word	0x2040264c
  404e90:	00405b2d 	.word	0x00405b2d
  404e94:	0040b074 	.word	0x0040b074
  404e98:	00403029 	.word	0x00403029
  404e9c:	204049cc 	.word	0x204049cc
  404ea0:	204049c8 	.word	0x204049c8
  404ea4:	204049e0 	.word	0x204049e0
  404ea8:	00402255 	.word	0x00402255
  404eac:	204049d8 	.word	0x204049d8
    tcp_receive(pcb);
  404eb0:	4628      	mov	r0, r5
  404eb2:	4b96      	ldr	r3, [pc, #600]	; (40510c <tcp_input+0xa5c>)
  404eb4:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) {
  404eb6:	4b96      	ldr	r3, [pc, #600]	; (405110 <tcp_input+0xa60>)
  404eb8:	781b      	ldrb	r3, [r3, #0]
  404eba:	f013 0f20 	tst.w	r3, #32
  404ebe:	f43f acd5 	beq.w	40486c <tcp_input+0x1bc>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
  404ec2:	4b94      	ldr	r3, [pc, #592]	; (405114 <tcp_input+0xa64>)
  404ec4:	691b      	ldr	r3, [r3, #16]
  404ec6:	885a      	ldrh	r2, [r3, #2]
  404ec8:	8819      	ldrh	r1, [r3, #0]
  404eca:	4893      	ldr	r0, [pc, #588]	; (405118 <tcp_input+0xa68>)
  404ecc:	4b93      	ldr	r3, [pc, #588]	; (40511c <tcp_input+0xa6c>)
  404ece:	4798      	blx	r3
      tcp_ack_now(pcb);
  404ed0:	7fab      	ldrb	r3, [r5, #30]
  404ed2:	f043 0302 	orr.w	r3, r3, #2
  404ed6:	77ab      	strb	r3, [r5, #30]
      tcp_pcb_purge(pcb);
  404ed8:	4628      	mov	r0, r5
  404eda:	4b91      	ldr	r3, [pc, #580]	; (405120 <tcp_input+0xa70>)
  404edc:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  404ede:	4b91      	ldr	r3, [pc, #580]	; (405124 <tcp_input+0xa74>)
  404ee0:	681b      	ldr	r3, [r3, #0]
  404ee2:	42ab      	cmp	r3, r5
  404ee4:	d004      	beq.n	404ef0 <tcp_input+0x840>
  404ee6:	4a90      	ldr	r2, [pc, #576]	; (405128 <tcp_input+0xa78>)
  404ee8:	6013      	str	r3, [r2, #0]
  404eea:	2200      	movs	r2, #0
  404eec:	2001      	movs	r0, #1
  404eee:	e013      	b.n	404f18 <tcp_input+0x868>
  404ef0:	68ea      	ldr	r2, [r5, #12]
  404ef2:	4b8c      	ldr	r3, [pc, #560]	; (405124 <tcp_input+0xa74>)
  404ef4:	601a      	str	r2, [r3, #0]
  404ef6:	2201      	movs	r2, #1
  404ef8:	4b8c      	ldr	r3, [pc, #560]	; (40512c <tcp_input+0xa7c>)
  404efa:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
  404efc:	230a      	movs	r3, #10
  404efe:	762b      	strb	r3, [r5, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
  404f00:	4b8b      	ldr	r3, [pc, #556]	; (405130 <tcp_input+0xa80>)
  404f02:	681a      	ldr	r2, [r3, #0]
  404f04:	60ea      	str	r2, [r5, #12]
  404f06:	601d      	str	r5, [r3, #0]
  404f08:	4b8a      	ldr	r3, [pc, #552]	; (405134 <tcp_input+0xa84>)
  404f0a:	4798      	blx	r3
  404f0c:	e4ae      	b.n	40486c <tcp_input+0x1bc>
      TCP_RMV_ACTIVE(pcb);
  404f0e:	68d9      	ldr	r1, [r3, #12]
  404f10:	42a9      	cmp	r1, r5
  404f12:	d009      	beq.n	404f28 <tcp_input+0x878>
  404f14:	4602      	mov	r2, r0
  404f16:	460b      	mov	r3, r1
  404f18:	2b00      	cmp	r3, #0
  404f1a:	d1f8      	bne.n	404f0e <tcp_input+0x85e>
  404f1c:	2a00      	cmp	r2, #0
  404f1e:	d0ea      	beq.n	404ef6 <tcp_input+0x846>
  404f20:	2200      	movs	r2, #0
  404f22:	4b81      	ldr	r3, [pc, #516]	; (405128 <tcp_input+0xa78>)
  404f24:	601a      	str	r2, [r3, #0]
  404f26:	e7e6      	b.n	404ef6 <tcp_input+0x846>
  404f28:	b10a      	cbz	r2, 404f2e <tcp_input+0x87e>
  404f2a:	4a7f      	ldr	r2, [pc, #508]	; (405128 <tcp_input+0xa78>)
  404f2c:	6013      	str	r3, [r2, #0]
  404f2e:	68ca      	ldr	r2, [r1, #12]
  404f30:	60da      	str	r2, [r3, #12]
  404f32:	e7e0      	b.n	404ef6 <tcp_input+0x846>
    tcp_receive(pcb);
  404f34:	4628      	mov	r0, r5
  404f36:	4b75      	ldr	r3, [pc, #468]	; (40510c <tcp_input+0xa5c>)
  404f38:	4798      	blx	r3
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
  404f3a:	4b7f      	ldr	r3, [pc, #508]	; (405138 <tcp_input+0xa88>)
  404f3c:	781b      	ldrb	r3, [r3, #0]
  404f3e:	f013 0f10 	tst.w	r3, #16
  404f42:	f43f ac93 	beq.w	40486c <tcp_input+0x1bc>
  404f46:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404f48:	4b7c      	ldr	r3, [pc, #496]	; (40513c <tcp_input+0xa8c>)
  404f4a:	681b      	ldr	r3, [r3, #0]
  404f4c:	429a      	cmp	r2, r3
  404f4e:	f47f ac8d 	bne.w	40486c <tcp_input+0x1bc>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
  404f52:	4b70      	ldr	r3, [pc, #448]	; (405114 <tcp_input+0xa64>)
  404f54:	691b      	ldr	r3, [r3, #16]
  404f56:	885a      	ldrh	r2, [r3, #2]
  404f58:	8819      	ldrh	r1, [r3, #0]
  404f5a:	4879      	ldr	r0, [pc, #484]	; (405140 <tcp_input+0xa90>)
  404f5c:	4b6f      	ldr	r3, [pc, #444]	; (40511c <tcp_input+0xa6c>)
  404f5e:	4798      	blx	r3
      tcp_pcb_purge(pcb);
  404f60:	4628      	mov	r0, r5
  404f62:	4b6f      	ldr	r3, [pc, #444]	; (405120 <tcp_input+0xa70>)
  404f64:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  404f66:	4b6f      	ldr	r3, [pc, #444]	; (405124 <tcp_input+0xa74>)
  404f68:	681b      	ldr	r3, [r3, #0]
  404f6a:	42ab      	cmp	r3, r5
  404f6c:	d10e      	bne.n	404f8c <tcp_input+0x8dc>
  404f6e:	68ea      	ldr	r2, [r5, #12]
  404f70:	4b6c      	ldr	r3, [pc, #432]	; (405124 <tcp_input+0xa74>)
  404f72:	601a      	str	r2, [r3, #0]
  404f74:	2201      	movs	r2, #1
  404f76:	4b6d      	ldr	r3, [pc, #436]	; (40512c <tcp_input+0xa7c>)
  404f78:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
  404f7a:	230a      	movs	r3, #10
  404f7c:	762b      	strb	r3, [r5, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
  404f7e:	4b6c      	ldr	r3, [pc, #432]	; (405130 <tcp_input+0xa80>)
  404f80:	681a      	ldr	r2, [r3, #0]
  404f82:	60ea      	str	r2, [r5, #12]
  404f84:	601d      	str	r5, [r3, #0]
  404f86:	4b6b      	ldr	r3, [pc, #428]	; (405134 <tcp_input+0xa84>)
  404f88:	4798      	blx	r3
  404f8a:	e46f      	b.n	40486c <tcp_input+0x1bc>
      TCP_RMV_ACTIVE(pcb);
  404f8c:	4a66      	ldr	r2, [pc, #408]	; (405128 <tcp_input+0xa78>)
  404f8e:	6013      	str	r3, [r2, #0]
  404f90:	2200      	movs	r2, #0
  404f92:	2001      	movs	r0, #1
  404f94:	b15b      	cbz	r3, 404fae <tcp_input+0x8fe>
  404f96:	68d9      	ldr	r1, [r3, #12]
  404f98:	42a9      	cmp	r1, r5
  404f9a:	d002      	beq.n	404fa2 <tcp_input+0x8f2>
  404f9c:	4602      	mov	r2, r0
  404f9e:	460b      	mov	r3, r1
  404fa0:	e7f8      	b.n	404f94 <tcp_input+0x8e4>
  404fa2:	b10a      	cbz	r2, 404fa8 <tcp_input+0x8f8>
  404fa4:	4a60      	ldr	r2, [pc, #384]	; (405128 <tcp_input+0xa78>)
  404fa6:	6013      	str	r3, [r2, #0]
  404fa8:	68ca      	ldr	r2, [r1, #12]
  404faa:	60da      	str	r2, [r3, #12]
  404fac:	e7e2      	b.n	404f74 <tcp_input+0x8c4>
  404fae:	2a00      	cmp	r2, #0
  404fb0:	d0e0      	beq.n	404f74 <tcp_input+0x8c4>
  404fb2:	2200      	movs	r2, #0
  404fb4:	4b5c      	ldr	r3, [pc, #368]	; (405128 <tcp_input+0xa78>)
  404fb6:	601a      	str	r2, [r3, #0]
  404fb8:	e7dc      	b.n	404f74 <tcp_input+0x8c4>
    tcp_receive(pcb);
  404fba:	4628      	mov	r0, r5
  404fbc:	4b53      	ldr	r3, [pc, #332]	; (40510c <tcp_input+0xa5c>)
  404fbe:	4798      	blx	r3
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
  404fc0:	4b5d      	ldr	r3, [pc, #372]	; (405138 <tcp_input+0xa88>)
  404fc2:	781b      	ldrb	r3, [r3, #0]
  404fc4:	f013 0f10 	tst.w	r3, #16
  404fc8:	f43f ac50 	beq.w	40486c <tcp_input+0x1bc>
  404fcc:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404fce:	4b5b      	ldr	r3, [pc, #364]	; (40513c <tcp_input+0xa8c>)
  404fd0:	681b      	ldr	r3, [r3, #0]
  404fd2:	429a      	cmp	r2, r3
  404fd4:	f47f ac4a 	bne.w	40486c <tcp_input+0x1bc>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
  404fd8:	4b4e      	ldr	r3, [pc, #312]	; (405114 <tcp_input+0xa64>)
  404fda:	691b      	ldr	r3, [r3, #16]
  404fdc:	885a      	ldrh	r2, [r3, #2]
  404fde:	8819      	ldrh	r1, [r3, #0]
  404fe0:	4858      	ldr	r0, [pc, #352]	; (405144 <tcp_input+0xa94>)
  404fe2:	4b4e      	ldr	r3, [pc, #312]	; (40511c <tcp_input+0xa6c>)
  404fe4:	4798      	blx	r3
      recv_flags |= TF_CLOSED;
  404fe6:	4a4a      	ldr	r2, [pc, #296]	; (405110 <tcp_input+0xa60>)
  404fe8:	7813      	ldrb	r3, [r2, #0]
  404fea:	f043 0310 	orr.w	r3, r3, #16
  404fee:	7013      	strb	r3, [r2, #0]
  404ff0:	e43c      	b.n	40486c <tcp_input+0x1bc>
      } else if (recv_flags & TF_CLOSED) {
  404ff2:	f013 0f10 	tst.w	r3, #16
  404ff6:	d013      	beq.n	405020 <tcp_input+0x970>
        if (!(pcb->flags & TF_RXCLOSED)) {
  404ff8:	7fab      	ldrb	r3, [r5, #30]
  404ffa:	f013 0f10 	tst.w	r3, #16
  404ffe:	d106      	bne.n	40500e <tcp_input+0x95e>
          TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
  405000:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  405004:	b11b      	cbz	r3, 40500e <tcp_input+0x95e>
  405006:	f06f 010b 	mvn.w	r1, #11
  40500a:	6928      	ldr	r0, [r5, #16]
  40500c:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  40500e:	4629      	mov	r1, r5
  405010:	4844      	ldr	r0, [pc, #272]	; (405124 <tcp_input+0xa74>)
  405012:	4b4d      	ldr	r3, [pc, #308]	; (405148 <tcp_input+0xa98>)
  405014:	4798      	blx	r3
        memp_free(MEMP_TCP_PCB, pcb);
  405016:	4629      	mov	r1, r5
  405018:	2002      	movs	r0, #2
  40501a:	4b4c      	ldr	r3, [pc, #304]	; (40514c <tcp_input+0xa9c>)
  40501c:	4798      	blx	r3
  40501e:	e43a      	b.n	404896 <tcp_input+0x1e6>
        if (pcb->acked > 0) {
  405020:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
  405024:	b142      	cbz	r2, 405038 <tcp_input+0x988>
          TCP_EVENT_SENT(pcb, pcb->acked, err);
  405026:	6feb      	ldr	r3, [r5, #124]	; 0x7c
  405028:	b133      	cbz	r3, 405038 <tcp_input+0x988>
  40502a:	4629      	mov	r1, r5
  40502c:	6928      	ldr	r0, [r5, #16]
  40502e:	4798      	blx	r3
          if (err == ERR_ABRT) {
  405030:	f110 0f0a 	cmn.w	r0, #10
  405034:	f43f ac2f 	beq.w	404896 <tcp_input+0x1e6>
        if (recv_data != NULL) {
  405038:	4b45      	ldr	r3, [pc, #276]	; (405150 <tcp_input+0xaa0>)
  40503a:	681a      	ldr	r2, [r3, #0]
  40503c:	b192      	cbz	r2, 405064 <tcp_input+0x9b4>
          if (pcb->flags & TF_RXCLOSED) {
  40503e:	7fab      	ldrb	r3, [r5, #30]
  405040:	f013 0f10 	tst.w	r3, #16
  405044:	d120      	bne.n	405088 <tcp_input+0x9d8>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  405046:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
  40504a:	b32c      	cbz	r4, 405098 <tcp_input+0x9e8>
  40504c:	2300      	movs	r3, #0
  40504e:	4629      	mov	r1, r5
  405050:	6928      	ldr	r0, [r5, #16]
  405052:	47a0      	blx	r4
          if (err == ERR_ABRT) {
  405054:	f110 0f0a 	cmn.w	r0, #10
  405058:	f43f ac1d 	beq.w	404896 <tcp_input+0x1e6>
          if (err != ERR_OK) {
  40505c:	b110      	cbz	r0, 405064 <tcp_input+0x9b4>
            pcb->refused_data = recv_data;
  40505e:	4b3c      	ldr	r3, [pc, #240]	; (405150 <tcp_input+0xaa0>)
  405060:	681b      	ldr	r3, [r3, #0]
  405062:	67ab      	str	r3, [r5, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
  405064:	4b2a      	ldr	r3, [pc, #168]	; (405110 <tcp_input+0xa60>)
  405066:	781b      	ldrb	r3, [r3, #0]
  405068:	f013 0f20 	tst.w	r3, #32
  40506c:	d005      	beq.n	40507a <tcp_input+0x9ca>
          if (pcb->refused_data != NULL) {
  40506e:	6fab      	ldr	r3, [r5, #120]	; 0x78
  405070:	b1c3      	cbz	r3, 4050a4 <tcp_input+0x9f4>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
  405072:	7b5a      	ldrb	r2, [r3, #13]
  405074:	f042 0220 	orr.w	r2, r2, #32
  405078:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
  40507a:	2200      	movs	r2, #0
  40507c:	4b35      	ldr	r3, [pc, #212]	; (405154 <tcp_input+0xaa4>)
  40507e:	601a      	str	r2, [r3, #0]
        tcp_output(pcb);
  405080:	4628      	mov	r0, r5
  405082:	4b35      	ldr	r3, [pc, #212]	; (405158 <tcp_input+0xaa8>)
  405084:	4798      	blx	r3
  405086:	e406      	b.n	404896 <tcp_input+0x1e6>
            pbuf_free(recv_data);
  405088:	4610      	mov	r0, r2
  40508a:	4b34      	ldr	r3, [pc, #208]	; (40515c <tcp_input+0xaac>)
  40508c:	4798      	blx	r3
            tcp_abort(pcb);
  40508e:	4628      	mov	r0, r5
  405090:	4b33      	ldr	r3, [pc, #204]	; (405160 <tcp_input+0xab0>)
  405092:	4798      	blx	r3
            goto aborted;
  405094:	f7ff bbff 	b.w	404896 <tcp_input+0x1e6>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  405098:	2300      	movs	r3, #0
  40509a:	4629      	mov	r1, r5
  40509c:	4618      	mov	r0, r3
  40509e:	4c31      	ldr	r4, [pc, #196]	; (405164 <tcp_input+0xab4>)
  4050a0:	47a0      	blx	r4
  4050a2:	e7d7      	b.n	405054 <tcp_input+0x9a4>
            if (pcb->rcv_wnd != TCP_WND) {
  4050a4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
  4050a6:	f640 3268 	movw	r2, #2920	; 0xb68
  4050aa:	4293      	cmp	r3, r2
  4050ac:	d001      	beq.n	4050b2 <tcp_input+0xa02>
              pcb->rcv_wnd++;
  4050ae:	3301      	adds	r3, #1
  4050b0:	85ab      	strh	r3, [r5, #44]	; 0x2c
            TCP_EVENT_CLOSED(pcb, err);
  4050b2:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
  4050b6:	2c00      	cmp	r4, #0
  4050b8:	d0df      	beq.n	40507a <tcp_input+0x9ca>
  4050ba:	2300      	movs	r3, #0
  4050bc:	461a      	mov	r2, r3
  4050be:	4629      	mov	r1, r5
  4050c0:	6928      	ldr	r0, [r5, #16]
  4050c2:	47a0      	blx	r4
            if (err == ERR_ABRT) {
  4050c4:	f110 0f0a 	cmn.w	r0, #10
  4050c8:	d1d7      	bne.n	40507a <tcp_input+0x9ca>
  4050ca:	f7ff bbe4 	b.w	404896 <tcp_input+0x1e6>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
  4050ce:	4b26      	ldr	r3, [pc, #152]	; (405168 <tcp_input+0xab8>)
  4050d0:	681b      	ldr	r3, [r3, #0]
  4050d2:	8998      	ldrh	r0, [r3, #12]
  4050d4:	4b25      	ldr	r3, [pc, #148]	; (40516c <tcp_input+0xabc>)
  4050d6:	4798      	blx	r3
  4050d8:	f010 0f04 	tst.w	r0, #4
  4050dc:	d110      	bne.n	405100 <tcp_input+0xa50>
        tcphdr->dest, tcphdr->src);
  4050de:	4b22      	ldr	r3, [pc, #136]	; (405168 <tcp_input+0xab8>)
  4050e0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen,
  4050e2:	4a23      	ldr	r2, [pc, #140]	; (405170 <tcp_input+0xac0>)
  4050e4:	8810      	ldrh	r0, [r2, #0]
  4050e6:	4a23      	ldr	r2, [pc, #140]	; (405174 <tcp_input+0xac4>)
  4050e8:	6811      	ldr	r1, [r2, #0]
  4050ea:	881a      	ldrh	r2, [r3, #0]
  4050ec:	9201      	str	r2, [sp, #4]
  4050ee:	885b      	ldrh	r3, [r3, #2]
  4050f0:	9300      	str	r3, [sp, #0]
  4050f2:	4b21      	ldr	r3, [pc, #132]	; (405178 <tcp_input+0xac8>)
  4050f4:	4a21      	ldr	r2, [pc, #132]	; (40517c <tcp_input+0xacc>)
  4050f6:	4401      	add	r1, r0
  4050f8:	4810      	ldr	r0, [pc, #64]	; (40513c <tcp_input+0xa8c>)
  4050fa:	6800      	ldr	r0, [r0, #0]
  4050fc:	4d20      	ldr	r5, [pc, #128]	; (405180 <tcp_input+0xad0>)
  4050fe:	47a8      	blx	r5
    pbuf_free(p);
  405100:	4620      	mov	r0, r4
  405102:	4b16      	ldr	r3, [pc, #88]	; (40515c <tcp_input+0xaac>)
  405104:	4798      	blx	r3
  405106:	f7ff baeb 	b.w	4046e0 <tcp_input+0x30>
  40510a:	bf00      	nop
  40510c:	00403dd5 	.word	0x00403dd5
  405110:	2040264c 	.word	0x2040264c
  405114:	20402634 	.word	0x20402634
  405118:	0040b0a4 	.word	0x0040b0a4
  40511c:	00407289 	.word	0x00407289
  405120:	00403029 	.word	0x00403029
  405124:	204049cc 	.word	0x204049cc
  405128:	204049d8 	.word	0x204049d8
  40512c:	204049c8 	.word	0x204049c8
  405130:	204049e0 	.word	0x204049e0
  405134:	00402255 	.word	0x00402255
  405138:	20402630 	.word	0x20402630
  40513c:	2040262c 	.word	0x2040262c
  405140:	0040b0d4 	.word	0x0040b0d4
  405144:	0040b100 	.word	0x0040b100
  405148:	00403489 	.word	0x00403489
  40514c:	00402689 	.word	0x00402689
  405150:	20402648 	.word	0x20402648
  405154:	204049e4 	.word	0x204049e4
  405158:	0040576d 	.word	0x0040576d
  40515c:	00402861 	.word	0x00402861
  405160:	00403759 	.word	0x00403759
  405164:	00403965 	.word	0x00403965
  405168:	20402654 	.word	0x20402654
  40516c:	00401387 	.word	0x00401387
  405170:	20402658 	.word	0x20402658
  405174:	20402650 	.word	0x20402650
  405178:	20403998 	.word	0x20403998
  40517c:	204039a0 	.word	0x204039a0
  405180:	00405a45 	.word	0x00405a45

00405184 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
  405184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405188:	4681      	mov	r9, r0
  40518a:	4688      	mov	r8, r1
  40518c:	4616      	mov	r6, r2
  40518e:	469a      	mov	sl, r3
  405190:	f89d 7020 	ldrb.w	r7, [sp, #32]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
  405194:	f007 0301 	and.w	r3, r7, #1
  405198:	f007 0202 	and.w	r2, r7, #2
  40519c:	2a00      	cmp	r2, #0
  40519e:	bf14      	ite	ne
  4051a0:	250c      	movne	r5, #12
  4051a2:	2500      	moveq	r5, #0
  4051a4:	eb05 0583 	add.w	r5, r5, r3, lsl #2

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
  4051a8:	2004      	movs	r0, #4
  4051aa:	4b24      	ldr	r3, [pc, #144]	; (40523c <tcp_create_segment+0xb8>)
  4051ac:	4798      	blx	r3
  4051ae:	4604      	mov	r4, r0
  4051b0:	2800      	cmp	r0, #0
  4051b2:	d039      	beq.n	405228 <tcp_create_segment+0xa4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
    return NULL;
  }
  seg->flags = optflags;
  4051b4:	7307      	strb	r7, [r0, #12]
  seg->next = NULL;
  4051b6:	2200      	movs	r2, #0
  4051b8:	6002      	str	r2, [r0, #0]
  seg->p = p;
  4051ba:	f8c0 8004 	str.w	r8, [r0, #4]
  seg->len = p->tot_len - optlen;
  4051be:	f8b8 3008 	ldrh.w	r3, [r8, #8]
  4051c2:	1b5b      	subs	r3, r3, r5
  4051c4:	8103      	strh	r3, [r0, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
  4051c6:	8142      	strh	r2, [r0, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
  4051c8:	2114      	movs	r1, #20
  4051ca:	4640      	mov	r0, r8
  4051cc:	4b1c      	ldr	r3, [pc, #112]	; (405240 <tcp_create_segment+0xbc>)
  4051ce:	4798      	blx	r3
  4051d0:	bb70      	cbnz	r0, 405230 <tcp_create_segment+0xac>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
    return NULL;
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  4051d2:	6863      	ldr	r3, [r4, #4]
  4051d4:	f8d3 8004 	ldr.w	r8, [r3, #4]
  4051d8:	f8c4 8010 	str.w	r8, [r4, #16]
  seg->tcphdr->src = htons(pcb->local_port);
  4051dc:	f8b9 001a 	ldrh.w	r0, [r9, #26]
  4051e0:	4f18      	ldr	r7, [pc, #96]	; (405244 <tcp_create_segment+0xc0>)
  4051e2:	47b8      	blx	r7
  4051e4:	f8a8 0000 	strh.w	r0, [r8]
  seg->tcphdr->dest = htons(pcb->remote_port);
  4051e8:	f8d4 8010 	ldr.w	r8, [r4, #16]
  4051ec:	f8b9 001c 	ldrh.w	r0, [r9, #28]
  4051f0:	47b8      	blx	r7
  4051f2:	f8a8 0002 	strh.w	r0, [r8, #2]
  seg->tcphdr->seqno = htonl(seqno);
  4051f6:	f8d4 8010 	ldr.w	r8, [r4, #16]
  4051fa:	4650      	mov	r0, sl
  4051fc:	4b12      	ldr	r3, [pc, #72]	; (405248 <tcp_create_segment+0xc4>)
  4051fe:	4798      	blx	r3
  405200:	f8c8 0004 	str.w	r0, [r8, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  405204:	f8d4 8010 	ldr.w	r8, [r4, #16]
  405208:	f3c5 0587 	ubfx	r5, r5, #2, #8
  40520c:	3505      	adds	r5, #5
  40520e:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  405212:	b2a8      	uxth	r0, r5
  405214:	47b8      	blx	r7
  405216:	f8a8 000c 	strh.w	r0, [r8, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  40521a:	6923      	ldr	r3, [r4, #16]
  40521c:	2200      	movs	r2, #0
  40521e:	749a      	strb	r2, [r3, #18]
  405220:	74da      	strb	r2, [r3, #19]
  return seg;
} 
  405222:	4620      	mov	r0, r4
  405224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
  405228:	4640      	mov	r0, r8
  40522a:	4b08      	ldr	r3, [pc, #32]	; (40524c <tcp_create_segment+0xc8>)
  40522c:	4798      	blx	r3
    return NULL;
  40522e:	e7f8      	b.n	405222 <tcp_create_segment+0x9e>
    tcp_seg_free(seg);
  405230:	4620      	mov	r0, r4
  405232:	4b07      	ldr	r3, [pc, #28]	; (405250 <tcp_create_segment+0xcc>)
  405234:	4798      	blx	r3
    return NULL;
  405236:	2400      	movs	r4, #0
  405238:	e7f3      	b.n	405222 <tcp_create_segment+0x9e>
  40523a:	bf00      	nop
  40523c:	00402649 	.word	0x00402649
  405240:	004027d5 	.word	0x004027d5
  405244:	0040137d 	.word	0x0040137d
  405248:	00401391 	.word	0x00401391
  40524c:	00402861 	.word	0x00402861
  405250:	00402f89 	.word	0x00402f89

00405254 <tcp_output_alloc_header>:
{
  405254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405258:	4606      	mov	r6, r0
  40525a:	460c      	mov	r4, r1
  40525c:	4699      	mov	r9, r3
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
  40525e:	3214      	adds	r2, #20
  405260:	4411      	add	r1, r2
  405262:	2200      	movs	r2, #0
  405264:	b289      	uxth	r1, r1
  405266:	2001      	movs	r0, #1
  405268:	4b14      	ldr	r3, [pc, #80]	; (4052bc <tcp_output_alloc_header+0x68>)
  40526a:	4798      	blx	r3
  if (p != NULL) {
  40526c:	4680      	mov	r8, r0
  40526e:	b310      	cbz	r0, 4052b6 <tcp_output_alloc_header+0x62>
    tcphdr = (struct tcp_hdr *)p->payload;
  405270:	6845      	ldr	r5, [r0, #4]
    tcphdr->src = htons(pcb->local_port);
  405272:	8b70      	ldrh	r0, [r6, #26]
  405274:	4f12      	ldr	r7, [pc, #72]	; (4052c0 <tcp_output_alloc_header+0x6c>)
  405276:	47b8      	blx	r7
  405278:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = htons(pcb->remote_port);
  40527a:	8bb0      	ldrh	r0, [r6, #28]
  40527c:	47b8      	blx	r7
  40527e:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
  405280:	f8c5 9004 	str.w	r9, [r5, #4]
    tcphdr->ackno = htonl(pcb->rcv_nxt);
  405284:	6ab0      	ldr	r0, [r6, #40]	; 0x28
  405286:	4b0f      	ldr	r3, [pc, #60]	; (4052c4 <tcp_output_alloc_header+0x70>)
  405288:	4798      	blx	r3
  40528a:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
  40528c:	08a0      	lsrs	r0, r4, #2
  40528e:	3005      	adds	r0, #5
  405290:	0300      	lsls	r0, r0, #12
  405292:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  405296:	f040 0010 	orr.w	r0, r0, #16
  40529a:	47b8      	blx	r7
  40529c:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = htons(pcb->rcv_ann_wnd);
  40529e:	8df0      	ldrh	r0, [r6, #46]	; 0x2e
  4052a0:	47b8      	blx	r7
  4052a2:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
  4052a4:	2300      	movs	r3, #0
  4052a6:	742b      	strb	r3, [r5, #16]
  4052a8:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
  4052aa:	74ab      	strb	r3, [r5, #18]
  4052ac:	74eb      	strb	r3, [r5, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  4052ae:	8df2      	ldrh	r2, [r6, #46]	; 0x2e
  4052b0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  4052b2:	4413      	add	r3, r2
  4052b4:	6333      	str	r3, [r6, #48]	; 0x30
}
  4052b6:	4640      	mov	r0, r8
  4052b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4052bc:	004028b9 	.word	0x004028b9
  4052c0:	0040137d 	.word	0x0040137d
  4052c4:	00401391 	.word	0x00401391

004052c8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  4052c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4052cc:	b08b      	sub	sp, #44	; 0x2c
  4052ce:	9308      	str	r3, [sp, #32]
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)", 
  4052d0:	9105      	str	r1, [sp, #20]
  4052d2:	b339      	cbz	r1, 405324 <tcp_write+0x5c>
  4052d4:	4606      	mov	r6, r0
  4052d6:	4693      	mov	fp, r2
  if ((pcb->state != ESTABLISHED) &&
  4052d8:	7e02      	ldrb	r2, [r0, #24]
      (pcb->state != CLOSE_WAIT) &&
  4052da:	1e93      	subs	r3, r2, #2
  4052dc:	b2db      	uxtb	r3, r3
      (pcb->state != SYN_SENT) &&
  4052de:	2b02      	cmp	r3, #2
  4052e0:	d902      	bls.n	4052e8 <tcp_write+0x20>
  4052e2:	2a07      	cmp	r2, #7
  4052e4:	f040 8153 	bne.w	40558e <tcp_write+0x2c6>
  } else if (len == 0) {
  4052e8:	f1bb 0f00 	cmp.w	fp, #0
  4052ec:	d007      	beq.n	4052fe <tcp_write+0x36>
  if (len > pcb->snd_buf) {
  4052ee:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
  4052f2:	455b      	cmp	r3, fp
  4052f4:	d31e      	bcc.n	405334 <tcp_write+0x6c>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  4052f6:	f8b6 3068 	ldrh.w	r3, [r6, #104]	; 0x68
  4052fa:	2b07      	cmp	r3, #7
  4052fc:	d821      	bhi.n	405342 <tcp_write+0x7a>
  u16_t mss_local = LWIP_MIN(pcb->mss, pcb->snd_wnd_max/2);
  4052fe:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
  405302:	085b      	lsrs	r3, r3, #1
  405304:	8ef2      	ldrh	r2, [r6, #54]	; 0x36
  405306:	4293      	cmp	r3, r2
  405308:	bf28      	it	cs
  40530a:	4613      	movcs	r3, r2
  40530c:	9306      	str	r3, [sp, #24]

  err = tcp_write_checks(pcb, len);
  if (err != ERR_OK) {
    return err;
  }
  queuelen = pcb->snd_queuelen;
  40530e:	f8b6 9068 	ldrh.w	r9, [r6, #104]	; 0x68
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
  405312:	6ef7      	ldr	r7, [r6, #108]	; 0x6c
  405314:	b9ef      	cbnz	r7, 405352 <tcp_write+0x8a>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  405316:	46b8      	mov	r8, r7
  u16_t oversize = 0;
  405318:	2300      	movs	r3, #0
  40531a:	9304      	str	r3, [sp, #16]
  u16_t oversize_used = 0;
  40531c:	469a      	mov	sl, r3
  u16_t pos = 0; /* position in 'arg' data */
  40531e:	461c      	mov	r4, r3
  struct pbuf *concat_p = NULL;
  405320:	9307      	str	r3, [sp, #28]
  405322:	e073      	b.n	40540c <tcp_write+0x144>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)", 
  405324:	4b9e      	ldr	r3, [pc, #632]	; (4055a0 <tcp_write+0x2d8>)
  405326:	f240 127f 	movw	r2, #383	; 0x17f
  40532a:	499e      	ldr	r1, [pc, #632]	; (4055a4 <tcp_write+0x2dc>)
  40532c:	489e      	ldr	r0, [pc, #632]	; (4055a8 <tcp_write+0x2e0>)
  40532e:	4c9f      	ldr	r4, [pc, #636]	; (4055ac <tcp_write+0x2e4>)
  405330:	47a0      	blx	r4
  405332:	e7fe      	b.n	405332 <tcp_write+0x6a>
    pcb->flags |= TF_NAGLEMEMERR;
  405334:	7fb3      	ldrb	r3, [r6, #30]
  405336:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40533a:	77b3      	strb	r3, [r6, #30]
    return ERR_MEM;
  40533c:	f04f 30ff 	mov.w	r0, #4294967295
  405340:	e081      	b.n	405446 <tcp_write+0x17e>
    pcb->flags |= TF_NAGLEMEMERR;
  405342:	7fb3      	ldrb	r3, [r6, #30]
  405344:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405348:	77b3      	strb	r3, [r6, #30]
    return ERR_MEM;
  40534a:	f04f 30ff 	mov.w	r0, #4294967295
  40534e:	e07a      	b.n	405446 <tcp_write+0x17e>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);
  405350:	461f      	mov	r7, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  405352:	683b      	ldr	r3, [r7, #0]
  405354:	2b00      	cmp	r3, #0
  405356:	d1fb      	bne.n	405350 <tcp_write+0x88>
  405358:	9303      	str	r3, [sp, #12]

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
  40535a:	7b3b      	ldrb	r3, [r7, #12]
  40535c:	f003 0001 	and.w	r0, r3, #1
  405360:	f003 0302 	and.w	r3, r3, #2
  405364:	2b00      	cmp	r3, #0
  405366:	bf14      	ite	ne
  405368:	220c      	movne	r2, #12
  40536a:	2200      	moveq	r2, #0
    space = mss_local - (last_unsent->len + unsent_optlen);
  40536c:	893b      	ldrh	r3, [r7, #8]
  40536e:	9906      	ldr	r1, [sp, #24]
  405370:	1ac9      	subs	r1, r1, r3
  405372:	eba1 0180 	sub.w	r1, r1, r0, lsl #2
  405376:	1a89      	subs	r1, r1, r2
  405378:	b289      	uxth	r1, r1
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->unsent_oversize */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
  40537a:	f8b6 a06a 	ldrh.w	sl, [r6, #106]	; 0x6a
    if (oversize > 0) {
  40537e:	f1ba 0f00 	cmp.w	sl, #0
  405382:	d00d      	beq.n	4053a0 <tcp_write+0xd8>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize_used <= space);
      seg = last_unsent;
      oversize_used = oversize < len ? oversize : len;
  405384:	465a      	mov	r2, fp
  405386:	45d3      	cmp	fp, sl
  405388:	bf28      	it	cs
  40538a:	4652      	movcs	r2, sl
      pos += oversize_used;
      oversize -= oversize_used;
  40538c:	ebaa 0a02 	sub.w	sl, sl, r2
  405390:	fa1f f08a 	uxth.w	r0, sl
  405394:	9004      	str	r0, [sp, #16]
      space -= oversize_used;
  405396:	1a89      	subs	r1, r1, r2
  405398:	b289      	uxth	r1, r1
      pos += oversize_used;
  40539a:	4692      	mov	sl, r2
      space -= oversize_used;
  40539c:	46b8      	mov	r8, r7
  40539e:	e003      	b.n	4053a8 <tcp_write+0xe0>
    oversize = pcb->unsent_oversize;
  4053a0:	f8cd a010 	str.w	sl, [sp, #16]
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  4053a4:	f8dd 800c 	ldr.w	r8, [sp, #12]
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
  4053a8:	2900      	cmp	r1, #0
  4053aa:	bf18      	it	ne
  4053ac:	45da      	cmpne	sl, fp
  4053ae:	d22a      	bcs.n	405406 <tcp_write+0x13e>
  4053b0:	b34b      	cbz	r3, 405406 <tcp_write+0x13e>
      u16_t seglen = space < len - pos ? space : len - pos;
  4053b2:	ebab 050a 	sub.w	r5, fp, sl
  4053b6:	428d      	cmp	r5, r1
  4053b8:	bfa8      	it	ge
  4053ba:	460d      	movge	r5, r1
  4053bc:	b2ac      	uxth	r4, r5
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  4053be:	2200      	movs	r2, #0
  4053c0:	2003      	movs	r0, #3
  4053c2:	4b7b      	ldr	r3, [pc, #492]	; (4055b0 <tcp_write+0x2e8>)
  4053c4:	4798      	blx	r3
  if (p == NULL) {
  4053c6:	9007      	str	r0, [sp, #28]
  4053c8:	2800      	cmp	r0, #0
  4053ca:	f000 80e3 	beq.w	405594 <tcp_write+0x2cc>
  *oversize = p->len - length;
  4053ce:	8943      	ldrh	r3, [r0, #10]
  4053d0:	1b1b      	subs	r3, r3, r4
  4053d2:	b29b      	uxth	r3, r3
  4053d4:	4619      	mov	r1, r3
  4053d6:	9304      	str	r3, [sp, #16]
  p->len = p->tot_len = length;
  4053d8:	8104      	strh	r4, [r0, #8]
  4053da:	8144      	strh	r4, [r0, #10]
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        last_unsent->oversize_left += oversize;
  4053dc:	897b      	ldrh	r3, [r7, #10]
  4053de:	440b      	add	r3, r1
  4053e0:	817b      	strh	r3, [r7, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
  4053e2:	4622      	mov	r2, r4
  4053e4:	9b05      	ldr	r3, [sp, #20]
  4053e6:	eb03 010a 	add.w	r1, r3, sl
  4053ea:	4605      	mov	r5, r0
  4053ec:	6840      	ldr	r0, [r0, #4]
  4053ee:	4b71      	ldr	r3, [pc, #452]	; (4055b4 <tcp_write+0x2ec>)
  4053f0:	4798      	blx	r3
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        concat_p->payload = (u8_t*)arg + pos;
      }

      pos += seglen;
  4053f2:	4454      	add	r4, sl
  4053f4:	b2a4      	uxth	r4, r4
      queuelen += pbuf_clen(concat_p);
  4053f6:	4628      	mov	r0, r5
  4053f8:	4b6f      	ldr	r3, [pc, #444]	; (4055b8 <tcp_write+0x2f0>)
  4053fa:	4798      	blx	r3
  4053fc:	4481      	add	r9, r0
  4053fe:	fa1f f989 	uxth.w	r9, r9
  405402:	46b8      	mov	r8, r7
  405404:	e002      	b.n	40540c <tcp_write+0x144>
  405406:	4654      	mov	r4, sl
  struct pbuf *concat_p = NULL;
  405408:	2300      	movs	r3, #0
  40540a:	9307      	str	r3, [sp, #28]
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
  40540c:	45a3      	cmp	fp, r4
  40540e:	f240 8093 	bls.w	405538 <tcp_write+0x270>
  405412:	2300      	movs	r3, #0
  405414:	9303      	str	r3, [sp, #12]
  405416:	9304      	str	r3, [sp, #16]
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
    }

    queuelen += pbuf_clen(p);
  405418:	9709      	str	r7, [sp, #36]	; 0x24
  40541a:	e01d      	b.n	405458 <tcp_write+0x190>
    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: queue too long %"U16_F" (%"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
      pbuf_free(p);
  40541c:	4640      	mov	r0, r8
  40541e:	4b67      	ldr	r3, [pc, #412]	; (4055bc <tcp_write+0x2f4>)
  405420:	4798      	blx	r3
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
  405422:	7fb3      	ldrb	r3, [r6, #30]
  405424:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405428:	77b3      	strb	r3, [r6, #30]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
  40542a:	9b07      	ldr	r3, [sp, #28]
  40542c:	b113      	cbz	r3, 405434 <tcp_write+0x16c>
    pbuf_free(concat_p);
  40542e:	4618      	mov	r0, r3
  405430:	4b62      	ldr	r3, [pc, #392]	; (4055bc <tcp_write+0x2f4>)
  405432:	4798      	blx	r3
  }
  if (queue != NULL) {
  405434:	9b03      	ldr	r3, [sp, #12]
  405436:	2b00      	cmp	r3, #0
  405438:	f000 80a6 	beq.w	405588 <tcp_write+0x2c0>
    tcp_segs_free(queue);
  40543c:	4618      	mov	r0, r3
  40543e:	4b60      	ldr	r3, [pc, #384]	; (4055c0 <tcp_write+0x2f8>)
  405440:	4798      	blx	r3
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
  405442:	f04f 30ff 	mov.w	r0, #4294967295
}
  405446:	b00b      	add	sp, #44	; 0x2c
  405448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  40544c:	9003      	str	r0, [sp, #12]
    pos += seglen;
  40544e:	442c      	add	r4, r5
  405450:	b2a4      	uxth	r4, r4
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  405452:	9304      	str	r3, [sp, #16]
  while (pos < len) {
  405454:	45a3      	cmp	fp, r4
  405456:	d934      	bls.n	4054c2 <tcp_write+0x1fa>
    u16_t left = len - pos;
  405458:	ebab 0504 	sub.w	r5, fp, r4
    u16_t seglen = left > max_len ? max_len : left;
  40545c:	b2ad      	uxth	r5, r5
  40545e:	9906      	ldr	r1, [sp, #24]
  405460:	428d      	cmp	r5, r1
  405462:	bf28      	it	cs
  405464:	460d      	movcs	r5, r1
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  405466:	2200      	movs	r2, #0
  405468:	4610      	mov	r0, r2
  40546a:	4b51      	ldr	r3, [pc, #324]	; (4055b0 <tcp_write+0x2e8>)
  40546c:	4798      	blx	r3
  if (p == NULL) {
  40546e:	4680      	mov	r8, r0
  405470:	2800      	cmp	r0, #0
  405472:	d0d6      	beq.n	405422 <tcp_write+0x15a>
  *oversize = p->len - length;
  405474:	8943      	ldrh	r3, [r0, #10]
  405476:	1b5b      	subs	r3, r3, r5
  405478:	b29f      	uxth	r7, r3
  p->len = p->tot_len = length;
  40547a:	8105      	strh	r5, [r0, #8]
  40547c:	8145      	strh	r5, [r0, #10]
      TCP_DATA_COPY2((char *)p->payload + optlen, (u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
  40547e:	462a      	mov	r2, r5
  405480:	9b05      	ldr	r3, [sp, #20]
  405482:	1919      	adds	r1, r3, r4
  405484:	6840      	ldr	r0, [r0, #4]
  405486:	4b4b      	ldr	r3, [pc, #300]	; (4055b4 <tcp_write+0x2ec>)
  405488:	4798      	blx	r3
    queuelen += pbuf_clen(p);
  40548a:	4640      	mov	r0, r8
  40548c:	4b4a      	ldr	r3, [pc, #296]	; (4055b8 <tcp_write+0x2f0>)
  40548e:	4798      	blx	r3
  405490:	4481      	add	r9, r0
  405492:	fa1f f989 	uxth.w	r9, r9
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  405496:	f1b9 0f08 	cmp.w	r9, #8
  40549a:	d8bf      	bhi.n	40541c <tcp_write+0x154>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  40549c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  40549e:	2200      	movs	r2, #0
  4054a0:	9200      	str	r2, [sp, #0]
  4054a2:	4423      	add	r3, r4
  4054a4:	4641      	mov	r1, r8
  4054a6:	4630      	mov	r0, r6
  4054a8:	f8df 8120 	ldr.w	r8, [pc, #288]	; 4055cc <tcp_write+0x304>
  4054ac:	47c0      	blx	r8
  4054ae:	4603      	mov	r3, r0
  4054b0:	2800      	cmp	r0, #0
  4054b2:	d0b6      	beq.n	405422 <tcp_write+0x15a>
    seg->oversize_left = oversize;
  4054b4:	8147      	strh	r7, [r0, #10]
    if (queue == NULL) {
  4054b6:	9a03      	ldr	r2, [sp, #12]
  4054b8:	2a00      	cmp	r2, #0
  4054ba:	d0c7      	beq.n	40544c <tcp_write+0x184>
      prev_seg->next = seg;
  4054bc:	9a04      	ldr	r2, [sp, #16]
  4054be:	6010      	str	r0, [r2, #0]
  4054c0:	e7c5      	b.n	40544e <tcp_write+0x186>
  4054c2:	4698      	mov	r8, r3
  4054c4:	9704      	str	r7, [sp, #16]
  4054c6:	9f09      	ldr	r7, [sp, #36]	; 0x24
  if (oversize_used > 0) {
  4054c8:	f1ba 0f00 	cmp.w	sl, #0
  4054cc:	d00a      	beq.n	4054e4 <tcp_write+0x21c>
    for (p = last_unsent->p; p; p = p->next) {
  4054ce:	687c      	ldr	r4, [r7, #4]
  4054d0:	2c00      	cmp	r4, #0
  4054d2:	d148      	bne.n	405566 <tcp_write+0x29e>
    last_unsent->len += oversize_used;
  4054d4:	893b      	ldrh	r3, [r7, #8]
  4054d6:	4453      	add	r3, sl
  4054d8:	813b      	strh	r3, [r7, #8]
    last_unsent->oversize_left -= oversize_used;
  4054da:	897b      	ldrh	r3, [r7, #10]
  4054dc:	eba3 0a0a 	sub.w	sl, r3, sl
  4054e0:	f8a7 a00a 	strh.w	sl, [r7, #10]
  pcb->unsent_oversize = oversize;
  4054e4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  4054e8:	f8a6 306a 	strh.w	r3, [r6, #106]	; 0x6a
  if (concat_p != NULL) {
  4054ec:	9c07      	ldr	r4, [sp, #28]
  4054ee:	b13c      	cbz	r4, 405500 <tcp_write+0x238>
    pbuf_cat(last_unsent->p, concat_p);
  4054f0:	4621      	mov	r1, r4
  4054f2:	6878      	ldr	r0, [r7, #4]
  4054f4:	4b33      	ldr	r3, [pc, #204]	; (4055c4 <tcp_write+0x2fc>)
  4054f6:	4798      	blx	r3
    last_unsent->len += concat_p->tot_len;
  4054f8:	893b      	ldrh	r3, [r7, #8]
  4054fa:	8922      	ldrh	r2, [r4, #8]
  4054fc:	4413      	add	r3, r2
  4054fe:	813b      	strh	r3, [r7, #8]
  if (last_unsent == NULL) {
  405500:	2f00      	cmp	r7, #0
  405502:	d032      	beq.n	40556a <tcp_write+0x2a2>
    last_unsent->next = queue;
  405504:	9b03      	ldr	r3, [sp, #12]
  405506:	603b      	str	r3, [r7, #0]
  pcb->snd_lbb += len;
  405508:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  40550a:	445b      	add	r3, fp
  40550c:	65f3      	str	r3, [r6, #92]	; 0x5c
  pcb->snd_buf -= len;
  40550e:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
  405512:	eba3 0b0b 	sub.w	fp, r3, fp
  405516:	f8a6 b066 	strh.w	fp, [r6, #102]	; 0x66
  pcb->snd_queuelen = queuelen;
  40551a:	f8a6 9068 	strh.w	r9, [r6, #104]	; 0x68
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
  40551e:	f1b8 0f00 	cmp.w	r8, #0
  405522:	d02d      	beq.n	405580 <tcp_write+0x2b8>
  405524:	f8d8 4010 	ldr.w	r4, [r8, #16]
  405528:	2c00      	cmp	r4, #0
  40552a:	d02b      	beq.n	405584 <tcp_write+0x2bc>
  40552c:	9b08      	ldr	r3, [sp, #32]
  40552e:	f013 0f02 	tst.w	r3, #2
  405532:	d01d      	beq.n	405570 <tcp_write+0x2a8>
  return ERR_OK;
  405534:	2000      	movs	r0, #0
  405536:	e786      	b.n	405446 <tcp_write+0x17e>
  while (pos < len) {
  405538:	2300      	movs	r3, #0
  40553a:	9303      	str	r3, [sp, #12]
  40553c:	e7c4      	b.n	4054c8 <tcp_write+0x200>
  40553e:	461c      	mov	r4, r3
      p->tot_len += oversize_used;
  405540:	8923      	ldrh	r3, [r4, #8]
  405542:	4453      	add	r3, sl
  405544:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
  405546:	6823      	ldr	r3, [r4, #0]
  405548:	2b00      	cmp	r3, #0
  40554a:	d1f8      	bne.n	40553e <tcp_write+0x276>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  40554c:	8963      	ldrh	r3, [r4, #10]
  40554e:	6860      	ldr	r0, [r4, #4]
  405550:	4652      	mov	r2, sl
  405552:	9905      	ldr	r1, [sp, #20]
  405554:	4418      	add	r0, r3
  405556:	47a8      	blx	r5
        p->len += oversize_used;
  405558:	8963      	ldrh	r3, [r4, #10]
  40555a:	4453      	add	r3, sl
  40555c:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
  40555e:	6823      	ldr	r3, [r4, #0]
  405560:	2b00      	cmp	r3, #0
  405562:	d0b7      	beq.n	4054d4 <tcp_write+0x20c>
  405564:	e7eb      	b.n	40553e <tcp_write+0x276>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  405566:	4d13      	ldr	r5, [pc, #76]	; (4055b4 <tcp_write+0x2ec>)
  405568:	e7ea      	b.n	405540 <tcp_write+0x278>
    pcb->unsent = queue;
  40556a:	9b03      	ldr	r3, [sp, #12]
  40556c:	66f3      	str	r3, [r6, #108]	; 0x6c
  40556e:	e7cb      	b.n	405508 <tcp_write+0x240>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  405570:	89a5      	ldrh	r5, [r4, #12]
  405572:	2008      	movs	r0, #8
  405574:	4b14      	ldr	r3, [pc, #80]	; (4055c8 <tcp_write+0x300>)
  405576:	4798      	blx	r3
  405578:	4328      	orrs	r0, r5
  40557a:	81a0      	strh	r0, [r4, #12]
  return ERR_OK;
  40557c:	2000      	movs	r0, #0
  40557e:	e762      	b.n	405446 <tcp_write+0x17e>
  405580:	2000      	movs	r0, #0
  405582:	e760      	b.n	405446 <tcp_write+0x17e>
  405584:	2000      	movs	r0, #0
  405586:	e75e      	b.n	405446 <tcp_write+0x17e>
  return ERR_MEM;
  405588:	f04f 30ff 	mov.w	r0, #4294967295
  40558c:	e75b      	b.n	405446 <tcp_write+0x17e>
    return ERR_CONN;
  40558e:	f06f 000c 	mvn.w	r0, #12
  405592:	e758      	b.n	405446 <tcp_write+0x17e>
  pcb->flags |= TF_NAGLEMEMERR;
  405594:	7fb3      	ldrb	r3, [r6, #30]
  405596:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40559a:	77b3      	strb	r3, [r6, #30]
  40559c:	e74a      	b.n	405434 <tcp_write+0x16c>
  40559e:	bf00      	nop
  4055a0:	0040b238 	.word	0x0040b238
  4055a4:	0040b274 	.word	0x0040b274
  4055a8:	0040a7c0 	.word	0x0040a7c0
  4055ac:	00407289 	.word	0x00407289
  4055b0:	004028b9 	.word	0x004028b9
  4055b4:	00407311 	.word	0x00407311
  4055b8:	00402a61 	.word	0x00402a61
  4055bc:	00402861 	.word	0x00402861
  4055c0:	00402fb1 	.word	0x00402fb1
  4055c4:	00402a81 	.word	0x00402a81
  4055c8:	0040137d 	.word	0x0040137d
  4055cc:	00405185 	.word	0x00405185

004055d0 <tcp_enqueue_flags>:

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  4055d0:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
  4055d4:	2b07      	cmp	r3, #7
  4055d6:	d822      	bhi.n	40561e <tcp_enqueue_flags+0x4e>
{
  4055d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4055da:	b083      	sub	sp, #12
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
    return ERR_MEM;
  }

  if (flags & TCP_SYN) {
  4055dc:	f001 0302 	and.w	r3, r1, #2
  u8_t optflags = 0;
  4055e0:	f3c1 0640 	ubfx	r6, r1, #1, #1
#if LWIP_TCP_TIMESTAMPS
  if ((pcb->flags & TF_TIMESTAMP)) {
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
  4055e4:	2b00      	cmp	r3, #0
  4055e6:	bf14      	ite	ne
  4055e8:	2704      	movne	r7, #4
  4055ea:	2700      	moveq	r7, #0

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
  4055ec:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
  4055f0:	2b00      	cmp	r3, #0
  4055f2:	d04e      	beq.n	405692 <tcp_enqueue_flags+0xc2>
  4055f4:	460d      	mov	r5, r1
  4055f6:	4604      	mov	r4, r0
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  }

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  4055f8:	2200      	movs	r2, #0
  4055fa:	4639      	mov	r1, r7
  4055fc:	4610      	mov	r0, r2
  4055fe:	4b26      	ldr	r3, [pc, #152]	; (405698 <tcp_enqueue_flags+0xc8>)
  405600:	4798      	blx	r3
  405602:	4601      	mov	r1, r0
  405604:	b190      	cbz	r0, 40562c <tcp_enqueue_flags+0x5c>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
  405606:	9600      	str	r6, [sp, #0]
  405608:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  40560a:	462a      	mov	r2, r5
  40560c:	4620      	mov	r0, r4
  40560e:	4e23      	ldr	r6, [pc, #140]	; (40569c <tcp_enqueue_flags+0xcc>)
  405610:	47b0      	blx	r6
  405612:	4601      	mov	r1, r0
  405614:	b188      	cbz	r0, 40563a <tcp_enqueue_flags+0x6a>
               ntohl(seg->tcphdr->seqno),
               ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
  405616:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  405618:	b9ba      	cbnz	r2, 40564a <tcp_enqueue_flags+0x7a>
    pcb->unsent = seg;
  40561a:	66e0      	str	r0, [r4, #108]	; 0x6c
  40561c:	e019      	b.n	405652 <tcp_enqueue_flags+0x82>
    pcb->flags |= TF_NAGLEMEMERR;
  40561e:	7f83      	ldrb	r3, [r0, #30]
  405620:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405624:	7783      	strb	r3, [r0, #30]
    return ERR_MEM;
  405626:	f04f 30ff 	mov.w	r0, #4294967295
  40562a:	4770      	bx	lr
    pcb->flags |= TF_NAGLEMEMERR;
  40562c:	7fa3      	ldrb	r3, [r4, #30]
  40562e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405632:	77a3      	strb	r3, [r4, #30]
    return ERR_MEM;
  405634:	f04f 30ff 	mov.w	r0, #4294967295
  405638:	e029      	b.n	40568e <tcp_enqueue_flags+0xbe>
    pcb->flags |= TF_NAGLEMEMERR;
  40563a:	7fa3      	ldrb	r3, [r4, #30]
  40563c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405640:	77a3      	strb	r3, [r4, #30]
    return ERR_MEM;
  405642:	f04f 30ff 	mov.w	r0, #4294967295
  405646:	e022      	b.n	40568e <tcp_enqueue_flags+0xbe>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
  405648:	461a      	mov	r2, r3
  40564a:	6813      	ldr	r3, [r2, #0]
  40564c:	2b00      	cmp	r3, #0
  40564e:	d1fb      	bne.n	405648 <tcp_enqueue_flags+0x78>
    useg->next = seg;
  405650:	6011      	str	r1, [r2, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
  405652:	2300      	movs	r3, #0
  405654:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
  405658:	f015 0f03 	tst.w	r5, #3
  40565c:	d007      	beq.n	40566e <tcp_enqueue_flags+0x9e>
    pcb->snd_lbb++;
  40565e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  405660:	3301      	adds	r3, #1
  405662:	65e3      	str	r3, [r4, #92]	; 0x5c
    /* optlen does not influence snd_buf */
    pcb->snd_buf--;
  405664:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
  405668:	3b01      	subs	r3, #1
  40566a:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  }
  if (flags & TCP_FIN) {
  40566e:	f015 0f01 	tst.w	r5, #1
  405672:	d003      	beq.n	40567c <tcp_enqueue_flags+0xac>
    pcb->flags |= TF_FIN;
  405674:	7fa3      	ldrb	r3, [r4, #30]
  405676:	f043 0320 	orr.w	r3, r3, #32
  40567a:	77a3      	strb	r3, [r4, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
  40567c:	6848      	ldr	r0, [r1, #4]
  40567e:	4b08      	ldr	r3, [pc, #32]	; (4056a0 <tcp_enqueue_flags+0xd0>)
  405680:	4798      	blx	r3
  405682:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
  405686:	4418      	add	r0, r3
  405688:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
  40568c:	2000      	movs	r0, #0
}
  40568e:	b003      	add	sp, #12
  405690:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_MEM;
  405692:	f04f 30ff 	mov.w	r0, #4294967295
  405696:	e7fa      	b.n	40568e <tcp_enqueue_flags+0xbe>
  405698:	004028b9 	.word	0x004028b9
  40569c:	00405185 	.word	0x00405185
  4056a0:	00402a61 	.word	0x00402a61

004056a4 <tcp_send_fin>:
{
  4056a4:	b570      	push	{r4, r5, r6, lr}
  4056a6:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
  4056a8:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
  4056aa:	b90c      	cbnz	r4, 4056b0 <tcp_send_fin+0xc>
  4056ac:	e00a      	b.n	4056c4 <tcp_send_fin+0x20>
         last_unsent = last_unsent->next);
  4056ae:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  4056b0:	6823      	ldr	r3, [r4, #0]
  4056b2:	2b00      	cmp	r3, #0
  4056b4:	d1fb      	bne.n	4056ae <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
  4056b6:	6923      	ldr	r3, [r4, #16]
  4056b8:	8998      	ldrh	r0, [r3, #12]
  4056ba:	4b0b      	ldr	r3, [pc, #44]	; (4056e8 <tcp_send_fin+0x44>)
  4056bc:	4798      	blx	r3
  4056be:	f010 0f07 	tst.w	r0, #7
  4056c2:	d004      	beq.n	4056ce <tcp_send_fin+0x2a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
  4056c4:	2101      	movs	r1, #1
  4056c6:	4628      	mov	r0, r5
  4056c8:	4b08      	ldr	r3, [pc, #32]	; (4056ec <tcp_send_fin+0x48>)
  4056ca:	4798      	blx	r3
}
  4056cc:	bd70      	pop	{r4, r5, r6, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
  4056ce:	6926      	ldr	r6, [r4, #16]
  4056d0:	89b4      	ldrh	r4, [r6, #12]
  4056d2:	2001      	movs	r0, #1
  4056d4:	4b06      	ldr	r3, [pc, #24]	; (4056f0 <tcp_send_fin+0x4c>)
  4056d6:	4798      	blx	r3
  4056d8:	4320      	orrs	r0, r4
  4056da:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
  4056dc:	7fab      	ldrb	r3, [r5, #30]
  4056de:	f043 0320 	orr.w	r3, r3, #32
  4056e2:	77ab      	strb	r3, [r5, #30]
      return ERR_OK;
  4056e4:	2000      	movs	r0, #0
  4056e6:	bd70      	pop	{r4, r5, r6, pc}
  4056e8:	00401387 	.word	0x00401387
  4056ec:	004055d1 	.word	0x004055d1
  4056f0:	0040137d 	.word	0x0040137d

004056f4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
  4056f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4056f8:	b082      	sub	sp, #8
  4056fa:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
  4056fc:	6d00      	ldr	r0, [r0, #80]	; 0x50
  4056fe:	4b16      	ldr	r3, [pc, #88]	; (405758 <tcp_send_empty_ack+0x64>)
  405700:	4798      	blx	r3
  405702:	4603      	mov	r3, r0
  405704:	2200      	movs	r2, #0
  405706:	4611      	mov	r1, r2
  405708:	4620      	mov	r0, r4
  40570a:	4d14      	ldr	r5, [pc, #80]	; (40575c <tcp_send_empty_ack+0x68>)
  40570c:	47a8      	blx	r5
  if (p == NULL) {
  40570e:	b300      	cbz	r0, 405752 <tcp_send_empty_ack+0x5e>
  405710:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  405712:	6847      	ldr	r7, [r0, #4]
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  /* remove ACK flags from the PCB, as we send an empty ACK now */
  pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  405714:	7fa3      	ldrb	r3, [r4, #30]
  405716:	f023 0303 	bic.w	r3, r3, #3
  40571a:	77a3      	strb	r3, [r4, #30]
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif 

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
  40571c:	1d26      	adds	r6, r4, #4
  40571e:	8903      	ldrh	r3, [r0, #8]
  405720:	9300      	str	r3, [sp, #0]
  405722:	2306      	movs	r3, #6
  405724:	4632      	mov	r2, r6
  405726:	4621      	mov	r1, r4
  405728:	f8df 803c 	ldr.w	r8, [pc, #60]	; 405768 <tcp_send_empty_ack+0x74>
  40572c:	47c0      	blx	r8
  40572e:	8238      	strh	r0, [r7, #16]
#endif
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
  405730:	7aa3      	ldrb	r3, [r4, #10]
  405732:	2206      	movs	r2, #6
  405734:	9201      	str	r2, [sp, #4]
  405736:	7a62      	ldrb	r2, [r4, #9]
  405738:	9200      	str	r2, [sp, #0]
  40573a:	4632      	mov	r2, r6
  40573c:	4621      	mov	r1, r4
  40573e:	4628      	mov	r0, r5
  405740:	4c07      	ldr	r4, [pc, #28]	; (405760 <tcp_send_empty_ack+0x6c>)
  405742:	47a0      	blx	r4
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);
  405744:	4628      	mov	r0, r5
  405746:	4b07      	ldr	r3, [pc, #28]	; (405764 <tcp_send_empty_ack+0x70>)
  405748:	4798      	blx	r3

  return ERR_OK;
  40574a:	2000      	movs	r0, #0
}
  40574c:	b002      	add	sp, #8
  40574e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_BUF;
  405752:	f06f 0001 	mvn.w	r0, #1
  405756:	e7f9      	b.n	40574c <tcp_send_empty_ack+0x58>
  405758:	00401391 	.word	0x00401391
  40575c:	00405255 	.word	0x00405255
  405760:	00401a59 	.word	0x00401a59
  405764:	00402861 	.word	0x00402861
  405768:	00401655 	.word	0x00401655

0040576c <tcp_output>:

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
  40576c:	4ba2      	ldr	r3, [pc, #648]	; (4059f8 <tcp_output+0x28c>)
  40576e:	681b      	ldr	r3, [r3, #0]
  405770:	4283      	cmp	r3, r0
  405772:	f000 8165 	beq.w	405a40 <tcp_output+0x2d4>
{
  405776:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40577a:	b085      	sub	sp, #20
  40577c:	4605      	mov	r5, r0
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
  40577e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  405782:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
  405786:	429a      	cmp	r2, r3
  405788:	bf28      	it	cs
  40578a:	461a      	movcs	r2, r3
  40578c:	4692      	mov	sl, r2

  seg = pcb->unsent;
  40578e:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
  405790:	7f83      	ldrb	r3, [r0, #30]
  405792:	f013 0f02 	tst.w	r3, #2
  405796:	d014      	beq.n	4057c2 <tcp_output+0x56>
  405798:	b17c      	cbz	r4, 4057ba <tcp_output+0x4e>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
  40579a:	6923      	ldr	r3, [r4, #16]
  40579c:	6858      	ldr	r0, [r3, #4]
  40579e:	4b97      	ldr	r3, [pc, #604]	; (4059fc <tcp_output+0x290>)
  4057a0:	4798      	blx	r3
  4057a2:	8923      	ldrh	r3, [r4, #8]
  4057a4:	6caa      	ldr	r2, [r5, #72]	; 0x48
  4057a6:	1a9b      	subs	r3, r3, r2
  4057a8:	4418      	add	r0, r3
     (seg == NULL ||
  4057aa:	4582      	cmp	sl, r0
  4057ac:	d305      	bcc.n	4057ba <tcp_output+0x4e>
     return tcp_send_empty_ack(pcb);
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  4057ae:	f8d5 8070 	ldr.w	r8, [r5, #112]	; 0x70
  if (useg != NULL) {
  4057b2:	f1b8 0f00 	cmp.w	r8, #0
  4057b6:	d10f      	bne.n	4057d8 <tcp_output+0x6c>
  4057b8:	e015      	b.n	4057e6 <tcp_output+0x7a>
     return tcp_send_empty_ack(pcb);
  4057ba:	4628      	mov	r0, r5
  4057bc:	4b90      	ldr	r3, [pc, #576]	; (405a00 <tcp_output+0x294>)
  4057be:	4798      	blx	r3
  4057c0:	e13b      	b.n	405a3a <tcp_output+0x2ce>
  useg = pcb->unacked;
  4057c2:	f8d0 8070 	ldr.w	r8, [r0, #112]	; 0x70
  if (useg != NULL) {
  4057c6:	f1b8 0f00 	cmp.w	r8, #0
  4057ca:	d105      	bne.n	4057d8 <tcp_output+0x6c>
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
  4057cc:	b95c      	cbnz	r4, 4057e6 <tcp_output+0x7a>
    seg = pcb->unsent;
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  4057ce:	2300      	movs	r3, #0
  4057d0:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
  4057d4:	e12c      	b.n	405a30 <tcp_output+0x2c4>
    for (; useg->next != NULL; useg = useg->next);
  4057d6:	4698      	mov	r8, r3
  4057d8:	f8d8 3000 	ldr.w	r3, [r8]
  4057dc:	2b00      	cmp	r3, #0
  4057de:	d1fa      	bne.n	4057d6 <tcp_output+0x6a>
  while (seg != NULL &&
  4057e0:	2c00      	cmp	r4, #0
  4057e2:	f000 8121 	beq.w	405a28 <tcp_output+0x2bc>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  4057e6:	4e85      	ldr	r6, [pc, #532]	; (4059fc <tcp_output+0x290>)
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  4057e8:	f8df b234 	ldr.w	fp, [pc, #564]	; 405a20 <tcp_output+0x2b4>
  4057ec:	e0a2      	b.n	405934 <tcp_output+0x1c8>
    if((tcp_do_output_nagle(pcb) == 0) &&
  4057ee:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
  4057f2:	b13a      	cbz	r2, 405804 <tcp_output+0x98>
  4057f4:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
  4057f8:	2a07      	cmp	r2, #7
  4057fa:	d803      	bhi.n	405804 <tcp_output+0x98>
  4057fc:	f013 0fa0 	tst.w	r3, #160	; 0xa0
  405800:	f000 8112 	beq.w	405a28 <tcp_output+0x2bc>
    pcb->unsent = seg->next;
  405804:	6823      	ldr	r3, [r4, #0]
  405806:	66eb      	str	r3, [r5, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
  405808:	7e2b      	ldrb	r3, [r5, #24]
  40580a:	2b02      	cmp	r3, #2
  40580c:	d00c      	beq.n	405828 <tcp_output+0xbc>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  40580e:	f8d4 9010 	ldr.w	r9, [r4, #16]
  405812:	f8b9 700c 	ldrh.w	r7, [r9, #12]
  405816:	2010      	movs	r0, #16
  405818:	47d8      	blx	fp
  40581a:	4338      	orrs	r0, r7
  40581c:	f8a9 000c 	strh.w	r0, [r9, #12]
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  405820:	7fab      	ldrb	r3, [r5, #30]
  405822:	f023 0303 	bic.w	r3, r3, #3
  405826:	77ab      	strb	r3, [r5, #30]
  /** @bug Exclude retransmitted segments from this count. */
  snmp_inc_tcpoutsegs();

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
  405828:	6927      	ldr	r7, [r4, #16]
  40582a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  40582c:	4b75      	ldr	r3, [pc, #468]	; (405a04 <tcp_output+0x298>)
  40582e:	4798      	blx	r3
  405830:	60b8      	str	r0, [r7, #8]

  /* advertise our receive window size in this TCP segment */
  seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
  405832:	6927      	ldr	r7, [r4, #16]
  405834:	8de8      	ldrh	r0, [r5, #46]	; 0x2e
  405836:	47d8      	blx	fp
  405838:	81f8      	strh	r0, [r7, #14]

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  40583a:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
  40583c:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40583e:	4413      	add	r3, r2
  405840:	632b      	str	r3, [r5, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
  405842:	7b23      	ldrb	r3, [r4, #12]
  405844:	f013 0f01 	tst.w	r3, #1
  405848:	f040 8094 	bne.w	405974 <tcp_output+0x208>
  }
#endif

  /* Set retransmission timer running if it is not currently enabled 
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
  40584c:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
  405850:	f1b3 3fff 	cmp.w	r3, #4294967295
  405854:	f000 809a 	beq.w	40598c <tcp_output+0x220>
    pcb->rtime = 0;
  }

  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
  405858:	b10d      	cbz	r5, 40585e <tcp_output+0xf2>
  40585a:	682b      	ldr	r3, [r5, #0]
  40585c:	b933      	cbnz	r3, 40586c <tcp_output+0x100>
    netif = ip_route(&(pcb->remote_ip));
  40585e:	1d28      	adds	r0, r5, #4
  405860:	4b69      	ldr	r3, [pc, #420]	; (405a08 <tcp_output+0x29c>)
  405862:	4798      	blx	r3
    if (netif == NULL) {
  405864:	2800      	cmp	r0, #0
  405866:	d02e      	beq.n	4058c6 <tcp_output+0x15a>
      return;
    }
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
  405868:	6843      	ldr	r3, [r0, #4]
  40586a:	602b      	str	r3, [r5, #0]
  }

  if (pcb->rttest == 0) {
  40586c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40586e:	2b00      	cmp	r3, #0
  405870:	f000 808f 	beq.w	405992 <tcp_output+0x226>
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
  405874:	6862      	ldr	r2, [r4, #4]
  405876:	6923      	ldr	r3, [r4, #16]
  405878:	6851      	ldr	r1, [r2, #4]
  40587a:	1a5b      	subs	r3, r3, r1
  40587c:	b29b      	uxth	r3, r3

  seg->p->len -= len;
  40587e:	8951      	ldrh	r1, [r2, #10]
  405880:	1ac9      	subs	r1, r1, r3
  405882:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
  405884:	6861      	ldr	r1, [r4, #4]
  405886:	890a      	ldrh	r2, [r1, #8]
  405888:	1ad3      	subs	r3, r2, r3
  40588a:	810b      	strh	r3, [r1, #8]

  seg->p->payload = seg->tcphdr;
  40588c:	6863      	ldr	r3, [r4, #4]
  40588e:	6922      	ldr	r2, [r4, #16]
  405890:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
  405892:	6923      	ldr	r3, [r4, #16]
  405894:	2200      	movs	r2, #0
  405896:	741a      	strb	r2, [r3, #16]
  405898:	745a      	strb	r2, [r3, #17]
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
  }
#else /* TCP_CHECKSUM_ON_COPY */
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
  40589a:	6927      	ldr	r7, [r4, #16]
  40589c:	6860      	ldr	r0, [r4, #4]
  40589e:	1d2a      	adds	r2, r5, #4
  4058a0:	8903      	ldrh	r3, [r0, #8]
  4058a2:	9300      	str	r3, [sp, #0]
  4058a4:	2306      	movs	r3, #6
  4058a6:	9203      	str	r2, [sp, #12]
  4058a8:	4629      	mov	r1, r5
  4058aa:	f8df 9178 	ldr.w	r9, [pc, #376]	; 405a24 <tcp_output+0x2b8>
  4058ae:	47c8      	blx	r9
  4058b0:	8238      	strh	r0, [r7, #16]

#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
  4058b2:	7aab      	ldrb	r3, [r5, #10]
  4058b4:	6860      	ldr	r0, [r4, #4]
  4058b6:	2206      	movs	r2, #6
  4058b8:	9201      	str	r2, [sp, #4]
  4058ba:	7a6a      	ldrb	r2, [r5, #9]
  4058bc:	9200      	str	r2, [sp, #0]
  4058be:	9a03      	ldr	r2, [sp, #12]
  4058c0:	4629      	mov	r1, r5
  4058c2:	4f52      	ldr	r7, [pc, #328]	; (405a0c <tcp_output+0x2a0>)
  4058c4:	47b8      	blx	r7
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
  4058c6:	6923      	ldr	r3, [r4, #16]
  4058c8:	6858      	ldr	r0, [r3, #4]
  4058ca:	47b0      	blx	r6
  4058cc:	4607      	mov	r7, r0
  4058ce:	f8b4 9008 	ldrh.w	r9, [r4, #8]
  4058d2:	6923      	ldr	r3, [r4, #16]
  4058d4:	8998      	ldrh	r0, [r3, #12]
  4058d6:	4b4e      	ldr	r3, [pc, #312]	; (405a10 <tcp_output+0x2a4>)
  4058d8:	4798      	blx	r3
  4058da:	f010 0003 	ands.w	r0, r0, #3
  4058de:	bf18      	it	ne
  4058e0:	2001      	movne	r0, #1
  4058e2:	4448      	add	r0, r9
  4058e4:	4407      	add	r7, r0
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  4058e6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  4058e8:	1bdb      	subs	r3, r3, r7
  4058ea:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
  4058ec:	bfb8      	it	lt
  4058ee:	652f      	strlt	r7, [r5, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
  4058f0:	8927      	ldrh	r7, [r4, #8]
  4058f2:	6923      	ldr	r3, [r4, #16]
  4058f4:	8998      	ldrh	r0, [r3, #12]
  4058f6:	4b46      	ldr	r3, [pc, #280]	; (405a10 <tcp_output+0x2a4>)
  4058f8:	4798      	blx	r3
  4058fa:	f010 0003 	ands.w	r0, r0, #3
  4058fe:	bf18      	it	ne
  405900:	2001      	movne	r0, #1
  405902:	42f8      	cmn	r0, r7
  405904:	d073      	beq.n	4059ee <tcp_output+0x282>
      seg->next = NULL;
  405906:	2300      	movs	r3, #0
  405908:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
  40590a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  40590c:	2b00      	cmp	r3, #0
  40590e:	d048      	beq.n	4059a2 <tcp_output+0x236>
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
  405910:	6923      	ldr	r3, [r4, #16]
  405912:	6858      	ldr	r0, [r3, #4]
  405914:	47b0      	blx	r6
  405916:	4607      	mov	r7, r0
  405918:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40591c:	6858      	ldr	r0, [r3, #4]
  40591e:	47b0      	blx	r6
  405920:	1a38      	subs	r0, r7, r0
  405922:	2800      	cmp	r0, #0
  405924:	db40      	blt.n	4059a8 <tcp_output+0x23c>
          useg->next = seg;
  405926:	f8c8 4000 	str.w	r4, [r8]
  40592a:	46a0      	mov	r8, r4
    seg = pcb->unsent;
  40592c:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  while (seg != NULL &&
  40592e:	2c00      	cmp	r4, #0
  405930:	f43f af4d 	beq.w	4057ce <tcp_output+0x62>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  405934:	6923      	ldr	r3, [r4, #16]
  405936:	6858      	ldr	r0, [r3, #4]
  405938:	47b0      	blx	r6
  40593a:	6cab      	ldr	r3, [r5, #72]	; 0x48
  40593c:	1ac0      	subs	r0, r0, r3
  40593e:	8923      	ldrh	r3, [r4, #8]
  405940:	4418      	add	r0, r3
  while (seg != NULL &&
  405942:	4582      	cmp	sl, r0
  405944:	d370      	bcc.n	405a28 <tcp_output+0x2bc>
    if((tcp_do_output_nagle(pcb) == 0) &&
  405946:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  405948:	2b00      	cmp	r3, #0
  40594a:	f43f af5b 	beq.w	405804 <tcp_output+0x98>
  40594e:	7fab      	ldrb	r3, [r5, #30]
  405950:	f013 0f44 	tst.w	r3, #68	; 0x44
  405954:	f47f af56 	bne.w	405804 <tcp_output+0x98>
  405958:	6eea      	ldr	r2, [r5, #108]	; 0x6c
  40595a:	2a00      	cmp	r2, #0
  40595c:	f43f af47 	beq.w	4057ee <tcp_output+0x82>
  405960:	6811      	ldr	r1, [r2, #0]
  405962:	2900      	cmp	r1, #0
  405964:	f47f af4e 	bne.w	405804 <tcp_output+0x98>
  405968:	8911      	ldrh	r1, [r2, #8]
  40596a:	8eea      	ldrh	r2, [r5, #54]	; 0x36
  40596c:	4291      	cmp	r1, r2
  40596e:	f4bf af49 	bcs.w	405804 <tcp_output+0x98>
  405972:	e73c      	b.n	4057ee <tcp_output+0x82>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  405974:	6927      	ldr	r7, [r4, #16]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->remote_ip);
  405976:	1d29      	adds	r1, r5, #4
  405978:	f240 50b4 	movw	r0, #1460	; 0x5b4
  40597c:	4b25      	ldr	r3, [pc, #148]	; (405a14 <tcp_output+0x2a8>)
  40597e:	4798      	blx	r3
    *opts = TCP_BUILD_MSS_OPTION(mss);
  405980:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
  405984:	4b1f      	ldr	r3, [pc, #124]	; (405a04 <tcp_output+0x298>)
  405986:	4798      	blx	r3
  405988:	6178      	str	r0, [r7, #20]
  40598a:	e75f      	b.n	40584c <tcp_output+0xe0>
    pcb->rtime = 0;
  40598c:	2300      	movs	r3, #0
  40598e:	86ab      	strh	r3, [r5, #52]	; 0x34
  405990:	e762      	b.n	405858 <tcp_output+0xec>
    pcb->rttest = tcp_ticks;
  405992:	4b21      	ldr	r3, [pc, #132]	; (405a18 <tcp_output+0x2ac>)
  405994:	681b      	ldr	r3, [r3, #0]
  405996:	63ab      	str	r3, [r5, #56]	; 0x38
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
  405998:	6923      	ldr	r3, [r4, #16]
  40599a:	6858      	ldr	r0, [r3, #4]
  40599c:	47b0      	blx	r6
  40599e:	63e8      	str	r0, [r5, #60]	; 0x3c
  4059a0:	e768      	b.n	405874 <tcp_output+0x108>
        pcb->unacked = seg;
  4059a2:	672c      	str	r4, [r5, #112]	; 0x70
  4059a4:	46a0      	mov	r8, r4
  4059a6:	e7c1      	b.n	40592c <tcp_output+0x1c0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
  4059a8:	f105 0970 	add.w	r9, r5, #112	; 0x70
          while (*cur_seg &&
  4059ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  4059ae:	b1c3      	cbz	r3, 4059e2 <tcp_output+0x276>
  4059b0:	4622      	mov	r2, r4
  4059b2:	464c      	mov	r4, r9
  4059b4:	4691      	mov	r9, r2
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
  4059b6:	691b      	ldr	r3, [r3, #16]
  4059b8:	6858      	ldr	r0, [r3, #4]
  4059ba:	47b0      	blx	r6
  4059bc:	4607      	mov	r7, r0
  4059be:	f8d9 3010 	ldr.w	r3, [r9, #16]
  4059c2:	6858      	ldr	r0, [r3, #4]
  4059c4:	47b0      	blx	r6
  4059c6:	1a38      	subs	r0, r7, r0
          while (*cur_seg &&
  4059c8:	2800      	cmp	r0, #0
  4059ca:	da07      	bge.n	4059dc <tcp_output+0x270>
              cur_seg = &((*cur_seg)->next );
  4059cc:	6824      	ldr	r4, [r4, #0]
          while (*cur_seg &&
  4059ce:	6823      	ldr	r3, [r4, #0]
  4059d0:	2b00      	cmp	r3, #0
  4059d2:	d1f0      	bne.n	4059b6 <tcp_output+0x24a>
  4059d4:	464b      	mov	r3, r9
  4059d6:	46a1      	mov	r9, r4
  4059d8:	461c      	mov	r4, r3
  4059da:	e002      	b.n	4059e2 <tcp_output+0x276>
  4059dc:	464b      	mov	r3, r9
  4059de:	46a1      	mov	r9, r4
  4059e0:	461c      	mov	r4, r3
          seg->next = (*cur_seg);
  4059e2:	f8d9 3000 	ldr.w	r3, [r9]
  4059e6:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
  4059e8:	f8c9 4000 	str.w	r4, [r9]
  4059ec:	e79e      	b.n	40592c <tcp_output+0x1c0>
      tcp_seg_free(seg);
  4059ee:	4620      	mov	r0, r4
  4059f0:	4b0a      	ldr	r3, [pc, #40]	; (405a1c <tcp_output+0x2b0>)
  4059f2:	4798      	blx	r3
  4059f4:	e79a      	b.n	40592c <tcp_output+0x1c0>
  4059f6:	bf00      	nop
  4059f8:	204049e4 	.word	0x204049e4
  4059fc:	004013a9 	.word	0x004013a9
  405a00:	004056f5 	.word	0x004056f5
  405a04:	00401391 	.word	0x00401391
  405a08:	00401751 	.word	0x00401751
  405a0c:	00401a59 	.word	0x00401a59
  405a10:	00401387 	.word	0x00401387
  405a14:	004038e9 	.word	0x004038e9
  405a18:	204049d0 	.word	0x204049d0
  405a1c:	00402f89 	.word	0x00402f89
  405a20:	0040137d 	.word	0x0040137d
  405a24:	00401655 	.word	0x00401655
  if (pcb->unsent == NULL) {
  405a28:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  405a2a:	2b00      	cmp	r3, #0
  405a2c:	f43f aecf 	beq.w	4057ce <tcp_output+0x62>
  pcb->flags &= ~TF_NAGLEMEMERR;
  405a30:	7fab      	ldrb	r3, [r5, #30]
  405a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  405a36:	77ab      	strb	r3, [r5, #30]
  return ERR_OK;
  405a38:	2000      	movs	r0, #0
}
  405a3a:	b005      	add	sp, #20
  405a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ERR_OK;
  405a40:	2000      	movs	r0, #0
  405a42:	4770      	bx	lr

00405a44 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  ip_addr_t *local_ip, ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
  405a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405a48:	b083      	sub	sp, #12
  405a4a:	4681      	mov	r9, r0
  405a4c:	468a      	mov	sl, r1
  405a4e:	4693      	mov	fp, r2
  405a50:	4698      	mov	r8, r3
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  405a52:	2200      	movs	r2, #0
  405a54:	2114      	movs	r1, #20
  405a56:	2001      	movs	r0, #1
  405a58:	4b1f      	ldr	r3, [pc, #124]	; (405ad8 <tcp_rst+0x94>)
  405a5a:	4798      	blx	r3
  if (p == NULL) {
  405a5c:	2800      	cmp	r0, #0
  405a5e:	d036      	beq.n	405ace <tcp_rst+0x8a>
  405a60:	4605      	mov	r5, r0
      return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  405a62:	6844      	ldr	r4, [r0, #4]
  tcphdr->src = htons(local_port);
  405a64:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
  405a68:	4e1c      	ldr	r6, [pc, #112]	; (405adc <tcp_rst+0x98>)
  405a6a:	47b0      	blx	r6
  405a6c:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = htons(remote_port);
  405a6e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  405a72:	47b0      	blx	r6
  405a74:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = htonl(seqno);
  405a76:	4648      	mov	r0, r9
  405a78:	4f19      	ldr	r7, [pc, #100]	; (405ae0 <tcp_rst+0x9c>)
  405a7a:	47b8      	blx	r7
  405a7c:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = htonl(ackno);
  405a7e:	4650      	mov	r0, sl
  405a80:	47b8      	blx	r7
  405a82:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
  405a84:	f245 0014 	movw	r0, #20500	; 0x5014
  405a88:	47b0      	blx	r6
  405a8a:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
  405a8c:	2600      	movs	r6, #0
  405a8e:	230b      	movs	r3, #11
  405a90:	73a3      	strb	r3, [r4, #14]
  405a92:	2368      	movs	r3, #104	; 0x68
  405a94:	73e3      	strb	r3, [r4, #15]
  tcphdr->chksum = 0;
  405a96:	7426      	strb	r6, [r4, #16]
  405a98:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
  405a9a:	74a6      	strb	r6, [r4, #18]
  405a9c:	74e6      	strb	r6, [r4, #19]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
  405a9e:	892b      	ldrh	r3, [r5, #8]
  405aa0:	9300      	str	r3, [sp, #0]
  405aa2:	2306      	movs	r3, #6
  405aa4:	4642      	mov	r2, r8
  405aa6:	4659      	mov	r1, fp
  405aa8:	4628      	mov	r0, r5
  405aaa:	4f0e      	ldr	r7, [pc, #56]	; (405ae4 <tcp_rst+0xa0>)
  405aac:	47b8      	blx	r7
  405aae:	8220      	strh	r0, [r4, #16]
              IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
  405ab0:	2306      	movs	r3, #6
  405ab2:	9301      	str	r3, [sp, #4]
  405ab4:	9600      	str	r6, [sp, #0]
  405ab6:	23ff      	movs	r3, #255	; 0xff
  405ab8:	4642      	mov	r2, r8
  405aba:	4659      	mov	r1, fp
  405abc:	4628      	mov	r0, r5
  405abe:	4c0a      	ldr	r4, [pc, #40]	; (405ae8 <tcp_rst+0xa4>)
  405ac0:	47a0      	blx	r4
  pbuf_free(p);
  405ac2:	4628      	mov	r0, r5
  405ac4:	4b09      	ldr	r3, [pc, #36]	; (405aec <tcp_rst+0xa8>)
  405ac6:	4798      	blx	r3
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
  405ac8:	b003      	add	sp, #12
  405aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
  405ace:	4808      	ldr	r0, [pc, #32]	; (405af0 <tcp_rst+0xac>)
  405ad0:	4b08      	ldr	r3, [pc, #32]	; (405af4 <tcp_rst+0xb0>)
  405ad2:	4798      	blx	r3
      return;
  405ad4:	e7f8      	b.n	405ac8 <tcp_rst+0x84>
  405ad6:	bf00      	nop
  405ad8:	004028b9 	.word	0x004028b9
  405adc:	0040137d 	.word	0x0040137d
  405ae0:	00401391 	.word	0x00401391
  405ae4:	00401655 	.word	0x00401655
  405ae8:	00401a59 	.word	0x00401a59
  405aec:	00402861 	.word	0x00402861
  405af0:	0040b208 	.word	0x0040b208
  405af4:	00407289 	.word	0x00407289

00405af8 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
  405af8:	6f02      	ldr	r2, [r0, #112]	; 0x70
  405afa:	b10a      	cbz	r2, 405b00 <tcp_rexmit_rto+0x8>
{
  405afc:	b508      	push	{r3, lr}
  405afe:	e001      	b.n	405b04 <tcp_rexmit_rto+0xc>
  405b00:	4770      	bx	lr
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
  405b02:	461a      	mov	r2, r3
  405b04:	6813      	ldr	r3, [r2, #0]
  405b06:	2b00      	cmp	r3, #0
  405b08:	d1fb      	bne.n	405b02 <tcp_rexmit_rto+0xa>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
  405b0a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  405b0c:	6013      	str	r3, [r2, #0]
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  405b0e:	6f03      	ldr	r3, [r0, #112]	; 0x70
  405b10:	66c3      	str	r3, [r0, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
  405b12:	2200      	movs	r2, #0
  405b14:	6702      	str	r2, [r0, #112]	; 0x70
  /* last unsent hasn't changed, no need to reset unsent_oversize */

  /* increment number of retransmissions */
  ++pcb->nrtx;
  405b16:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
  405b1a:	3301      	adds	r3, #1
  405b1c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
  405b20:	6382      	str	r2, [r0, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
  405b22:	4b01      	ldr	r3, [pc, #4]	; (405b28 <tcp_rexmit_rto+0x30>)
  405b24:	4798      	blx	r3
  405b26:	bd08      	pop	{r3, pc}
  405b28:	0040576d 	.word	0x0040576d

00405b2c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
  405b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
  405b30:	6f07      	ldr	r7, [r0, #112]	; 0x70
  405b32:	b317      	cbz	r7, 405b7a <tcp_rexmit+0x4e>
  405b34:	4680      	mov	r8, r0
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
  405b36:	683b      	ldr	r3, [r7, #0]
  405b38:	6703      	str	r3, [r0, #112]	; 0x70

  cur_seg = &(pcb->unsent);
  405b3a:	f100 056c 	add.w	r5, r0, #108	; 0x6c
  while (*cur_seg &&
  405b3e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  405b40:	b173      	cbz	r3, 405b60 <tcp_rexmit+0x34>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
  405b42:	4e10      	ldr	r6, [pc, #64]	; (405b84 <tcp_rexmit+0x58>)
  405b44:	691b      	ldr	r3, [r3, #16]
  405b46:	6858      	ldr	r0, [r3, #4]
  405b48:	47b0      	blx	r6
  405b4a:	4604      	mov	r4, r0
  405b4c:	693b      	ldr	r3, [r7, #16]
  405b4e:	6858      	ldr	r0, [r3, #4]
  405b50:	47b0      	blx	r6
  405b52:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
  405b54:	2800      	cmp	r0, #0
  405b56:	da03      	bge.n	405b60 <tcp_rexmit+0x34>
      cur_seg = &((*cur_seg)->next );
  405b58:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
  405b5a:	682b      	ldr	r3, [r5, #0]
  405b5c:	2b00      	cmp	r3, #0
  405b5e:	d1f1      	bne.n	405b44 <tcp_rexmit+0x18>
  }
  seg->next = *cur_seg;
  405b60:	682b      	ldr	r3, [r5, #0]
  405b62:	603b      	str	r3, [r7, #0]
  *cur_seg = seg;
  405b64:	602f      	str	r7, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
  405b66:	683b      	ldr	r3, [r7, #0]
  405b68:	b14b      	cbz	r3, 405b7e <tcp_rexmit+0x52>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
  405b6a:	f898 3046 	ldrb.w	r3, [r8, #70]	; 0x46
  405b6e:	3301      	adds	r3, #1
  405b70:	f888 3046 	strb.w	r3, [r8, #70]	; 0x46

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
  405b74:	2300      	movs	r3, #0
  405b76:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  405b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pcb->unsent_oversize = 0;
  405b7e:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
  405b82:	e7f2      	b.n	405b6a <tcp_rexmit+0x3e>
  405b84:	004013a9 	.word	0x004013a9

00405b88 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void 
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
  405b88:	6f03      	ldr	r3, [r0, #112]	; 0x70
  405b8a:	b11b      	cbz	r3, 405b94 <tcp_rexmit_fast+0xc>
  405b8c:	7f83      	ldrb	r3, [r0, #30]
  405b8e:	f013 0f04 	tst.w	r3, #4
  405b92:	d000      	beq.n	405b96 <tcp_rexmit_fast+0xe>
  405b94:	4770      	bx	lr
{
  405b96:	b510      	push	{r4, lr}
  405b98:	4604      	mov	r4, r0
    LWIP_DEBUGF(TCP_FR_DEBUG, 
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
  405b9a:	4b12      	ldr	r3, [pc, #72]	; (405be4 <tcp_rexmit_fast+0x5c>)
  405b9c:	4798      	blx	r3

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
  405b9e:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
  405ba2:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
  405ba6:	4293      	cmp	r3, r2
  405ba8:	d917      	bls.n	405bda <tcp_rexmit_fast+0x52>
      pcb->ssthresh = pcb->snd_wnd / 2;
  405baa:	0852      	lsrs	r2, r2, #1
  405bac:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
    }
    
    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < 2*pcb->mss) {
  405bb0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  405bb2:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
  405bb6:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
  405bba:	da02      	bge.n	405bc2 <tcp_rexmit_fast+0x3a>
      LWIP_DEBUGF(TCP_FR_DEBUG, 
                  ("tcp_receive: The minimum value for ssthresh %"U16_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, 2*pcb->mss));
      pcb->ssthresh = 2*pcb->mss;
  405bbc:	005a      	lsls	r2, r3, #1
  405bbe:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
    }
    
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
  405bc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  405bc6:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
  405bca:	4413      	add	r3, r2
  405bcc:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    pcb->flags |= TF_INFR;
  405bd0:	7fa3      	ldrb	r3, [r4, #30]
  405bd2:	f043 0304 	orr.w	r3, r3, #4
  405bd6:	77a3      	strb	r3, [r4, #30]
  405bd8:	bd10      	pop	{r4, pc}
      pcb->ssthresh = pcb->cwnd / 2;
  405bda:	085b      	lsrs	r3, r3, #1
  405bdc:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  405be0:	e7e6      	b.n	405bb0 <tcp_rexmit_fast+0x28>
  405be2:	bf00      	nop
  405be4:	00405b2d 	.word	0x00405b2d

00405be8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
void
tcp_keepalive(struct tcp_pcb *pcb)
{
  405be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405bec:	b082      	sub	sp, #8
  405bee:	4604      	mov	r4, r0
  struct pbuf *p;
  struct tcp_hdr *tcphdr;

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: sending KEEPALIVE probe to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
  405bf0:	7983      	ldrb	r3, [r0, #6]
  405bf2:	7942      	ldrb	r2, [r0, #5]
  405bf4:	7901      	ldrb	r1, [r0, #4]
  405bf6:	79c0      	ldrb	r0, [r0, #7]
  405bf8:	9000      	str	r0, [sp, #0]
  405bfa:	481d      	ldr	r0, [pc, #116]	; (405c70 <tcp_keepalive+0x88>)
  405bfc:	4d1d      	ldr	r5, [pc, #116]	; (405c74 <tcp_keepalive+0x8c>)
  405bfe:	47a8      	blx	r5
                          ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                          ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
  405c00:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
  405c04:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405c06:	491c      	ldr	r1, [pc, #112]	; (405c78 <tcp_keepalive+0x90>)
  405c08:	6809      	ldr	r1, [r1, #0]
  405c0a:	481c      	ldr	r0, [pc, #112]	; (405c7c <tcp_keepalive+0x94>)
  405c0c:	47a8      	blx	r5
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
  405c0e:	6d20      	ldr	r0, [r4, #80]	; 0x50
  405c10:	3801      	subs	r0, #1
  405c12:	4b1b      	ldr	r3, [pc, #108]	; (405c80 <tcp_keepalive+0x98>)
  405c14:	4798      	blx	r3
  405c16:	4603      	mov	r3, r0
  405c18:	2200      	movs	r2, #0
  405c1a:	4611      	mov	r1, r2
  405c1c:	4620      	mov	r0, r4
  405c1e:	4d19      	ldr	r5, [pc, #100]	; (405c84 <tcp_keepalive+0x9c>)
  405c20:	47a8      	blx	r5
  if(p == NULL) {
  405c22:	b308      	cbz	r0, 405c68 <tcp_keepalive+0x80>
  405c24:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  405c26:	6847      	ldr	r7, [r0, #4]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
  405c28:	1d26      	adds	r6, r4, #4
  405c2a:	8903      	ldrh	r3, [r0, #8]
  405c2c:	9300      	str	r3, [sp, #0]
  405c2e:	2306      	movs	r3, #6
  405c30:	4632      	mov	r2, r6
  405c32:	4621      	mov	r1, r4
  405c34:	f8df 8060 	ldr.w	r8, [pc, #96]	; 405c98 <tcp_keepalive+0xb0>
  405c38:	47c0      	blx	r8
  405c3a:	8238      	strh	r0, [r7, #16]
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
  405c3c:	7aa3      	ldrb	r3, [r4, #10]
  405c3e:	2206      	movs	r2, #6
  405c40:	9201      	str	r2, [sp, #4]
  405c42:	2200      	movs	r2, #0
  405c44:	9200      	str	r2, [sp, #0]
  405c46:	4632      	mov	r2, r6
  405c48:	4621      	mov	r1, r4
  405c4a:	4628      	mov	r0, r5
  405c4c:	4e0e      	ldr	r6, [pc, #56]	; (405c88 <tcp_keepalive+0xa0>)
  405c4e:	47b0      	blx	r6
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
  405c50:	4628      	mov	r0, r5
  405c52:	4b0e      	ldr	r3, [pc, #56]	; (405c8c <tcp_keepalive+0xa4>)
  405c54:	4798      	blx	r3

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F".\n",
  405c56:	6d21      	ldr	r1, [r4, #80]	; 0x50
  405c58:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  405c5a:	3901      	subs	r1, #1
  405c5c:	480c      	ldr	r0, [pc, #48]	; (405c90 <tcp_keepalive+0xa8>)
  405c5e:	4b05      	ldr	r3, [pc, #20]	; (405c74 <tcp_keepalive+0x8c>)
  405c60:	4798      	blx	r3
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
  405c62:	b002      	add	sp, #8
  405c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_DEBUGF(TCP_DEBUG, 
  405c68:	480a      	ldr	r0, [pc, #40]	; (405c94 <tcp_keepalive+0xac>)
  405c6a:	4b02      	ldr	r3, [pc, #8]	; (405c74 <tcp_keepalive+0x8c>)
  405c6c:	4798      	blx	r3
    return;
  405c6e:	e7f8      	b.n	405c62 <tcp_keepalive+0x7a>
  405c70:	0040b130 	.word	0x0040b130
  405c74:	00407289 	.word	0x00407289
  405c78:	204049d0 	.word	0x204049d0
  405c7c:	0040b16c 	.word	0x0040b16c
  405c80:	00401391 	.word	0x00401391
  405c84:	00405255 	.word	0x00405255
  405c88:	00401a59 	.word	0x00401a59
  405c8c:	00402861 	.word	0x00402861
  405c90:	0040b1e4 	.word	0x0040b1e4
  405c94:	0040b1b0 	.word	0x0040b1b0
  405c98:	00401655 	.word	0x00401655

00405c9c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
  405c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405ca0:	b082      	sub	sp, #8
  405ca2:	4604      	mov	r4, r0
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;

  LWIP_DEBUGF(TCP_DEBUG, 
  405ca4:	7983      	ldrb	r3, [r0, #6]
  405ca6:	7942      	ldrb	r2, [r0, #5]
  405ca8:	7901      	ldrb	r1, [r0, #4]
  405caa:	79c0      	ldrb	r0, [r0, #7]
  405cac:	9000      	str	r0, [sp, #0]
  405cae:	4833      	ldr	r0, [pc, #204]	; (405d7c <tcp_zero_window_probe+0xe0>)
  405cb0:	4d33      	ldr	r5, [pc, #204]	; (405d80 <tcp_zero_window_probe+0xe4>)
  405cb2:	47a8      	blx	r5
              ("tcp_zero_window_probe: sending ZERO WINDOW probe to %"
               U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
               ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
               ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));

  LWIP_DEBUGF(TCP_DEBUG, 
  405cb4:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
  405cb8:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405cba:	4932      	ldr	r1, [pc, #200]	; (405d84 <tcp_zero_window_probe+0xe8>)
  405cbc:	6809      	ldr	r1, [r1, #0]
  405cbe:	4832      	ldr	r0, [pc, #200]	; (405d88 <tcp_zero_window_probe+0xec>)
  405cc0:	47a8      	blx	r5
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
  405cc2:	6f25      	ldr	r5, [r4, #112]	; 0x70

  if(seg == NULL) {
  405cc4:	b1ed      	cbz	r5, 405d02 <tcp_zero_window_probe+0x66>
  }
  if(seg == NULL) {
    return;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  405cc6:	692b      	ldr	r3, [r5, #16]
  405cc8:	8998      	ldrh	r0, [r3, #12]
  405cca:	4b30      	ldr	r3, [pc, #192]	; (405d8c <tcp_zero_window_probe+0xf0>)
  405ccc:	4798      	blx	r3
  405cce:	f010 0f01 	tst.w	r0, #1
  405cd2:	d001      	beq.n	405cd8 <tcp_zero_window_probe+0x3c>
  405cd4:	892b      	ldrh	r3, [r5, #8]
  405cd6:	b1e3      	cbz	r3, 405d12 <tcp_zero_window_probe+0x76>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  405cd8:	692b      	ldr	r3, [r5, #16]
  405cda:	685b      	ldr	r3, [r3, #4]
  405cdc:	2201      	movs	r2, #1
  405cde:	2100      	movs	r1, #0
  405ce0:	4620      	mov	r0, r4
  405ce2:	4e2b      	ldr	r6, [pc, #172]	; (405d90 <tcp_zero_window_probe+0xf4>)
  405ce4:	47b0      	blx	r6
  if(p == NULL) {
  405ce6:	4606      	mov	r6, r0
  405ce8:	b178      	cbz	r0, 405d0a <tcp_zero_window_probe+0x6e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  405cea:	6877      	ldr	r7, [r6, #4]
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  405cec:	6868      	ldr	r0, [r5, #4]
  405cee:	8903      	ldrh	r3, [r0, #8]
  405cf0:	892a      	ldrh	r2, [r5, #8]
  405cf2:	1a9b      	subs	r3, r3, r2
  405cf4:	b29b      	uxth	r3, r3
  405cf6:	2201      	movs	r2, #1
  405cf8:	f107 0114 	add.w	r1, r7, #20
  405cfc:	4d25      	ldr	r5, [pc, #148]	; (405d94 <tcp_zero_window_probe+0xf8>)
  405cfe:	47a8      	blx	r5
  405d00:	e01b      	b.n	405d3a <tcp_zero_window_probe+0x9e>
    seg = pcb->unsent;
  405d02:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if(seg == NULL) {
  405d04:	2d00      	cmp	r5, #0
  405d06:	d036      	beq.n	405d76 <tcp_zero_window_probe+0xda>
  405d08:	e7dd      	b.n	405cc6 <tcp_zero_window_probe+0x2a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
  405d0a:	4823      	ldr	r0, [pc, #140]	; (405d98 <tcp_zero_window_probe+0xfc>)
  405d0c:	4b1c      	ldr	r3, [pc, #112]	; (405d80 <tcp_zero_window_probe+0xe4>)
  405d0e:	4798      	blx	r3
    return;
  405d10:	e031      	b.n	405d76 <tcp_zero_window_probe+0xda>
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  405d12:	692b      	ldr	r3, [r5, #16]
  405d14:	685b      	ldr	r3, [r3, #4]
  405d16:	2200      	movs	r2, #0
  405d18:	4611      	mov	r1, r2
  405d1a:	4620      	mov	r0, r4
  405d1c:	4d1c      	ldr	r5, [pc, #112]	; (405d90 <tcp_zero_window_probe+0xf4>)
  405d1e:	47a8      	blx	r5
  if(p == NULL) {
  405d20:	4606      	mov	r6, r0
  405d22:	2800      	cmp	r0, #0
  405d24:	d0f1      	beq.n	405d0a <tcp_zero_window_probe+0x6e>
  tcphdr = (struct tcp_hdr *)p->payload;
  405d26:	6877      	ldr	r7, [r6, #4]
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
  405d28:	f9b7 500c 	ldrsh.w	r5, [r7, #12]
  405d2c:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
  405d30:	2011      	movs	r0, #17
  405d32:	4b1a      	ldr	r3, [pc, #104]	; (405d9c <tcp_zero_window_probe+0x100>)
  405d34:	4798      	blx	r3
  405d36:	4328      	orrs	r0, r5
  405d38:	81b8      	strh	r0, [r7, #12]
  }

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
  405d3a:	1d25      	adds	r5, r4, #4
  405d3c:	8933      	ldrh	r3, [r6, #8]
  405d3e:	9300      	str	r3, [sp, #0]
  405d40:	2306      	movs	r3, #6
  405d42:	462a      	mov	r2, r5
  405d44:	4621      	mov	r1, r4
  405d46:	4630      	mov	r0, r6
  405d48:	f8df 8060 	ldr.w	r8, [pc, #96]	; 405dac <tcp_zero_window_probe+0x110>
  405d4c:	47c0      	blx	r8
  405d4e:	8238      	strh	r0, [r7, #16]
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
  405d50:	7aa3      	ldrb	r3, [r4, #10]
  405d52:	2206      	movs	r2, #6
  405d54:	9201      	str	r2, [sp, #4]
  405d56:	2200      	movs	r2, #0
  405d58:	9200      	str	r2, [sp, #0]
  405d5a:	462a      	mov	r2, r5
  405d5c:	4621      	mov	r1, r4
  405d5e:	4630      	mov	r0, r6
  405d60:	4d0f      	ldr	r5, [pc, #60]	; (405da0 <tcp_zero_window_probe+0x104>)
  405d62:	47a8      	blx	r5
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
  405d64:	4630      	mov	r0, r6
  405d66:	4b0f      	ldr	r3, [pc, #60]	; (405da4 <tcp_zero_window_probe+0x108>)
  405d68:	4798      	blx	r3

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
  405d6a:	6d21      	ldr	r1, [r4, #80]	; 0x50
  405d6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  405d6e:	3901      	subs	r1, #1
  405d70:	480d      	ldr	r0, [pc, #52]	; (405da8 <tcp_zero_window_probe+0x10c>)
  405d72:	4b03      	ldr	r3, [pc, #12]	; (405d80 <tcp_zero_window_probe+0xe4>)
  405d74:	4798      	blx	r3
                          " ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
  405d76:	b002      	add	sp, #8
  405d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405d7c:	0040b2a8 	.word	0x0040b2a8
  405d80:	00407289 	.word	0x00407289
  405d84:	204049d0 	.word	0x204049d0
  405d88:	0040b2f0 	.word	0x0040b2f0
  405d8c:	00401387 	.word	0x00401387
  405d90:	00405255 	.word	0x00405255
  405d94:	00402be5 	.word	0x00402be5
  405d98:	0040b33c 	.word	0x0040b33c
  405d9c:	0040137d 	.word	0x0040137d
  405da0:	00401a59 	.word	0x00401a59
  405da4:	00402861 	.word	0x00402861
  405da8:	0040b368 	.word	0x0040b368
  405dac:	00401655 	.word	0x00401655

00405db0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
  405db0:	4770      	bx	lr
	...

00405db4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
  405db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405db8:	b085      	sub	sp, #20
  405dba:	4604      	mov	r4, r0
  405dbc:	4689      	mov	r9, r1

  PERF_START;

  UDP_STATS_INC(udp.recv);

  iphdr = (struct ip_hdr *)p->payload;
  405dbe:	f8d0 8004 	ldr.w	r8, [r0, #4]
  405dc2:	f898 1000 	ldrb.w	r1, [r8]
  405dc6:	f001 010f 	and.w	r1, r1, #15

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
  405dca:	8903      	ldrh	r3, [r0, #8]
  405dcc:	1c8a      	adds	r2, r1, #2
  405dce:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
  405dd2:	db04      	blt.n	405dde <udp_input+0x2a>
  405dd4:	0089      	lsls	r1, r1, #2
  405dd6:	4249      	negs	r1, r1
  405dd8:	4b59      	ldr	r3, [pc, #356]	; (405f40 <udp_input+0x18c>)
  405dda:	4798      	blx	r3
  405ddc:	b128      	cbz	r0, 405dea <udp_input+0x36>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    snmp_inc_udpinerrors();
    pbuf_free(p);
  405dde:	4620      	mov	r0, r4
  405de0:	4b58      	ldr	r3, [pc, #352]	; (405f44 <udp_input+0x190>)
  405de2:	4798      	blx	r3
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
}
  405de4:	b005      	add	sp, #20
  405de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  udphdr = (struct udp_hdr *)p->payload;
  405dea:	f8d4 a004 	ldr.w	sl, [r4, #4]
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
  405dee:	4649      	mov	r1, r9
  405df0:	4b55      	ldr	r3, [pc, #340]	; (405f48 <udp_input+0x194>)
  405df2:	6818      	ldr	r0, [r3, #0]
  405df4:	4b55      	ldr	r3, [pc, #340]	; (405f4c <udp_input+0x198>)
  405df6:	4798      	blx	r3
  405df8:	4607      	mov	r7, r0
  src = ntohs(udphdr->src);
  405dfa:	f8ba 0000 	ldrh.w	r0, [sl]
  405dfe:	4e54      	ldr	r6, [pc, #336]	; (405f50 <udp_input+0x19c>)
  405e00:	47b0      	blx	r6
  405e02:	4605      	mov	r5, r0
  dest = ntohs(udphdr->dest);
  405e04:	f8ba 0002 	ldrh.w	r0, [sl, #2]
  405e08:	47b0      	blx	r6
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  405e0a:	4b52      	ldr	r3, [pc, #328]	; (405f54 <udp_input+0x1a0>)
  405e0c:	f8d3 e000 	ldr.w	lr, [r3]
  405e10:	f1be 0f00 	cmp.w	lr, #0
  405e14:	d042      	beq.n	405e9c <udp_input+0xe8>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
  405e16:	4b4c      	ldr	r3, [pc, #304]	; (405f48 <udp_input+0x194>)
  405e18:	f8d3 c000 	ldr.w	ip, [r3]
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
  405e1c:	4b4e      	ldr	r3, [pc, #312]	; (405f58 <udp_input+0x1a4>)
  405e1e:	f8d3 b000 	ldr.w	fp, [r3]
  405e22:	4673      	mov	r3, lr
  405e24:	2600      	movs	r6, #0
  405e26:	4632      	mov	r2, r6
  405e28:	9403      	str	r4, [sp, #12]
  405e2a:	e07c      	b.n	405f26 <udp_input+0x172>
          if ((uncon_pcb == NULL) && 
  405e2c:	7c19      	ldrb	r1, [r3, #16]
  405e2e:	f001 0104 	and.w	r1, r1, #4
  405e32:	2900      	cmp	r1, #0
  405e34:	bf08      	it	eq
  405e36:	461e      	moveq	r6, r3
  405e38:	e06d      	b.n	405f16 <udp_input+0x162>
          (pcb->remote_port == src) &&
  405e3a:	f113 0f04 	cmn.w	r3, #4
  405e3e:	d003      	beq.n	405e48 <udp_input+0x94>
          (ip_addr_isany(&pcb->remote_ip) ||
  405e40:	6859      	ldr	r1, [r3, #4]
  405e42:	b109      	cbz	r1, 405e48 <udp_input+0x94>
  405e44:	4559      	cmp	r1, fp
  405e46:	d169      	bne.n	405f1c <udp_input+0x168>
  405e48:	9c03      	ldr	r4, [sp, #12]
        if (prev != NULL) {
  405e4a:	b12a      	cbz	r2, 405e58 <udp_input+0xa4>
          prev->next = pcb->next;
  405e4c:	68d9      	ldr	r1, [r3, #12]
  405e4e:	60d1      	str	r1, [r2, #12]
          pcb->next = udp_pcbs;
  405e50:	f8c3 e00c 	str.w	lr, [r3, #12]
          udp_pcbs = pcb;
  405e54:	4a3f      	ldr	r2, [pc, #252]	; (405f54 <udp_input+0x1a0>)
  405e56:	6013      	str	r3, [r2, #0]
    if (pcb == NULL) {
  405e58:	b113      	cbz	r3, 405e60 <udp_input+0xac>
  405e5a:	461e      	mov	r6, r3
  405e5c:	e001      	b.n	405e62 <udp_input+0xae>
  405e5e:	9c03      	ldr	r4, [sp, #12]
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
  405e60:	b1e6      	cbz	r6, 405e9c <udp_input+0xe8>
      if (udphdr->chksum != 0) {
  405e62:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  405e66:	b14b      	cbz	r3, 405e7c <udp_input+0xc8>
        if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
  405e68:	8923      	ldrh	r3, [r4, #8]
  405e6a:	9300      	str	r3, [sp, #0]
  405e6c:	2311      	movs	r3, #17
  405e6e:	4a36      	ldr	r2, [pc, #216]	; (405f48 <udp_input+0x194>)
  405e70:	4939      	ldr	r1, [pc, #228]	; (405f58 <udp_input+0x1a4>)
  405e72:	4620      	mov	r0, r4
  405e74:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 405f60 <udp_input+0x1ac>
  405e78:	47c8      	blx	r9
  405e7a:	b9d8      	cbnz	r0, 405eb4 <udp_input+0x100>
    if(pbuf_header(p, -UDP_HLEN)) {
  405e7c:	f06f 0107 	mvn.w	r1, #7
  405e80:	4620      	mov	r0, r4
  405e82:	4b2f      	ldr	r3, [pc, #188]	; (405f40 <udp_input+0x18c>)
  405e84:	4798      	blx	r3
  405e86:	b9c8      	cbnz	r0, 405ebc <udp_input+0x108>
    if (pcb != NULL) {
  405e88:	b306      	cbz	r6, 405ecc <udp_input+0x118>
      if (pcb->recv != NULL) {
  405e8a:	69b7      	ldr	r7, [r6, #24]
  405e8c:	b1d7      	cbz	r7, 405ec4 <udp_input+0x110>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
  405e8e:	69f0      	ldr	r0, [r6, #28]
  405e90:	9500      	str	r5, [sp, #0]
  405e92:	4b31      	ldr	r3, [pc, #196]	; (405f58 <udp_input+0x1a4>)
  405e94:	4622      	mov	r2, r4
  405e96:	4631      	mov	r1, r6
  405e98:	47b8      	blx	r7
  405e9a:	e7a3      	b.n	405de4 <udp_input+0x30>
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
  405e9c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405ea0:	4b29      	ldr	r3, [pc, #164]	; (405f48 <udp_input+0x194>)
  405ea2:	681b      	ldr	r3, [r3, #0]
  405ea4:	429a      	cmp	r2, r3
  405ea6:	d003      	beq.n	405eb0 <udp_input+0xfc>
    pbuf_free(p);
  405ea8:	4620      	mov	r0, r4
  405eaa:	4b26      	ldr	r3, [pc, #152]	; (405f44 <udp_input+0x190>)
  405eac:	4798      	blx	r3
}
  405eae:	e799      	b.n	405de4 <udp_input+0x30>
  405eb0:	2600      	movs	r6, #0
  405eb2:	e7d6      	b.n	405e62 <udp_input+0xae>
          pbuf_free(p);
  405eb4:	4620      	mov	r0, r4
  405eb6:	4b23      	ldr	r3, [pc, #140]	; (405f44 <udp_input+0x190>)
  405eb8:	4798      	blx	r3
          goto end;
  405eba:	e793      	b.n	405de4 <udp_input+0x30>
      pbuf_free(p);
  405ebc:	4620      	mov	r0, r4
  405ebe:	4b21      	ldr	r3, [pc, #132]	; (405f44 <udp_input+0x190>)
  405ec0:	4798      	blx	r3
      goto end;
  405ec2:	e78f      	b.n	405de4 <udp_input+0x30>
        pbuf_free(p);
  405ec4:	4620      	mov	r0, r4
  405ec6:	4b1f      	ldr	r3, [pc, #124]	; (405f44 <udp_input+0x190>)
  405ec8:	4798      	blx	r3
        goto end;
  405eca:	e78b      	b.n	405de4 <udp_input+0x30>
      if (!broadcast &&
  405ecc:	b997      	cbnz	r7, 405ef4 <udp_input+0x140>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
  405ece:	4b1e      	ldr	r3, [pc, #120]	; (405f48 <udp_input+0x194>)
  405ed0:	681b      	ldr	r3, [r3, #0]
  405ed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!broadcast &&
  405ed6:	2be0      	cmp	r3, #224	; 0xe0
  405ed8:	d00c      	beq.n	405ef4 <udp_input+0x140>
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
  405eda:	f898 1000 	ldrb.w	r1, [r8]
  405ede:	f001 010f 	and.w	r1, r1, #15
  405ee2:	3102      	adds	r1, #2
  405ee4:	0089      	lsls	r1, r1, #2
  405ee6:	4620      	mov	r0, r4
  405ee8:	4b15      	ldr	r3, [pc, #84]	; (405f40 <udp_input+0x18c>)
  405eea:	4798      	blx	r3
        icmp_dest_unreach(p, ICMP_DUR_PORT);
  405eec:	2103      	movs	r1, #3
  405eee:	4620      	mov	r0, r4
  405ef0:	4b1a      	ldr	r3, [pc, #104]	; (405f5c <udp_input+0x1a8>)
  405ef2:	4798      	blx	r3
      pbuf_free(p);
  405ef4:	4620      	mov	r0, r4
  405ef6:	4b13      	ldr	r3, [pc, #76]	; (405f44 <udp_input+0x190>)
  405ef8:	4798      	blx	r3
  405efa:	e773      	b.n	405de4 <udp_input+0x30>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
  405efc:	6819      	ldr	r1, [r3, #0]
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
  405efe:	458c      	cmp	ip, r1
  405f00:	d007      	beq.n	405f12 <udp_input+0x15e>
             (ip_addr_isany(&pcb->local_ip) ||
  405f02:	b131      	cbz	r1, 405f12 <udp_input+0x15e>
  405f04:	b12b      	cbz	r3, 405f12 <udp_input+0x15e>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
  405f06:	ea8c 0401 	eor.w	r4, ip, r1
             (ip_addr_isany(&pcb->local_ip) ||
  405f0a:	f8d9 1008 	ldr.w	r1, [r9, #8]
  405f0e:	420c      	tst	r4, r1
  405f10:	d104      	bne.n	405f1c <udp_input+0x168>
          if ((uncon_pcb == NULL) && 
  405f12:	2e00      	cmp	r6, #0
  405f14:	d08a      	beq.n	405e2c <udp_input+0x78>
      if ((local_match != 0) &&
  405f16:	8a99      	ldrh	r1, [r3, #20]
  405f18:	42a9      	cmp	r1, r5
  405f1a:	d08e      	beq.n	405e3a <udp_input+0x86>
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  405f1c:	68d9      	ldr	r1, [r3, #12]
  405f1e:	461a      	mov	r2, r3
  405f20:	2900      	cmp	r1, #0
  405f22:	d09c      	beq.n	405e5e <udp_input+0xaa>
  405f24:	460b      	mov	r3, r1
      if (pcb->local_port == dest) {
  405f26:	8a59      	ldrh	r1, [r3, #18]
  405f28:	4281      	cmp	r1, r0
  405f2a:	d1f7      	bne.n	405f1c <udp_input+0x168>
        if (
  405f2c:	2f00      	cmp	r7, #0
  405f2e:	d1e5      	bne.n	405efc <udp_input+0x148>
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
  405f30:	2b00      	cmp	r3, #0
  405f32:	d0ee      	beq.n	405f12 <udp_input+0x15e>
  405f34:	6819      	ldr	r1, [r3, #0]
  405f36:	2900      	cmp	r1, #0
  405f38:	d0eb      	beq.n	405f12 <udp_input+0x15e>
  405f3a:	4561      	cmp	r1, ip
  405f3c:	d1ee      	bne.n	405f1c <udp_input+0x168>
  405f3e:	e7e8      	b.n	405f12 <udp_input+0x15e>
  405f40:	004027d5 	.word	0x004027d5
  405f44:	00402861 	.word	0x00402861
  405f48:	204039a0 	.word	0x204039a0
  405f4c:	00401a99 	.word	0x00401a99
  405f50:	00401387 	.word	0x00401387
  405f54:	204049e8 	.word	0x204049e8
  405f58:	20403998 	.word	0x20403998
  405f5c:	004015b9 	.word	0x004015b9
  405f60:	00401655 	.word	0x00401655

00405f64 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
  405f64:	b510      	push	{r4, lr}
  405f66:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
  405f68:	eb00 0280 	add.w	r2, r0, r0, lsl #2
  405f6c:	4b0c      	ldr	r3, [pc, #48]	; (405fa0 <etharp_free_entry+0x3c>)
  405f6e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  405f72:	b138      	cbz	r0, 405f84 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
  405f74:	4b0b      	ldr	r3, [pc, #44]	; (405fa4 <etharp_free_entry+0x40>)
  405f76:	4798      	blx	r3
    arp_table[i].q = NULL;
  405f78:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  405f7c:	009b      	lsls	r3, r3, #2
  405f7e:	2100      	movs	r1, #0
  405f80:	4a07      	ldr	r2, [pc, #28]	; (405fa0 <etharp_free_entry+0x3c>)
  405f82:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
  405f84:	4906      	ldr	r1, [pc, #24]	; (405fa0 <etharp_free_entry+0x3c>)
  405f86:	00a0      	lsls	r0, r4, #2
  405f88:	1902      	adds	r2, r0, r4
  405f8a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  405f8e:	2300      	movs	r3, #0
  405f90:	7493      	strb	r3, [r2, #18]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
  405f92:	74d3      	strb	r3, [r2, #19]
  arp_table[i].netif = NULL;
  405f94:	6093      	str	r3, [r2, #8]
  ip_addr_set_zero(&arp_table[i].ipaddr);
  405f96:	6053      	str	r3, [r2, #4]
  arp_table[i].ethaddr = ethzero;
  405f98:	4614      	mov	r4, r2
  405f9a:	60e3      	str	r3, [r4, #12]
  405f9c:	8223      	strh	r3, [r4, #16]
  405f9e:	bd10      	pop	{r4, pc}
  405fa0:	2040265c 	.word	0x2040265c
  405fa4:	00402861 	.word	0x00402861

00405fa8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
  405fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405fac:	b083      	sub	sp, #12
  405fae:	4a3a      	ldr	r2, [pc, #232]	; (406098 <etharp_find_entry+0xf0>)
  405fb0:	2300      	movs	r3, #0
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0, age_pending = 0, age_stable = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u8_t age_queue = 0;
  405fb2:	4698      	mov	r8, r3
  s8_t old_queue = ARP_TABLE_SIZE;
  405fb4:	260a      	movs	r6, #10
  u8_t i = 0, age_pending = 0, age_stable = 0;
  405fb6:	469e      	mov	lr, r3
  405fb8:	469b      	mov	fp, r3
  s8_t empty = ARP_TABLE_SIZE;
  405fba:	4634      	mov	r4, r6
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  405fbc:	46b4      	mov	ip, r6
  405fbe:	46b1      	mov	r9, r6
  405fc0:	9101      	str	r1, [sp, #4]
  405fc2:	e014      	b.n	405fee <etharp_find_entry+0x46>
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
  405fc4:	b17f      	cbz	r7, 405fe6 <etharp_find_entry+0x3e>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
  405fc6:	b120      	cbz	r0, 405fd2 <etharp_find_entry+0x2a>
  405fc8:	6801      	ldr	r1, [r0, #0]
  405fca:	468a      	mov	sl, r1
  405fcc:	6869      	ldr	r1, [r5, #4]
  405fce:	458a      	cmp	sl, r1
  405fd0:	d015      	beq.n	405ffe <etharp_find_entry+0x56>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
  405fd2:	2f01      	cmp	r7, #1
  405fd4:	d015      	beq.n	406002 <etharp_find_entry+0x5a>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
  405fd6:	2f01      	cmp	r7, #1
  405fd8:	d905      	bls.n	405fe6 <etharp_find_entry+0x3e>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
  405fda:	7ced      	ldrb	r5, [r5, #19]
  405fdc:	4575      	cmp	r5, lr
  405fde:	d302      	bcc.n	405fe6 <etharp_find_entry+0x3e>
            old_stable = i;
  405fe0:	fa4f fc83 	sxtb.w	ip, r3
            age_stable = arp_table[i].ctime;
  405fe4:	46ae      	mov	lr, r5
  405fe6:	3301      	adds	r3, #1
  405fe8:	3214      	adds	r2, #20
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  405fea:	2b0a      	cmp	r3, #10
  405fec:	d018      	beq.n	406020 <etharp_find_entry+0x78>
  405fee:	4615      	mov	r5, r2
    u8_t state = arp_table[i].state;
  405ff0:	7c97      	ldrb	r7, [r2, #18]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
  405ff2:	2c0a      	cmp	r4, #10
  405ff4:	d1e6      	bne.n	405fc4 <etharp_find_entry+0x1c>
  405ff6:	2f00      	cmp	r7, #0
  405ff8:	d1e4      	bne.n	405fc4 <etharp_find_entry+0x1c>
      empty = i;
  405ffa:	b25c      	sxtb	r4, r3
  405ffc:	e7f3      	b.n	405fe6 <etharp_find_entry+0x3e>
        return i;
  405ffe:	b258      	sxtb	r0, r3
  406000:	e028      	b.n	406054 <etharp_find_entry+0xac>
        if (arp_table[i].q != NULL) {
  406002:	682f      	ldr	r7, [r5, #0]
  406004:	b12f      	cbz	r7, 406012 <etharp_find_entry+0x6a>
          if (arp_table[i].ctime >= age_queue) {
  406006:	7ced      	ldrb	r5, [r5, #19]
  406008:	4545      	cmp	r5, r8
  40600a:	d3ec      	bcc.n	405fe6 <etharp_find_entry+0x3e>
            old_queue = i;
  40600c:	b25e      	sxtb	r6, r3
            age_queue = arp_table[i].ctime;
  40600e:	46a8      	mov	r8, r5
  406010:	e7e9      	b.n	405fe6 <etharp_find_entry+0x3e>
          if (arp_table[i].ctime >= age_pending) {
  406012:	7ced      	ldrb	r5, [r5, #19]
  406014:	455d      	cmp	r5, fp
  406016:	d3e6      	bcc.n	405fe6 <etharp_find_entry+0x3e>
            old_pending = i;
  406018:	fa4f f983 	sxtb.w	r9, r3
            age_pending = arp_table[i].ctime;
  40601c:	46ab      	mov	fp, r5
  40601e:	e7e2      	b.n	405fe6 <etharp_find_entry+0x3e>
  406020:	9901      	ldr	r1, [sp, #4]
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
  406022:	f011 0f02 	tst.w	r1, #2
  406026:	d12e      	bne.n	406086 <etharp_find_entry+0xde>
  406028:	4605      	mov	r5, r0
  40602a:	2c0a      	cmp	r4, #10
  40602c:	d015      	beq.n	40605a <etharp_find_entry+0xb2>
   * 
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
  40602e:	2c09      	cmp	r4, #9
  406030:	dc16      	bgt.n	406060 <etharp_find_entry+0xb8>
    i = empty;
  406032:	b2e4      	uxtb	r4, r4
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
  406034:	b135      	cbz	r5, 406044 <etharp_find_entry+0x9c>
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
  406036:	6829      	ldr	r1, [r5, #0]
  406038:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  40603c:	4a16      	ldr	r2, [pc, #88]	; (406098 <etharp_find_entry+0xf0>)
  40603e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  406042:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
  406044:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  406048:	4b13      	ldr	r3, [pc, #76]	; (406098 <etharp_find_entry+0xf0>)
  40604a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40604e:	2200      	movs	r2, #0
  406050:	74da      	strb	r2, [r3, #19]
  return (err_t)i;
  406052:	b260      	sxtb	r0, r4
}
  406054:	b003      	add	sp, #12
  406056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
  40605a:	f011 0f01 	tst.w	r1, #1
  40605e:	d015      	beq.n	40608c <etharp_find_entry+0xe4>
    if (old_stable < ARP_TABLE_SIZE) {
  406060:	f1bc 0f09 	cmp.w	ip, #9
  406064:	dc05      	bgt.n	406072 <etharp_find_entry+0xca>
      i = old_stable;
  406066:	fa5f f48c 	uxtb.w	r4, ip
    etharp_free_entry(i);
  40606a:	4620      	mov	r0, r4
  40606c:	4b0b      	ldr	r3, [pc, #44]	; (40609c <etharp_find_entry+0xf4>)
  40606e:	4798      	blx	r3
  406070:	e7e0      	b.n	406034 <etharp_find_entry+0x8c>
    } else if (old_pending < ARP_TABLE_SIZE) {
  406072:	f1b9 0f09 	cmp.w	r9, #9
  406076:	dc02      	bgt.n	40607e <etharp_find_entry+0xd6>
      i = old_pending;
  406078:	fa5f f489 	uxtb.w	r4, r9
  40607c:	e7f5      	b.n	40606a <etharp_find_entry+0xc2>
    } else if (old_queue < ARP_TABLE_SIZE) {
  40607e:	2e09      	cmp	r6, #9
  406080:	dc07      	bgt.n	406092 <etharp_find_entry+0xea>
      i = old_queue;
  406082:	b2f4      	uxtb	r4, r6
  406084:	e7f1      	b.n	40606a <etharp_find_entry+0xc2>
    return (s8_t)ERR_MEM;
  406086:	f04f 30ff 	mov.w	r0, #4294967295
  40608a:	e7e3      	b.n	406054 <etharp_find_entry+0xac>
  40608c:	f04f 30ff 	mov.w	r0, #4294967295
  406090:	e7e0      	b.n	406054 <etharp_find_entry+0xac>
      return (s8_t)ERR_MEM;
  406092:	f04f 30ff 	mov.w	r0, #4294967295
  406096:	e7dd      	b.n	406054 <etharp_find_entry+0xac>
  406098:	2040265c 	.word	0x2040265c
  40609c:	00405f65 	.word	0x00405f65

004060a0 <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
  4060a0:	b538      	push	{r3, r4, r5, lr}
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
  4060a2:	684c      	ldr	r4, [r1, #4]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  ETHADDR32_COPY(&ethhdr->dest, dst);
  4060a4:	681d      	ldr	r5, [r3, #0]
  4060a6:	6025      	str	r5, [r4, #0]
  4060a8:	889b      	ldrh	r3, [r3, #4]
  4060aa:	80a3      	strh	r3, [r4, #4]
  ETHADDR16_COPY(&ethhdr->src, src);
  4060ac:	6813      	ldr	r3, [r2, #0]
  4060ae:	f8c4 3006 	str.w	r3, [r4, #6]
  4060b2:	8893      	ldrh	r3, [r2, #4]
  4060b4:	8163      	strh	r3, [r4, #10]
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
  4060b6:	2308      	movs	r3, #8
  4060b8:	7323      	strb	r3, [r4, #12]
  4060ba:	2300      	movs	r3, #0
  4060bc:	7363      	strb	r3, [r4, #13]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
  4060be:	6983      	ldr	r3, [r0, #24]
  4060c0:	4798      	blx	r3
}
  4060c2:	bd38      	pop	{r3, r4, r5, pc}

004060c4 <etharp_tmr>:
{
  4060c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4060c6:	4c0f      	ldr	r4, [pc, #60]	; (406104 <etharp_tmr+0x40>)
  4060c8:	2500      	movs	r5, #0
        etharp_free_entry(i);
  4060ca:	4e0f      	ldr	r6, [pc, #60]	; (406108 <etharp_tmr+0x44>)
        arp_table[i].state = ETHARP_STATE_STABLE;
  4060cc:	2702      	movs	r7, #2
  4060ce:	e006      	b.n	4060de <etharp_tmr+0x1a>
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
  4060d0:	2a03      	cmp	r2, #3
        arp_table[i].state = ETHARP_STATE_STABLE;
  4060d2:	bf08      	it	eq
  4060d4:	748f      	strbeq	r7, [r1, #18]
  4060d6:	3501      	adds	r5, #1
  4060d8:	3414      	adds	r4, #20
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  4060da:	2d0a      	cmp	r5, #10
  4060dc:	d010      	beq.n	406100 <etharp_tmr+0x3c>
    u8_t state = arp_table[i].state;
  4060de:	4628      	mov	r0, r5
  4060e0:	4621      	mov	r1, r4
  4060e2:	7ca2      	ldrb	r2, [r4, #18]
    if (state != ETHARP_STATE_EMPTY
  4060e4:	2a00      	cmp	r2, #0
  4060e6:	d0f6      	beq.n	4060d6 <etharp_tmr+0x12>
      arp_table[i].ctime++;
  4060e8:	7ce3      	ldrb	r3, [r4, #19]
  4060ea:	3301      	adds	r3, #1
  4060ec:	b2db      	uxtb	r3, r3
  4060ee:	74e3      	strb	r3, [r4, #19]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  4060f0:	2bef      	cmp	r3, #239	; 0xef
  4060f2:	d803      	bhi.n	4060fc <etharp_tmr+0x38>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  4060f4:	2b01      	cmp	r3, #1
  4060f6:	d9eb      	bls.n	4060d0 <etharp_tmr+0xc>
  4060f8:	2a01      	cmp	r2, #1
  4060fa:	d1e9      	bne.n	4060d0 <etharp_tmr+0xc>
        etharp_free_entry(i);
  4060fc:	47b0      	blx	r6
  4060fe:	e7ea      	b.n	4060d6 <etharp_tmr+0x12>
}
  406100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406102:	bf00      	nop
  406104:	2040265c 	.word	0x2040265c
  406108:	00405f65 	.word	0x00405f65

0040610c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
  40610c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406110:	4605      	mov	r5, r0
  406112:	4688      	mov	r8, r1
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
  406114:	2200      	movs	r2, #0
  406116:	212a      	movs	r1, #42	; 0x2a
  406118:	2003      	movs	r0, #3
  40611a:	4b22      	ldr	r3, [pc, #136]	; (4061a4 <etharp_request+0x98>)
  40611c:	4798      	blx	r3
  if (p == NULL) {
  40611e:	2800      	cmp	r0, #0
  406120:	d03c      	beq.n	40619c <etharp_request+0x90>
  406122:	4607      	mov	r7, r0
  ethhdr = (struct eth_hdr *)p->payload;
  406124:	6844      	ldr	r4, [r0, #4]
  hdr->opcode = htons(opcode);
  406126:	2001      	movs	r0, #1
  406128:	4b1f      	ldr	r3, [pc, #124]	; (4061a8 <etharp_request+0x9c>)
  40612a:	4798      	blx	r3
  40612c:	82a0      	strh	r0, [r4, #20]
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  40612e:	f8d5 3027 	ldr.w	r3, [r5, #39]	; 0x27
  406132:	f8c4 3016 	str.w	r3, [r4, #22]
  406136:	f8b5 302b 	ldrh.w	r3, [r5, #43]	; 0x2b
  40613a:	8363      	strh	r3, [r4, #26]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
  40613c:	4b1b      	ldr	r3, [pc, #108]	; (4061ac <etharp_request+0xa0>)
  40613e:	6818      	ldr	r0, [r3, #0]
  406140:	6220      	str	r0, [r4, #32]
  406142:	889b      	ldrh	r3, [r3, #4]
  406144:	84a3      	strh	r3, [r4, #36]	; 0x24
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
  406146:	4b1a      	ldr	r3, [pc, #104]	; (4061b0 <etharp_request+0xa4>)
  406148:	6818      	ldr	r0, [r3, #0]
  40614a:	6020      	str	r0, [r4, #0]
  40614c:	889b      	ldrh	r3, [r3, #4]
  40614e:	80a3      	strh	r3, [r4, #4]
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
  406150:	f8d5 3027 	ldr.w	r3, [r5, #39]	; 0x27
  406154:	f8c4 3006 	str.w	r3, [r4, #6]
  406158:	f8b5 302b 	ldrh.w	r3, [r5, #43]	; 0x2b
  40615c:	8163      	strh	r3, [r4, #10]
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  40615e:	686b      	ldr	r3, [r5, #4]
  406160:	61e3      	str	r3, [r4, #28]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
  406162:	f8d8 3000 	ldr.w	r3, [r8]
  406166:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  40616a:	2200      	movs	r2, #0
  40616c:	73a2      	strb	r2, [r4, #14]
  40616e:	2301      	movs	r3, #1
  406170:	73e3      	strb	r3, [r4, #15]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  406172:	2308      	movs	r3, #8
  406174:	7423      	strb	r3, [r4, #16]
  406176:	7462      	strb	r2, [r4, #17]
  hdr->hwlen = ETHARP_HWADDR_LEN;
  406178:	2206      	movs	r2, #6
  40617a:	74a2      	strb	r2, [r4, #18]
  hdr->protolen = sizeof(ip_addr_t);
  40617c:	2204      	movs	r2, #4
  40617e:	74e2      	strb	r2, [r4, #19]
  ethhdr->type = PP_HTONS(ETHTYPE_ARP);
  406180:	7323      	strb	r3, [r4, #12]
  406182:	2306      	movs	r3, #6
  406184:	7363      	strb	r3, [r4, #13]
  result = netif->linkoutput(netif, p);
  406186:	69ab      	ldr	r3, [r5, #24]
  406188:	4639      	mov	r1, r7
  40618a:	4628      	mov	r0, r5
  40618c:	4798      	blx	r3
  40618e:	4604      	mov	r4, r0
  pbuf_free(p);
  406190:	4638      	mov	r0, r7
  406192:	4b08      	ldr	r3, [pc, #32]	; (4061b4 <etharp_request+0xa8>)
  406194:	4798      	blx	r3
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
                    ipaddr, ARP_REQUEST);
}
  406196:	4620      	mov	r0, r4
  406198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
  40619c:	f04f 34ff 	mov.w	r4, #4294967295
  4061a0:	e7f9      	b.n	406196 <etharp_request+0x8a>
  4061a2:	bf00      	nop
  4061a4:	004028b9 	.word	0x004028b9
  4061a8:	0040137d 	.word	0x0040137d
  4061ac:	0040b3e8 	.word	0x0040b3e8
  4061b0:	0040b394 	.word	0x0040b394
  4061b4:	00402861 	.word	0x00402861

004061b8 <etharp_output_to_arp_index>:
{
  4061b8:	b570      	push	{r4, r5, r6, lr}
  4061ba:	4605      	mov	r5, r0
  4061bc:	460e      	mov	r6, r1
  4061be:	4614      	mov	r4, r2
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
  4061c0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4061c4:	4b15      	ldr	r3, [pc, #84]	; (40621c <etharp_output_to_arp_index+0x64>)
  4061c6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4061ca:	7c9b      	ldrb	r3, [r3, #18]
  4061cc:	2b02      	cmp	r3, #2
  4061ce:	d00c      	beq.n	4061ea <etharp_output_to_arp_index+0x32>
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
  4061d0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4061d4:	4b11      	ldr	r3, [pc, #68]	; (40621c <etharp_output_to_arp_index+0x64>)
  4061d6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  4061da:	330c      	adds	r3, #12
  4061dc:	f105 0227 	add.w	r2, r5, #39	; 0x27
  4061e0:	4631      	mov	r1, r6
  4061e2:	4628      	mov	r0, r5
  4061e4:	4c0e      	ldr	r4, [pc, #56]	; (406220 <etharp_output_to_arp_index+0x68>)
  4061e6:	47a0      	blx	r4
}
  4061e8:	bd70      	pop	{r4, r5, r6, pc}
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
  4061ea:	4613      	mov	r3, r2
  4061ec:	4a0b      	ldr	r2, [pc, #44]	; (40621c <etharp_output_to_arp_index+0x64>)
  4061ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
  4061f2:	7cdb      	ldrb	r3, [r3, #19]
  4061f4:	2be3      	cmp	r3, #227	; 0xe3
  4061f6:	d9eb      	bls.n	4061d0 <etharp_output_to_arp_index+0x18>
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
  4061f8:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  4061fc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  406200:	3104      	adds	r1, #4
  406202:	4b08      	ldr	r3, [pc, #32]	; (406224 <etharp_output_to_arp_index+0x6c>)
  406204:	4798      	blx	r3
  406206:	2800      	cmp	r0, #0
  406208:	d1e2      	bne.n	4061d0 <etharp_output_to_arp_index+0x18>
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
  40620a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  40620e:	4a03      	ldr	r2, [pc, #12]	; (40621c <etharp_output_to_arp_index+0x64>)
  406210:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  406214:	2203      	movs	r2, #3
  406216:	749a      	strb	r2, [r3, #18]
  406218:	e7da      	b.n	4061d0 <etharp_output_to_arp_index+0x18>
  40621a:	bf00      	nop
  40621c:	2040265c 	.word	0x2040265c
  406220:	004060a1 	.word	0x004060a1
  406224:	0040610d 	.word	0x0040610d

00406228 <etharp_query>:
{
  406228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40622c:	4607      	mov	r7, r0
  40622e:	460d      	mov	r5, r1
  406230:	4616      	mov	r6, r2
  if (ip_addr_isbroadcast(ipaddr, netif) ||
  406232:	4601      	mov	r1, r0
  406234:	6828      	ldr	r0, [r5, #0]
  406236:	4b4c      	ldr	r3, [pc, #304]	; (406368 <etharp_query+0x140>)
  406238:	4798      	blx	r3
  40623a:	2800      	cmp	r0, #0
  40623c:	d16b      	bne.n	406316 <etharp_query+0xee>
      ip_addr_ismulticast(ipaddr) ||
  40623e:	682b      	ldr	r3, [r5, #0]
      ip_addr_isany(ipaddr)) {
  406240:	2b00      	cmp	r3, #0
  406242:	bf18      	it	ne
  406244:	2d00      	cmpne	r5, #0
  406246:	d06a      	beq.n	40631e <etharp_query+0xf6>
      ip_addr_ismulticast(ipaddr) ||
  406248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip_addr_isany(ipaddr)) {
  40624c:	2be0      	cmp	r3, #224	; 0xe0
  40624e:	d066      	beq.n	40631e <etharp_query+0xf6>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
  406250:	2101      	movs	r1, #1
  406252:	4628      	mov	r0, r5
  406254:	4b45      	ldr	r3, [pc, #276]	; (40636c <etharp_query+0x144>)
  406256:	4798      	blx	r3
  if (i < 0) {
  406258:	1e04      	subs	r4, r0, #0
  40625a:	db64      	blt.n	406326 <etharp_query+0xfe>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
  40625c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  406260:	4a43      	ldr	r2, [pc, #268]	; (406370 <etharp_query+0x148>)
  406262:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  406266:	7c9b      	ldrb	r3, [r3, #18]
  406268:	b993      	cbnz	r3, 406290 <etharp_query+0x68>
    arp_table[i].state = ETHARP_STATE_PENDING;
  40626a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  40626e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  406272:	2201      	movs	r2, #1
  406274:	749a      	strb	r2, [r3, #18]
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
  406276:	fab6 f886 	clz	r8, r6
  40627a:	ea4f 1858 	mov.w	r8, r8, lsr #5
    result = etharp_request(netif, ipaddr);
  40627e:	4629      	mov	r1, r5
  406280:	4638      	mov	r0, r7
  406282:	4b3c      	ldr	r3, [pc, #240]	; (406374 <etharp_query+0x14c>)
  406284:	4798      	blx	r3
    if (q == NULL) {
  406286:	f1b8 0f00 	cmp.w	r8, #0
  40628a:	d00c      	beq.n	4062a6 <etharp_query+0x7e>
  40628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
  406290:	fab6 f886 	clz	r8, r6
  406294:	ea4f 1858 	mov.w	r8, r8, lsr #5
  406298:	2b01      	cmp	r3, #1
  40629a:	d0f0      	beq.n	40627e <etharp_query+0x56>
  40629c:	f1b8 0f00 	cmp.w	r8, #0
  4062a0:	d1ed      	bne.n	40627e <etharp_query+0x56>
  err_t result = ERR_MEM;
  4062a2:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
  4062a6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  4062aa:	4a31      	ldr	r2, [pc, #196]	; (406370 <etharp_query+0x148>)
  4062ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4062b0:	7c9b      	ldrb	r3, [r3, #18]
  4062b2:	2b01      	cmp	r3, #1
  4062b4:	d803      	bhi.n	4062be <etharp_query+0x96>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  4062b6:	2b01      	cmp	r3, #1
  4062b8:	d010      	beq.n	4062dc <etharp_query+0xb4>
}
  4062ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ETHARP_SET_HINT(netif, i);
  4062be:	4b2e      	ldr	r3, [pc, #184]	; (406378 <etharp_query+0x150>)
  4062c0:	701c      	strb	r4, [r3, #0]
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
  4062c2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4062c6:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  4062ca:	330c      	adds	r3, #12
  4062cc:	f107 0227 	add.w	r2, r7, #39	; 0x27
  4062d0:	4631      	mov	r1, r6
  4062d2:	4638      	mov	r0, r7
  4062d4:	4c29      	ldr	r4, [pc, #164]	; (40637c <etharp_query+0x154>)
  4062d6:	47a0      	blx	r4
  4062d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (p) {
  4062dc:	b346      	cbz	r6, 406330 <etharp_query+0x108>
      if(p->type != PBUF_ROM) {
  4062de:	7b33      	ldrb	r3, [r6, #12]
  4062e0:	2b01      	cmp	r3, #1
  4062e2:	d123      	bne.n	40632c <etharp_query+0x104>
  4062e4:	4633      	mov	r3, r6
      p = p->next;
  4062e6:	681b      	ldr	r3, [r3, #0]
    while (p) {
  4062e8:	b34b      	cbz	r3, 40633e <etharp_query+0x116>
      if(p->type != PBUF_ROM) {
  4062ea:	7b1a      	ldrb	r2, [r3, #12]
  4062ec:	2a01      	cmp	r2, #1
  4062ee:	d0fa      	beq.n	4062e6 <etharp_query+0xbe>
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
  4062f0:	2200      	movs	r2, #0
  4062f2:	8919      	ldrh	r1, [r3, #8]
  4062f4:	2003      	movs	r0, #3
  4062f6:	4b22      	ldr	r3, [pc, #136]	; (406380 <etharp_query+0x158>)
  4062f8:	4798      	blx	r3
      if(p != NULL) {
  4062fa:	4605      	mov	r5, r0
  4062fc:	b138      	cbz	r0, 40630e <etharp_query+0xe6>
        if (pbuf_copy(p, q) != ERR_OK) {
  4062fe:	4631      	mov	r1, r6
  406300:	4628      	mov	r0, r5
  406302:	4b20      	ldr	r3, [pc, #128]	; (406384 <etharp_query+0x15c>)
  406304:	4798      	blx	r3
  406306:	b1f0      	cbz	r0, 406346 <etharp_query+0x11e>
          pbuf_free(p);
  406308:	4628      	mov	r0, r5
  40630a:	4b1f      	ldr	r3, [pc, #124]	; (406388 <etharp_query+0x160>)
  40630c:	4798      	blx	r3
      result = ERR_MEM;
  40630e:	f04f 30ff 	mov.w	r0, #4294967295
  406312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_ARG;
  406316:	f06f 000d 	mvn.w	r0, #13
  40631a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40631e:	f06f 000d 	mvn.w	r0, #13
  406322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (err_t)i;
  406326:	4620      	mov	r0, r4
  406328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(p->type != PBUF_ROM) {
  40632c:	4633      	mov	r3, r6
  40632e:	e7df      	b.n	4062f0 <etharp_query+0xc8>
      pbuf_ref(p);
  406330:	4630      	mov	r0, r6
  406332:	4b16      	ldr	r3, [pc, #88]	; (40638c <etharp_query+0x164>)
  406334:	4798      	blx	r3
      result = ERR_MEM;
  406336:	f04f 30ff 	mov.w	r0, #4294967295
  40633a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pbuf_ref(p);
  40633e:	4630      	mov	r0, r6
  406340:	4b12      	ldr	r3, [pc, #72]	; (40638c <etharp_query+0x164>)
  406342:	4798      	blx	r3
      p = q;
  406344:	4635      	mov	r5, r6
      if (arp_table[i].q != NULL) {
  406346:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  40634a:	4a09      	ldr	r2, [pc, #36]	; (406370 <etharp_query+0x148>)
  40634c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  406350:	b108      	cbz	r0, 406356 <etharp_query+0x12e>
        pbuf_free(arp_table[i].q);
  406352:	4b0d      	ldr	r3, [pc, #52]	; (406388 <etharp_query+0x160>)
  406354:	4798      	blx	r3
      arp_table[i].q = p;
  406356:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40635a:	4a05      	ldr	r2, [pc, #20]	; (406370 <etharp_query+0x148>)
  40635c:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
      result = ERR_OK;
  406360:	2000      	movs	r0, #0
  406362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406366:	bf00      	nop
  406368:	00401a99 	.word	0x00401a99
  40636c:	00405fa9 	.word	0x00405fa9
  406370:	2040265c 	.word	0x2040265c
  406374:	0040610d 	.word	0x0040610d
  406378:	20402724 	.word	0x20402724
  40637c:	004060a1 	.word	0x004060a1
  406380:	004028b9 	.word	0x004028b9
  406384:	00402ae9 	.word	0x00402ae9
  406388:	00402861 	.word	0x00402861
  40638c:	00402a77 	.word	0x00402a77

00406390 <etharp_output>:
{
  406390:	b570      	push	{r4, r5, r6, lr}
  406392:	b082      	sub	sp, #8
  406394:	4605      	mov	r5, r0
  406396:	460e      	mov	r6, r1
  406398:	4614      	mov	r4, r2
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
  40639a:	210e      	movs	r1, #14
  40639c:	4630      	mov	r0, r6
  40639e:	4b3d      	ldr	r3, [pc, #244]	; (406494 <etharp_output+0x104>)
  4063a0:	4798      	blx	r3
  4063a2:	2800      	cmp	r0, #0
  4063a4:	d16c      	bne.n	406480 <etharp_output+0xf0>
  if (ip_addr_isbroadcast(ipaddr, netif)) {
  4063a6:	4629      	mov	r1, r5
  4063a8:	6820      	ldr	r0, [r4, #0]
  4063aa:	4b3b      	ldr	r3, [pc, #236]	; (406498 <etharp_output+0x108>)
  4063ac:	4798      	blx	r3
  4063ae:	2800      	cmp	r0, #0
  4063b0:	d15d      	bne.n	40646e <etharp_output+0xde>
  } else if (ip_addr_ismulticast(ipaddr)) {
  4063b2:	6823      	ldr	r3, [r4, #0]
  4063b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  4063b8:	2ae0      	cmp	r2, #224	; 0xe0
  4063ba:	d024      	beq.n	406406 <etharp_output+0x76>
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
  4063bc:	686a      	ldr	r2, [r5, #4]
  4063be:	405a      	eors	r2, r3
  4063c0:	68a9      	ldr	r1, [r5, #8]
  4063c2:	420a      	tst	r2, r1
  4063c4:	d00a      	beq.n	4063dc <etharp_output+0x4c>
        !ip_addr_islinklocal(ipaddr)) {
  4063c6:	b29b      	uxth	r3, r3
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
  4063c8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
  4063cc:	4293      	cmp	r3, r2
  4063ce:	d005      	beq.n	4063dc <etharp_output+0x4c>
        if (!ip_addr_isany(&netif->gw)) {
  4063d0:	f115 040c 	adds.w	r4, r5, #12
  4063d4:	d057      	beq.n	406486 <etharp_output+0xf6>
  4063d6:	68eb      	ldr	r3, [r5, #12]
  4063d8:	2b00      	cmp	r3, #0
  4063da:	d057      	beq.n	40648c <etharp_output+0xfc>
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  4063dc:	4b2f      	ldr	r3, [pc, #188]	; (40649c <etharp_output+0x10c>)
  4063de:	781a      	ldrb	r2, [r3, #0]
  4063e0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  4063e4:	4b2e      	ldr	r3, [pc, #184]	; (4064a0 <etharp_output+0x110>)
  4063e6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  4063ea:	7c9b      	ldrb	r3, [r3, #18]
  4063ec:	2b01      	cmp	r3, #1
  4063ee:	d907      	bls.n	406400 <etharp_output+0x70>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
  4063f0:	460b      	mov	r3, r1
  4063f2:	492b      	ldr	r1, [pc, #172]	; (4064a0 <etharp_output+0x110>)
  4063f4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  4063f8:	6821      	ldr	r1, [r4, #0]
  4063fa:	685b      	ldr	r3, [r3, #4]
  4063fc:	4299      	cmp	r1, r3
  4063fe:	d018      	beq.n	406432 <etharp_output+0xa2>
  406400:	4b27      	ldr	r3, [pc, #156]	; (4064a0 <etharp_output+0x110>)
{
  406402:	2200      	movs	r2, #0
  406404:	e01e      	b.n	406444 <etharp_output+0xb4>
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
  406406:	2301      	movs	r3, #1
  406408:	f88d 3000 	strb.w	r3, [sp]
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
  40640c:	2300      	movs	r3, #0
  40640e:	f88d 3001 	strb.w	r3, [sp, #1]
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
  406412:	235e      	movs	r3, #94	; 0x5e
  406414:	f88d 3002 	strb.w	r3, [sp, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
  406418:	7863      	ldrb	r3, [r4, #1]
  40641a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40641e:	f88d 3003 	strb.w	r3, [sp, #3]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
  406422:	78a3      	ldrb	r3, [r4, #2]
  406424:	f88d 3004 	strb.w	r3, [sp, #4]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
  406428:	78e3      	ldrb	r3, [r4, #3]
  40642a:	f88d 3005 	strb.w	r3, [sp, #5]
    dest = &mcastaddr;
  40642e:	466b      	mov	r3, sp
  406430:	e01e      	b.n	406470 <etharp_output+0xe0>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
  406432:	4631      	mov	r1, r6
  406434:	4628      	mov	r0, r5
  406436:	4b1b      	ldr	r3, [pc, #108]	; (4064a4 <etharp_output+0x114>)
  406438:	4798      	blx	r3
  40643a:	e01f      	b.n	40647c <etharp_output+0xec>
  40643c:	3201      	adds	r2, #1
  40643e:	3314      	adds	r3, #20
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  406440:	2a0a      	cmp	r2, #10
  406442:	d00e      	beq.n	406462 <etharp_output+0xd2>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  406444:	7c99      	ldrb	r1, [r3, #18]
  406446:	2901      	cmp	r1, #1
  406448:	d9f8      	bls.n	40643c <etharp_output+0xac>
  40644a:	6820      	ldr	r0, [r4, #0]
  40644c:	6859      	ldr	r1, [r3, #4]
  40644e:	4288      	cmp	r0, r1
  406450:	d1f4      	bne.n	40643c <etharp_output+0xac>
        ETHARP_SET_HINT(netif, i);
  406452:	b2d2      	uxtb	r2, r2
  406454:	4b11      	ldr	r3, [pc, #68]	; (40649c <etharp_output+0x10c>)
  406456:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
  406458:	4631      	mov	r1, r6
  40645a:	4628      	mov	r0, r5
  40645c:	4b11      	ldr	r3, [pc, #68]	; (4064a4 <etharp_output+0x114>)
  40645e:	4798      	blx	r3
  406460:	e00c      	b.n	40647c <etharp_output+0xec>
    return etharp_query(netif, dst_addr, q);
  406462:	4632      	mov	r2, r6
  406464:	4621      	mov	r1, r4
  406466:	4628      	mov	r0, r5
  406468:	4b0f      	ldr	r3, [pc, #60]	; (4064a8 <etharp_output+0x118>)
  40646a:	4798      	blx	r3
  40646c:	e006      	b.n	40647c <etharp_output+0xec>
    dest = (struct eth_addr *)&ethbroadcast;
  40646e:	4b0f      	ldr	r3, [pc, #60]	; (4064ac <etharp_output+0x11c>)
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
  406470:	f105 0227 	add.w	r2, r5, #39	; 0x27
  406474:	4631      	mov	r1, r6
  406476:	4628      	mov	r0, r5
  406478:	4c0d      	ldr	r4, [pc, #52]	; (4064b0 <etharp_output+0x120>)
  40647a:	47a0      	blx	r4
}
  40647c:	b002      	add	sp, #8
  40647e:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_BUF;
  406480:	f06f 0001 	mvn.w	r0, #1
  406484:	e7fa      	b.n	40647c <etharp_output+0xec>
          return ERR_RTE;
  406486:	f06f 0003 	mvn.w	r0, #3
  40648a:	e7f7      	b.n	40647c <etharp_output+0xec>
  40648c:	f06f 0003 	mvn.w	r0, #3
  406490:	e7f4      	b.n	40647c <etharp_output+0xec>
  406492:	bf00      	nop
  406494:	004027d5 	.word	0x004027d5
  406498:	00401a99 	.word	0x00401a99
  40649c:	20402724 	.word	0x20402724
  4064a0:	2040265c 	.word	0x2040265c
  4064a4:	004061b9 	.word	0x004061b9
  4064a8:	00406229 	.word	0x00406229
  4064ac:	0040b394 	.word	0x0040b394
  4064b0:	004060a1 	.word	0x004060a1

004064b4 <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
  4064b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4064b8:	b083      	sub	sp, #12
  4064ba:	4604      	mov	r4, r0
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
  4064bc:	8946      	ldrh	r6, [r0, #10]
  4064be:	2e0e      	cmp	r6, #14
  4064c0:	d917      	bls.n	4064f2 <ethernet_input+0x3e>
  4064c2:	4688      	mov	r8, r1
    ETHARP_STATS_INC(etharp.drop);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
  4064c4:	6845      	ldr	r5, [r0, #4]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
  4064c6:	89af      	ldrh	r7, [r5, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
  4064c8:	782b      	ldrb	r3, [r5, #0]
  4064ca:	f013 0f01 	tst.w	r3, #1
  4064ce:	d00b      	beq.n	4064e8 <ethernet_input+0x34>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
  4064d0:	2b01      	cmp	r3, #1
  4064d2:	d015      	beq.n	406500 <ethernet_input+0x4c>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
      }
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
  4064d4:	2206      	movs	r2, #6
  4064d6:	4971      	ldr	r1, [pc, #452]	; (40669c <ethernet_input+0x1e8>)
  4064d8:	4628      	mov	r0, r5
  4064da:	4b71      	ldr	r3, [pc, #452]	; (4066a0 <ethernet_input+0x1ec>)
  4064dc:	4798      	blx	r3
  4064de:	b918      	cbnz	r0, 4064e8 <ethernet_input+0x34>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
  4064e0:	7b63      	ldrb	r3, [r4, #13]
  4064e2:	f043 0308 	orr.w	r3, r3, #8
  4064e6:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
  4064e8:	2f08      	cmp	r7, #8
  4064ea:	d014      	beq.n	406516 <ethernet_input+0x62>
  4064ec:	f5b7 6fc1 	cmp.w	r7, #1544	; 0x608
  4064f0:	d022      	beq.n	406538 <ethernet_input+0x84>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
  4064f2:	4620      	mov	r0, r4
  4064f4:	4b6b      	ldr	r3, [pc, #428]	; (4066a4 <ethernet_input+0x1f0>)
  4064f6:	4798      	blx	r3
  return ERR_OK;
}
  4064f8:	2000      	movs	r0, #0
  4064fa:	b003      	add	sp, #12
  4064fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
  406500:	786b      	ldrb	r3, [r5, #1]
  406502:	2b00      	cmp	r3, #0
  406504:	d1f0      	bne.n	4064e8 <ethernet_input+0x34>
  406506:	78ab      	ldrb	r3, [r5, #2]
  406508:	2b5e      	cmp	r3, #94	; 0x5e
  40650a:	d1ed      	bne.n	4064e8 <ethernet_input+0x34>
        p->flags |= PBUF_FLAG_LLMCAST;
  40650c:	7b43      	ldrb	r3, [r0, #13]
  40650e:	f043 0310 	orr.w	r3, r3, #16
  406512:	7343      	strb	r3, [r0, #13]
  406514:	e7e8      	b.n	4064e8 <ethernet_input+0x34>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  406516:	f898 302d 	ldrb.w	r3, [r8, #45]	; 0x2d
  40651a:	f013 0f20 	tst.w	r3, #32
  40651e:	d0e8      	beq.n	4064f2 <ethernet_input+0x3e>
      if(pbuf_header(p, -ip_hdr_offset)) {
  406520:	f06f 010d 	mvn.w	r1, #13
  406524:	4620      	mov	r0, r4
  406526:	4b60      	ldr	r3, [pc, #384]	; (4066a8 <ethernet_input+0x1f4>)
  406528:	4798      	blx	r3
  40652a:	2800      	cmp	r0, #0
  40652c:	d1e1      	bne.n	4064f2 <ethernet_input+0x3e>
        ip_input(p, netif);
  40652e:	4641      	mov	r1, r8
  406530:	4620      	mov	r0, r4
  406532:	4b5e      	ldr	r3, [pc, #376]	; (4066ac <ethernet_input+0x1f8>)
  406534:	4798      	blx	r3
      break;
  406536:	e7df      	b.n	4064f8 <ethernet_input+0x44>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  406538:	f898 302d 	ldrb.w	r3, [r8, #45]	; 0x2d
  40653c:	f013 0f20 	tst.w	r3, #32
  406540:	d0d7      	beq.n	4064f2 <ethernet_input+0x3e>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  406542:	f1b8 0f00 	cmp.w	r8, #0
  406546:	d00c      	beq.n	406562 <ethernet_input+0xae>
  if (p->len < SIZEOF_ETHARP_PACKET) {
  406548:	2e29      	cmp	r6, #41	; 0x29
  40654a:	d912      	bls.n	406572 <ethernet_input+0xbe>
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  40654c:	89eb      	ldrh	r3, [r5, #14]
  40654e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  406552:	d102      	bne.n	40655a <ethernet_input+0xa6>
  406554:	7cab      	ldrb	r3, [r5, #18]
  406556:	2b06      	cmp	r3, #6
  406558:	d00f      	beq.n	40657a <ethernet_input+0xc6>
    pbuf_free(p);
  40655a:	4620      	mov	r0, r4
  40655c:	4b51      	ldr	r3, [pc, #324]	; (4066a4 <ethernet_input+0x1f0>)
  40655e:	4798      	blx	r3
  406560:	e7ca      	b.n	4064f8 <ethernet_input+0x44>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  406562:	4b53      	ldr	r3, [pc, #332]	; (4066b0 <ethernet_input+0x1fc>)
  406564:	f240 22bb 	movw	r2, #699	; 0x2bb
  406568:	4952      	ldr	r1, [pc, #328]	; (4066b4 <ethernet_input+0x200>)
  40656a:	4853      	ldr	r0, [pc, #332]	; (4066b8 <ethernet_input+0x204>)
  40656c:	4c53      	ldr	r4, [pc, #332]	; (4066bc <ethernet_input+0x208>)
  40656e:	47a0      	blx	r4
  406570:	e7fe      	b.n	406570 <ethernet_input+0xbc>
    pbuf_free(p);
  406572:	4620      	mov	r0, r4
  406574:	4b4b      	ldr	r3, [pc, #300]	; (4066a4 <ethernet_input+0x1f0>)
  406576:	4798      	blx	r3
  406578:	e7be      	b.n	4064f8 <ethernet_input+0x44>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
  40657a:	7ceb      	ldrb	r3, [r5, #19]
  40657c:	2b04      	cmp	r3, #4
  40657e:	d1ec      	bne.n	40655a <ethernet_input+0xa6>
      (hdr->protolen != sizeof(ip_addr_t)) ||
  406580:	8a2b      	ldrh	r3, [r5, #16]
  406582:	2b08      	cmp	r3, #8
  406584:	d1e9      	bne.n	40655a <ethernet_input+0xa6>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
  406586:	69e8      	ldr	r0, [r5, #28]
  406588:	9001      	str	r0, [sp, #4]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
  40658a:	f8d5 2026 	ldr.w	r2, [r5, #38]	; 0x26
  if (ip_addr_isany(&netif->ip_addr)) {
  40658e:	f118 0f04 	cmn.w	r8, #4
  406592:	d07c      	beq.n	40668e <ethernet_input+0x1da>
  406594:	f8d8 3004 	ldr.w	r3, [r8, #4]
  406598:	2b00      	cmp	r3, #0
  40659a:	d078      	beq.n	40668e <ethernet_input+0x1da>
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
  40659c:	429a      	cmp	r2, r3
  40659e:	bf0c      	ite	eq
  4065a0:	f04f 0901 	moveq.w	r9, #1
  4065a4:	f04f 0900 	movne.w	r9, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  4065a8:	f105 0616 	add.w	r6, r5, #22
  4065ac:	d06b      	beq.n	406686 <ethernet_input+0x1d2>
  4065ae:	f04f 0a02 	mov.w	sl, #2
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
  4065b2:	f108 0727 	add.w	r7, r8, #39	; 0x27
  if (ip_addr_isany(ipaddr) ||
  4065b6:	2800      	cmp	r0, #0
  4065b8:	d03a      	beq.n	406630 <ethernet_input+0x17c>
      ip_addr_isbroadcast(ipaddr, netif) ||
  4065ba:	4641      	mov	r1, r8
  4065bc:	4b40      	ldr	r3, [pc, #256]	; (4066c0 <ethernet_input+0x20c>)
  4065be:	4798      	blx	r3
  if (ip_addr_isany(ipaddr) ||
  4065c0:	bbb0      	cbnz	r0, 406630 <ethernet_input+0x17c>
      ip_addr_ismulticast(ipaddr)) {
  4065c2:	9b01      	ldr	r3, [sp, #4]
  4065c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip_addr_isbroadcast(ipaddr, netif) ||
  4065c8:	2be0      	cmp	r3, #224	; 0xe0
  4065ca:	d031      	beq.n	406630 <ethernet_input+0x17c>
  i = etharp_find_entry(ipaddr, flags);
  4065cc:	4651      	mov	r1, sl
  4065ce:	a801      	add	r0, sp, #4
  4065d0:	4b3c      	ldr	r3, [pc, #240]	; (4066c4 <ethernet_input+0x210>)
  4065d2:	4798      	blx	r3
  if (i < 0) {
  4065d4:	1e03      	subs	r3, r0, #0
  4065d6:	db2b      	blt.n	406630 <ethernet_input+0x17c>
    arp_table[i].state = ETHARP_STATE_STABLE;
  4065d8:	f8df e0f0 	ldr.w	lr, [pc, #240]	; 4066cc <ethernet_input+0x218>
  4065dc:	009a      	lsls	r2, r3, #2
  4065de:	18d1      	adds	r1, r2, r3
  4065e0:	0089      	lsls	r1, r1, #2
  4065e2:	eb0e 0c01 	add.w	ip, lr, r1
  4065e6:	2002      	movs	r0, #2
  4065e8:	f88c 0012 	strb.w	r0, [ip, #18]
  arp_table[i].netif = netif;
  4065ec:	f8cc 8008 	str.w	r8, [ip, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  4065f0:	460a      	mov	r2, r1
  4065f2:	320c      	adds	r2, #12
  4065f4:	eb0e 0a02 	add.w	sl, lr, r2
  4065f8:	6830      	ldr	r0, [r6, #0]
  4065fa:	f84e 0002 	str.w	r0, [lr, r2]
  4065fe:	88b2      	ldrh	r2, [r6, #4]
  406600:	f8aa 2004 	strh.w	r2, [sl, #4]
  arp_table[i].ctime = 0;
  406604:	2200      	movs	r2, #0
  406606:	f88c 2013 	strb.w	r2, [ip, #19]
  if (arp_table[i].q != NULL) {
  40660a:	f85e a001 	ldr.w	sl, [lr, r1]
  40660e:	f1ba 0f00 	cmp.w	sl, #0
  406612:	d00d      	beq.n	406630 <ethernet_input+0x17c>
    arp_table[i].q = NULL;
  406614:	460b      	mov	r3, r1
  406616:	4611      	mov	r1, r2
  406618:	f84e 1003 	str.w	r1, [lr, r3]
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
  40661c:	4633      	mov	r3, r6
  40661e:	463a      	mov	r2, r7
  406620:	4651      	mov	r1, sl
  406622:	4640      	mov	r0, r8
  406624:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 4066d0 <ethernet_input+0x21c>
  406628:	47d8      	blx	fp
    pbuf_free(p);
  40662a:	4650      	mov	r0, sl
  40662c:	4b1d      	ldr	r3, [pc, #116]	; (4066a4 <ethernet_input+0x1f0>)
  40662e:	4798      	blx	r3
  switch (hdr->opcode) {
  406630:	8aab      	ldrh	r3, [r5, #20]
  406632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  406636:	d122      	bne.n	40667e <ethernet_input+0x1ca>
    if (for_us) {
  406638:	f1b9 0f00 	cmp.w	r9, #0
  40663c:	d01f      	beq.n	40667e <ethernet_input+0x1ca>
      hdr->opcode = htons(ARP_REPLY);
  40663e:	2002      	movs	r0, #2
  406640:	4b21      	ldr	r3, [pc, #132]	; (4066c8 <ethernet_input+0x214>)
  406642:	4798      	blx	r3
  406644:	82a8      	strh	r0, [r5, #20]
      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
  406646:	69eb      	ldr	r3, [r5, #28]
  406648:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
      IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
  40664c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  406650:	61eb      	str	r3, [r5, #28]
      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
  406652:	6833      	ldr	r3, [r6, #0]
  406654:	622b      	str	r3, [r5, #32]
  406656:	88b3      	ldrh	r3, [r6, #4]
  406658:	84ab      	strh	r3, [r5, #36]	; 0x24
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
  40665a:	6833      	ldr	r3, [r6, #0]
  40665c:	602b      	str	r3, [r5, #0]
  40665e:	88b3      	ldrh	r3, [r6, #4]
  406660:	80ab      	strh	r3, [r5, #4]
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
  406662:	683b      	ldr	r3, [r7, #0]
  406664:	6033      	str	r3, [r6, #0]
  406666:	88bb      	ldrh	r3, [r7, #4]
  406668:	80b3      	strh	r3, [r6, #4]
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
  40666a:	683b      	ldr	r3, [r7, #0]
  40666c:	f8c5 3006 	str.w	r3, [r5, #6]
  406670:	88bb      	ldrh	r3, [r7, #4]
  406672:	816b      	strh	r3, [r5, #10]
      netif->linkoutput(netif, p);
  406674:	f8d8 3018 	ldr.w	r3, [r8, #24]
  406678:	4621      	mov	r1, r4
  40667a:	4640      	mov	r0, r8
  40667c:	4798      	blx	r3
  pbuf_free(p);
  40667e:	4620      	mov	r0, r4
  406680:	4b08      	ldr	r3, [pc, #32]	; (4066a4 <ethernet_input+0x1f0>)
  406682:	4798      	blx	r3
  406684:	e738      	b.n	4064f8 <ethernet_input+0x44>
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
  406686:	f04f 0901 	mov.w	r9, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  40668a:	46ca      	mov	sl, r9
  40668c:	e791      	b.n	4065b2 <ethernet_input+0xfe>
  40668e:	f105 0616 	add.w	r6, r5, #22
  406692:	f04f 0900 	mov.w	r9, #0
  406696:	f04f 0a02 	mov.w	sl, #2
  40669a:	e78a      	b.n	4065b2 <ethernet_input+0xfe>
  40669c:	0040b394 	.word	0x0040b394
  4066a0:	004072b1 	.word	0x004072b1
  4066a4:	00402861 	.word	0x00402861
  4066a8:	004027d5 	.word	0x004027d5
  4066ac:	00401795 	.word	0x00401795
  4066b0:	0040b39c 	.word	0x0040b39c
  4066b4:	0040b3d8 	.word	0x0040b3d8
  4066b8:	0040a7c0 	.word	0x0040a7c0
  4066bc:	00407289 	.word	0x00407289
  4066c0:	00401a99 	.word	0x00401a99
  4066c4:	00405fa9 	.word	0x00405fa9
  4066c8:	0040137d 	.word	0x0040137d
  4066cc:	2040265c 	.word	0x2040265c
  4066d0:	004060a1 	.word	0x004060a1

004066d4 <gmac_rx_populate_queue>:
 * (since the lsb are used as status bits by GMAC).
 *
 * \param p_gmac_dev Pointer to driver data structure.
 */
static void gmac_rx_populate_queue(struct gmac_device *p_gmac_dev)
{
  4066d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4066d8:	4607      	mov	r7, r0
  4066da:	f100 0430 	add.w	r4, r0, #48	; 0x30
  4066de:	4606      	mov	r6, r0
	uint32_t ul_index = 0;
	struct pbuf *p = 0;

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  4066e0:	2500      	movs	r5, #0
		if (p_gmac_dev->rx_pbuf[ul_index] == 0) {

			/* Allocate a new pbuf with the maximum size. */
			p = pbuf_alloc(PBUF_RAW, (u16_t) GMAC_FRAME_LENTGH_MAX, PBUF_POOL);
  4066e2:	f04f 0b03 	mov.w	fp, #3
  4066e6:	f44f 6ac0 	mov.w	sl, #1536	; 0x600
  4066ea:	f8df 9044 	ldr.w	r9, [pc, #68]	; 406730 <gmac_rx_populate_queue+0x5c>
  4066ee:	46a0      	mov	r8, r4
		if (p_gmac_dev->rx_pbuf[ul_index] == 0) {
  4066f0:	6823      	ldr	r3, [r4, #0]
  4066f2:	b133      	cbz	r3, 406702 <gmac_rx_populate_queue+0x2e>
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  4066f4:	3501      	adds	r5, #1
  4066f6:	3404      	adds	r4, #4
  4066f8:	3608      	adds	r6, #8
  4066fa:	2d03      	cmp	r5, #3
  4066fc:	d1f7      	bne.n	4066ee <gmac_rx_populate_queue+0x1a>
  4066fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			p = pbuf_alloc(PBUF_RAW, (u16_t) GMAC_FRAME_LENTGH_MAX, PBUF_POOL);
  406702:	465a      	mov	r2, fp
  406704:	4651      	mov	r1, sl
  406706:	4658      	mov	r0, fp
  406708:	47c8      	blx	r9
			if (p == NULL) {
  40670a:	4603      	mov	r3, r0
  40670c:	2800      	cmp	r0, #0
  40670e:	d0f6      	beq.n	4066fe <gmac_rx_populate_queue+0x2a>

			/* Make sure that the payload buffer is properly aligned. */
			LWIP_ASSERT("gmac_rx_populate_queue: unaligned p->payload buffer address",
					(((uint32_t)p->payload & 0xFFFFFFFC) == (uint32_t)p->payload));

			if (ul_index == GMAC_RX_BUFFERS - 1)
  406710:	2d02      	cmp	r5, #2
  406712:	d007      	beq.n	406724 <gmac_rx_populate_queue+0x50>
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload | GMAC_RXD_WRAP;
			else
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload;
  406714:	6842      	ldr	r2, [r0, #4]
  406716:	f847 2035 	str.w	r2, [r7, r5, lsl #3]

			/* Reset status value. */
			p_gmac_dev->rx_desc[ul_index].status.val = 0;
  40671a:	2200      	movs	r2, #0
  40671c:	6072      	str	r2, [r6, #4]

			/* Save pbuf pointer to be sent to lwIP upper layer. */
			p_gmac_dev->rx_pbuf[ul_index] = p;
  40671e:	f8c8 3000 	str.w	r3, [r8]
  406722:	e7e7      	b.n	4066f4 <gmac_rx_populate_queue+0x20>
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload | GMAC_RXD_WRAP;
  406724:	6842      	ldr	r2, [r0, #4]
  406726:	f042 0202 	orr.w	r2, r2, #2
  40672a:	613a      	str	r2, [r7, #16]
  40672c:	e7f5      	b.n	40671a <gmac_rx_populate_queue+0x46>
  40672e:	bf00      	nop
  406730:	004028b9 	.word	0x004028b9

00406734 <gmac_low_level_output>:
 *
 * \return ERR_OK if the packet could be sent.
 * an err_t value if the packet couldn't be sent.
 */
static err_t gmac_low_level_output(struct netif *netif, struct pbuf *p)
{
  406734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct gmac_device *ps_gmac_dev = netif->state;
  406738:	6a07      	ldr	r7, [r0, #32]
	return p_gmac->GMAC_TSR;
  40673a:	4b1c      	ldr	r3, [pc, #112]	; (4067ac <gmac_low_level_output+0x78>)
  40673c:	695b      	ldr	r3, [r3, #20]
		gmac_clear_tx_status(GMAC, GMAC_TX_ERRORS);

		gmac_enable_transmit(GMAC, true);
	}

	buffer = (uint8_t*)ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].addr;
  40673e:	f241 230c 	movw	r3, #4620	; 0x120c
  406742:	58fb      	ldr	r3, [r7, r3]
  406744:	3303      	adds	r3, #3
  406746:	f857 5033 	ldr.w	r5, [r7, r3, lsl #3]

	/* Copy pbuf chain into TX buffer. */
	for (q = p; q != NULL; q = q->next) {
  40674a:	4688      	mov	r8, r1
  40674c:	b151      	cbz	r1, 406764 <gmac_low_level_output+0x30>
  40674e:	460c      	mov	r4, r1
		memcpy(buffer, q->payload, q->len);
  406750:	4e17      	ldr	r6, [pc, #92]	; (4067b0 <gmac_low_level_output+0x7c>)
  406752:	8962      	ldrh	r2, [r4, #10]
  406754:	6861      	ldr	r1, [r4, #4]
  406756:	4628      	mov	r0, r5
  406758:	47b0      	blx	r6
		buffer += q->len;
  40675a:	8963      	ldrh	r3, [r4, #10]
  40675c:	441d      	add	r5, r3
	for (q = p; q != NULL; q = q->next) {
  40675e:	6824      	ldr	r4, [r4, #0]
  406760:	2c00      	cmp	r4, #0
  406762:	d1f6      	bne.n	406752 <gmac_low_level_output+0x1e>
	}

	/* Set len and mark the buffer to be sent by GMAC. */
	ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].status.bm.b_len = p->tot_len;
  406764:	f241 210c 	movw	r1, #4620	; 0x120c
  406768:	587a      	ldr	r2, [r7, r1]
  40676a:	1cd3      	adds	r3, r2, #3
  40676c:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  406770:	8898      	ldrh	r0, [r3, #4]
  406772:	f8b8 4008 	ldrh.w	r4, [r8, #8]
  406776:	f364 000d 	bfi	r0, r4, #0, #14
  40677a:	8098      	strh	r0, [r3, #4]
	ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].status.bm.b_used = 0;
  40677c:	79d8      	ldrb	r0, [r3, #7]
  40677e:	f36f 10c7 	bfc	r0, #7, #1
  406782:	71d8      	strb	r0, [r3, #7]

	LWIP_DEBUGF(NETIF_DEBUG,
			("gmac_low_level_output: DMA buffer sent, size=%d [idx=%u]\n",
			p->tot_len, ps_gmac_dev->us_tx_idx));

	ps_gmac_dev->us_tx_idx = (ps_gmac_dev->us_tx_idx + 1) % GMAC_TX_BUFFERS;
  406784:	3201      	adds	r2, #1
  406786:	4b0b      	ldr	r3, [pc, #44]	; (4067b4 <gmac_low_level_output+0x80>)
  406788:	fba3 0302 	umull	r0, r3, r3, r2
  40678c:	085b      	lsrs	r3, r3, #1
  40678e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  406792:	1ad3      	subs	r3, r2, r3
  406794:	507b      	str	r3, [r7, r1]
  __ASM volatile ("dsb 0xF":::"memory");
  406796:	f3bf 8f4f 	dsb	sy
	p_gmac->GMAC_NCR |= GMAC_NCR_TSTART;
  40679a:	4a04      	ldr	r2, [pc, #16]	; (4067ac <gmac_low_level_output+0x78>)
  40679c:	6813      	ldr	r3, [r2, #0]
  40679e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  4067a2:	6013      	str	r3, [r2, #0]
	lwip_tx_count += p->tot_len;
#endif
	LINK_STATS_INC(link.xmit);

	return ERR_OK;
}
  4067a4:	2000      	movs	r0, #0
  4067a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4067aa:	bf00      	nop
  4067ac:	40050000 	.word	0x40050000
  4067b0:	00407311 	.word	0x00407311
  4067b4:	aaaaaaab 	.word	0xaaaaaaab

004067b8 <GMAC_Handler>:
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4067b8:	2280      	movs	r2, #128	; 0x80
  4067ba:	4b04      	ldr	r3, [pc, #16]	; (4067cc <GMAC_Handler+0x14>)
  4067bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4067c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4067c4:	f3bf 8f6f 	isb	sy
  4067c8:	4770      	bx	lr
  4067ca:	bf00      	nop
  4067cc:	e000e100 	.word	0xe000e100

004067d0 <ethernetif_input>:
 * input function is called.
 *
 * \param netif the lwIP network interface structure for this ethernetif.
 */
void ethernetif_input(struct netif *netif)
{
  4067d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct gmac_device *ps_gmac_dev = netif->state;
  4067d4:	6a04      	ldr	r4, [r0, #32]
	gmac_rx_descriptor_t *p_rx = &ps_gmac_dev->rx_desc[ps_gmac_dev->us_rx_idx];
  4067d6:	f241 2308 	movw	r3, #4616	; 0x1208
  4067da:	f854 8003 	ldr.w	r8, [r4, r3]
	return p_gmac->GMAC_RSR;
  4067de:	4b24      	ldr	r3, [pc, #144]	; (406870 <ethernetif_input+0xa0>)
  4067e0:	6a1b      	ldr	r3, [r3, #32]
  4067e2:	eb04 02c8 	add.w	r2, r4, r8, lsl #3
	if ((p_rx->addr.val & GMAC_RXD_OWNERSHIP) == GMAC_RXD_OWNERSHIP) {
  4067e6:	f854 3038 	ldr.w	r3, [r4, r8, lsl #3]
  4067ea:	f013 0f01 	tst.w	r3, #1
  4067ee:	d032      	beq.n	406856 <ethernetif_input+0x86>
  4067f0:	4606      	mov	r6, r0
		p = ps_gmac_dev->rx_pbuf[ps_gmac_dev->us_rx_idx];
  4067f2:	f108 030c 	add.w	r3, r8, #12
  4067f6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
		length = p_rx->status.val & GMAC_RXD_LEN_MASK;
  4067fa:	6853      	ldr	r3, [r2, #4]
		p->len = length;
  4067fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
  406800:	816b      	strh	r3, [r5, #10]
		ps_gmac_dev->rx_pbuf[ps_gmac_dev->us_rx_idx] = 0;
  406802:	f241 2708 	movw	r7, #4616	; 0x1208
  406806:	59e2      	ldr	r2, [r4, r7]
  406808:	320c      	adds	r2, #12
  40680a:	2100      	movs	r1, #0
  40680c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
		p->tot_len = length;
  406810:	812b      	strh	r3, [r5, #8]
		gmac_rx_populate_queue(ps_gmac_dev);
  406812:	4620      	mov	r0, r4
  406814:	4b17      	ldr	r3, [pc, #92]	; (406874 <ethernetif_input+0xa4>)
  406816:	4798      	blx	r3
		p_rx->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  406818:	f854 3038 	ldr.w	r3, [r4, r8, lsl #3]
  40681c:	f023 0301 	bic.w	r3, r3, #1
  406820:	f844 3038 	str.w	r3, [r4, r8, lsl #3]
		ps_gmac_dev->us_rx_idx = (ps_gmac_dev->us_rx_idx + 1) % GMAC_RX_BUFFERS;
  406824:	59e2      	ldr	r2, [r4, r7]
  406826:	3201      	adds	r2, #1
  406828:	4b13      	ldr	r3, [pc, #76]	; (406878 <ethernetif_input+0xa8>)
  40682a:	fba3 1302 	umull	r1, r3, r3, r2
  40682e:	085b      	lsrs	r3, r3, #1
  406830:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  406834:	1ad3      	subs	r3, r2, r3
  406836:	51e3      	str	r3, [r4, r7]
	struct eth_hdr *ethhdr;
	struct pbuf *p;

	/* Move received packet into a new pbuf. */
	p = gmac_low_level_input(netif);
	if (p == NULL)
  406838:	b16d      	cbz	r5, 406856 <ethernetif_input+0x86>
		return;

	/* Points to packet payload, which starts with an Ethernet header. */
	ethhdr = p->payload;

	switch (htons(ethhdr->type)) {
  40683a:	686b      	ldr	r3, [r5, #4]
  40683c:	8998      	ldrh	r0, [r3, #12]
  40683e:	4b0f      	ldr	r3, [pc, #60]	; (40687c <ethernetif_input+0xac>)
  406840:	4798      	blx	r3
  406842:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
  406846:	d008      	beq.n	40685a <ethernetif_input+0x8a>
  406848:	f640 0306 	movw	r3, #2054	; 0x806
  40684c:	4298      	cmp	r0, r3
  40684e:	d004      	beq.n	40685a <ethernetif_input+0x8a>
			}
			break;

		default:
			/* Free buffer. */
			pbuf_free(p);
  406850:	4628      	mov	r0, r5
  406852:	4b0b      	ldr	r3, [pc, #44]	; (406880 <ethernetif_input+0xb0>)
  406854:	4798      	blx	r3
  406856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (netif->input(p, netif) != ERR_OK) {
  40685a:	6933      	ldr	r3, [r6, #16]
  40685c:	4631      	mov	r1, r6
  40685e:	4628      	mov	r0, r5
  406860:	4798      	blx	r3
  406862:	2800      	cmp	r0, #0
  406864:	d0f7      	beq.n	406856 <ethernetif_input+0x86>
				pbuf_free(p);
  406866:	4628      	mov	r0, r5
  406868:	4b05      	ldr	r3, [pc, #20]	; (406880 <ethernetif_input+0xb0>)
  40686a:	4798      	blx	r3
  40686c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406870:	40050000 	.word	0x40050000
  406874:	004066d5 	.word	0x004066d5
  406878:	aaaaaaab 	.word	0xaaaaaaab
  40687c:	0040137d 	.word	0x0040137d
  406880:	00402861 	.word	0x00402861

00406884 <ethernetif_init>:
 * \return ERR_OK if the loopif is initialized.
 * ERR_MEM if private data couldn't be allocated.
 * any other err_t on error.
 */
err_t ethernetif_init(struct netif *netif)
{
  406884:	b5f0      	push	{r4, r5, r6, r7, lr}
  406886:	b083      	sub	sp, #12
  406888:	4606      	mov	r6, r0
	LWIP_ASSERT("netif != NULL", (netif != NULL));

	gs_gmac_dev.netif = netif;
  40688a:	4b7a      	ldr	r3, [pc, #488]	; (406a74 <ethernetif_init+0x1f0>)
  40688c:	f241 2210 	movw	r2, #4624	; 0x1210
  406890:	5098      	str	r0, [r3, r2]
	 */
#if LWIP_SNMP
	NETIF_INIT_SNMP(netif, snmp_ifType_ethernet_csmacd, NET_LINK_SPEED);
#endif /* LWIP_SNMP */

	netif->state = &gs_gmac_dev;
  406892:	6203      	str	r3, [r0, #32]
	netif->name[0] = IFNAME0;
  406894:	2365      	movs	r3, #101	; 0x65
  406896:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
	netif->name[1] = IFNAME1;
  40689a:	236e      	movs	r3, #110	; 0x6e
  40689c:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f

	/* We directly use etharp_output() here to save a function call.
	 * You can instead declare your own function an call etharp_output()
	 * from it if you have to do some checks before sending (e.g. if link
	 * is available...) */
	netif->output = etharp_output;
  4068a0:	4b75      	ldr	r3, [pc, #468]	; (406a78 <ethernetif_init+0x1f4>)
  4068a2:	6143      	str	r3, [r0, #20]
	netif->linkoutput = gmac_low_level_output;
  4068a4:	4b75      	ldr	r3, [pc, #468]	; (406a7c <ethernetif_init+0x1f8>)
  4068a6:	6183      	str	r3, [r0, #24]
	netif->hwaddr_len = sizeof(gs_uc_mac_address);
  4068a8:	2306      	movs	r3, #6
  4068aa:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
	netif->hwaddr[0] = gs_uc_mac_address[0];
  4068ae:	2300      	movs	r3, #0
  4068b0:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
	netif->hwaddr[1] = gs_uc_mac_address[1];
  4068b4:	2304      	movs	r3, #4
  4068b6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	netif->hwaddr[2] = gs_uc_mac_address[2];
  4068ba:	2325      	movs	r3, #37	; 0x25
  4068bc:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	netif->hwaddr[3] = gs_uc_mac_address[3];
  4068c0:	231c      	movs	r3, #28
  4068c2:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
	netif->hwaddr[4] = gs_uc_mac_address[4];
  4068c6:	23a0      	movs	r3, #160	; 0xa0
  4068c8:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
	netif->hwaddr[5] = gs_uc_mac_address[5];
  4068cc:	2302      	movs	r3, #2
  4068ce:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
	netif->mtu = NET_MTU;
  4068d2:	f240 53dc 	movw	r3, #1500	; 0x5dc
  4068d6:	8483      	strh	r3, [r0, #36]	; 0x24
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP
  4068d8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
  4068dc:	f043 0322 	orr.w	r3, r3, #34	; 0x22
  4068e0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	ul_delay = sysclk_get_cpu_hz() / 1000 / 3 * 400;
  4068e4:	4b66      	ldr	r3, [pc, #408]	; (406a80 <ethernetif_init+0x1fc>)
  4068e6:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  4068e8:	9b01      	ldr	r3, [sp, #4]
  4068ea:	1e5a      	subs	r2, r3, #1
  4068ec:	9201      	str	r2, [sp, #4]
  4068ee:	2b00      	cmp	r3, #0
  4068f0:	d1fa      	bne.n	4068e8 <ethernetif_init+0x64>
	pmc_enable_periph_clk(ID_GMAC);
  4068f2:	2027      	movs	r0, #39	; 0x27
  4068f4:	4b63      	ldr	r3, [pc, #396]	; (406a84 <ethernetif_init+0x200>)
  4068f6:	4798      	blx	r3
	p_gmac->GMAC_NCR = ul_ncr;
  4068f8:	4c63      	ldr	r4, [pc, #396]	; (406a88 <ethernetif_init+0x204>)
  4068fa:	2700      	movs	r7, #0
  4068fc:	6027      	str	r7, [r4, #0]
	p_gmac->GMAC_IDR = ul_source;
  4068fe:	f04f 32ff 	mov.w	r2, #4294967295
  406902:	62e2      	str	r2, [r4, #44]	; 0x2c
	p_gmac->GMAC_NCR |= GMAC_NCR_CLRSTAT;
  406904:	6823      	ldr	r3, [r4, #0]
  406906:	f043 0320 	orr.w	r3, r3, #32
  40690a:	6023      	str	r3, [r4, #0]
	p_gmac->GMAC_RSR = ul_status;
  40690c:	230f      	movs	r3, #15
  40690e:	6223      	str	r3, [r4, #32]
	p_gmac->GMAC_TSR = ul_status;
  406910:	f240 133f 	movw	r3, #319	; 0x13f
  406914:	6163      	str	r3, [r4, #20]
	return p_gmac->GMAC_ISR;
  406916:	6a63      	ldr	r3, [r4, #36]	; 0x24
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CAF;
  406918:	6863      	ldr	r3, [r4, #4]
  40691a:	f023 0310 	bic.w	r3, r3, #16
  40691e:	6063      	str	r3, [r4, #4]
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_NBC;
  406920:	6863      	ldr	r3, [r4, #4]
  406922:	f023 0320 	bic.w	r3, r3, #32
  406926:	6063      	str	r3, [r4, #4]
	p_gmac->GMAC_DCFGR = (p_gmac->GMAC_DCFGR & ~GMAC_DCFGR_DRBS_Msk)
  406928:	6923      	ldr	r3, [r4, #16]
  40692a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
			| GMAC_DCFGR_DRBS(ul_code);
  40692e:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
	p_gmac->GMAC_DCFGR = (p_gmac->GMAC_DCFGR & ~GMAC_DCFGR_DRBS_Msk)
  406932:	6123      	str	r3, [r4, #16]
 *
 * \return Interrupt status.
 */
static inline uint32_t gmac_get_priority_interrupt_status(Gmac* p_gmac, gmac_quelist_t queue_idx)
{
	return p_gmac->GMAC_ISRPQ[queue_idx - 1];
  406934:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  406938:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
  40693c:	f8d4 3408 	ldr.w	r3, [r4, #1032]	; 0x408
  406940:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
  406944:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
	gs_tx_desc_null.addr = (uint32_t)0xFFFFFFFF;
  406948:	4b50      	ldr	r3, [pc, #320]	; (406a8c <ethernetif_init+0x208>)
  40694a:	601a      	str	r2, [r3, #0]
	gs_tx_desc_null.status.val = GMAC_TXD_WRAP | GMAC_TXD_USED;
  40694c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
  406950:	605a      	str	r2, [r3, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_tx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
    p_gmac->GMAC_TBQBAPQ[queue_idx - 1] = GMAC_TBQB_ADDR_Msk & ul_addr;
  406952:	f023 0303 	bic.w	r3, r3, #3
  406956:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  40695a:	f8c4 3444 	str.w	r3, [r4, #1092]	; 0x444
  40695e:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
  406962:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
  406966:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
	gs_rx_desc_null.addr.val |= GMAC_RXD_WRAP;
  40696a:	4b49      	ldr	r3, [pc, #292]	; (406a90 <ethernetif_init+0x20c>)
  40696c:	f06f 0201 	mvn.w	r2, #1
  406970:	601a      	str	r2, [r3, #0]
	gs_rx_desc_null.status.val = 0;
  406972:	605f      	str	r7, [r3, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_rx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
    p_gmac->GMAC_RBQBAPQ[queue_idx - 1] = GMAC_RBQB_ADDR_Msk & ul_addr;
  406974:	f023 0303 	bic.w	r3, r3, #3
  406978:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
  40697c:	f8c4 3484 	str.w	r3, [r4, #1156]	; 0x484
  406980:	f8c4 3488 	str.w	r3, [r4, #1160]	; 0x488
  406984:	f8c4 348c 	str.w	r3, [r4, #1164]	; 0x48c
  406988:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
	ps_gmac_dev->us_rx_idx = 0;
  40698c:	4d39      	ldr	r5, [pc, #228]	; (406a74 <ethernetif_init+0x1f0>)
  40698e:	f241 2308 	movw	r3, #4616	; 0x1208
  406992:	50ef      	str	r7, [r5, r3]
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
  406994:	632f      	str	r7, [r5, #48]	; 0x30
		ps_gmac_dev->rx_desc[ul_index].addr.val = 0;
  406996:	602f      	str	r7, [r5, #0]
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
  406998:	606f      	str	r7, [r5, #4]
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
  40699a:	636f      	str	r7, [r5, #52]	; 0x34
		ps_gmac_dev->rx_desc[ul_index].addr.val = 0;
  40699c:	60af      	str	r7, [r5, #8]
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
  40699e:	60ef      	str	r7, [r5, #12]
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
  4069a0:	63af      	str	r7, [r5, #56]	; 0x38
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
  4069a2:	616f      	str	r7, [r5, #20]
	ps_gmac_dev->rx_desc[ul_index - 1].addr.val |= GMAC_RXD_WRAP;
  4069a4:	2302      	movs	r3, #2
  4069a6:	612b      	str	r3, [r5, #16]
	gmac_rx_populate_queue(ps_gmac_dev);
  4069a8:	4628      	mov	r0, r5
  4069aa:	4b3a      	ldr	r3, [pc, #232]	; (406a94 <ethernetif_init+0x210>)
  4069ac:	4798      	blx	r3
	p_gmac->GMAC_RBQB = GMAC_RBQB_ADDR_Msk & ul_addr;
  4069ae:	f025 0303 	bic.w	r3, r5, #3
  4069b2:	61a3      	str	r3, [r4, #24]
	ps_gmac_dev->us_tx_idx = 0;
  4069b4:	f241 230c 	movw	r3, #4620	; 0x120c
  4069b8:	50ef      	str	r7, [r5, r3]
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
  4069ba:	f105 033c 	add.w	r3, r5, #60	; 0x3c
  4069be:	61ab      	str	r3, [r5, #24]
		ps_gmac_dev->tx_desc[ul_index].status.val = GMAC_TXD_USED | GMAC_TXD_LAST;
  4069c0:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
  4069c4:	61eb      	str	r3, [r5, #28]
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
  4069c6:	f205 622a 	addw	r2, r5, #1578	; 0x62a
  4069ca:	622a      	str	r2, [r5, #32]
		ps_gmac_dev->tx_desc[ul_index].status.val = GMAC_TXD_USED | GMAC_TXD_LAST;
  4069cc:	626b      	str	r3, [r5, #36]	; 0x24
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
  4069ce:	f605 4318 	addw	r3, r5, #3096	; 0xc18
  4069d2:	62ab      	str	r3, [r5, #40]	; 0x28
	ps_gmac_dev->tx_desc[ul_index - 1].status.val |= GMAC_TXD_WRAP;
  4069d4:	4b30      	ldr	r3, [pc, #192]	; (406a98 <ethernetif_init+0x214>)
  4069d6:	62eb      	str	r3, [r5, #44]	; 0x2c
	gmac_set_tx_queue(GMAC, (uint32_t) &ps_gmac_dev->tx_desc[0]);
  4069d8:	3518      	adds	r5, #24
	p_gmac->GMAC_TBQB = GMAC_TBQB_ADDR_Msk & ul_addr;
  4069da:	f025 0503 	bic.w	r5, r5, #3
  4069de:	61e5      	str	r5, [r4, #28]
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  4069e0:	6823      	ldr	r3, [r4, #0]
  4069e2:	f043 0308 	orr.w	r3, r3, #8
  4069e6:	6023      	str	r3, [r4, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  4069e8:	6823      	ldr	r3, [r4, #0]
  4069ea:	f043 0304 	orr.w	r3, r3, #4
  4069ee:	6023      	str	r3, [r4, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_WESTAT;
  4069f0:	6823      	ldr	r3, [r4, #0]
  4069f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4069f6:	6023      	str	r3, [r4, #0]
	p_gmac->GMAC_IER = ul_source;
  4069f8:	62a7      	str	r7, [r4, #40]	; 0x28
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  4069fa:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
			| (p_mac_addr[2] << 16)
  4069fe:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
  406a02:	041b      	lsls	r3, r3, #16
  406a04:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
			| (p_mac_addr[0]);
  406a08:	f896 2027 	ldrb.w	r2, [r6, #39]	; 0x27
  406a0c:	4313      	orrs	r3, r2
			| (p_mac_addr[1] << 8)
  406a0e:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
			| (p_mac_addr[0]);
  406a12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  406a16:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  406a1a:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
			| (p_mac_addr[4]);
  406a1e:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
  406a22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  406a26:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  406a2a:	4b1c      	ldr	r3, [pc, #112]	; (406a9c <ethernetif_init+0x218>)
  406a2c:	f883 7327 	strb.w	r7, [r3, #807]	; 0x327
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  406a30:	2280      	movs	r2, #128	; 0x80
  406a32:	605a      	str	r2, [r3, #4]
	if (ethernet_phy_init(GMAC, BOARD_GMAC_PHY_ADDR, sysclk_get_cpu_hz()) != GMAC_OK) {
  406a34:	f102 620f 	add.w	r2, r2, #149946368	; 0x8f00000
  406a38:	f502 4251 	add.w	r2, r2, #53504	; 0xd100
  406a3c:	2101      	movs	r1, #1
  406a3e:	4620      	mov	r0, r4
  406a40:	4b17      	ldr	r3, [pc, #92]	; (406aa0 <ethernetif_init+0x21c>)
  406a42:	4798      	blx	r3
  406a44:	b110      	cbz	r0, 406a4c <ethernetif_init+0x1c8>
	if (id == 0)
		return ERR_MEM;
#endif

	return ERR_OK;
}
  406a46:	2000      	movs	r0, #0
  406a48:	b003      	add	sp, #12
  406a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ethernet_phy_auto_negotiate(GMAC, BOARD_GMAC_PHY_ADDR) != GMAC_OK) {
  406a4c:	2101      	movs	r1, #1
  406a4e:	4620      	mov	r0, r4
  406a50:	4b14      	ldr	r3, [pc, #80]	; (406aa4 <ethernetif_init+0x220>)
  406a52:	4798      	blx	r3
  406a54:	2800      	cmp	r0, #0
  406a56:	d1f6      	bne.n	406a46 <ethernetif_init+0x1c2>
	while (ethernet_phy_set_link(GMAC, BOARD_GMAC_PHY_ADDR, 1) != GMAC_OK) {
  406a58:	2201      	movs	r2, #1
  406a5a:	4611      	mov	r1, r2
  406a5c:	4620      	mov	r0, r4
  406a5e:	4b12      	ldr	r3, [pc, #72]	; (406aa8 <ethernetif_init+0x224>)
  406a60:	4798      	blx	r3
  406a62:	2800      	cmp	r0, #0
  406a64:	d1ef      	bne.n	406a46 <ethernetif_init+0x1c2>
	netif->flags |= NETIF_FLAG_LINK_UP;
  406a66:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
  406a6a:	f043 0310 	orr.w	r3, r3, #16
  406a6e:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
  406a72:	e7e8      	b.n	406a46 <ethernetif_init+0x1c2>
  406a74:	20402728 	.word	0x20402728
  406a78:	00406391 	.word	0x00406391
  406a7c:	00406735 	.word	0x00406735
  406a80:	01312d00 	.word	0x01312d00
  406a84:	00400ed1 	.word	0x00400ed1
  406a88:	40050000 	.word	0x40050000
  406a8c:	20403948 	.word	0x20403948
  406a90:	20403940 	.word	0x20403940
  406a94:	004066d5 	.word	0x004066d5
  406a98:	c0008000 	.word	0xc0008000
  406a9c:	e000e100 	.word	0xe000e100
  406aa0:	004009e1 	.word	0x004009e1
  406aa4:	004007e5 	.word	0x004007e5
  406aa8:	004006f1 	.word	0x004006f1

00406aac <status_callback>:
 * is up.
 *
 * \param netif The network interface instance.
 */
void status_callback(struct netif *netif)
{
  406aac:	b500      	push	{lr}
  406aae:	b087      	sub	sp, #28
	int8_t c_mess[20];
	if (netif_is_up(netif)) {
  406ab0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
  406ab4:	f013 0f01 	tst.w	r3, #1
  406ab8:	d105      	bne.n	406ac6 <status_callback+0x1a>
		strcpy((char*)c_mess, "IP=");
		strcat((char*)c_mess, inet_ntoa(*(struct in_addr *)&(netif->ip_addr)));
		printf("Network up %s\r\n", (char const*)c_mess);
	} else {
		printf("Network down\r\n");
  406aba:	480a      	ldr	r0, [pc, #40]	; (406ae4 <status_callback+0x38>)
  406abc:	4b0a      	ldr	r3, [pc, #40]	; (406ae8 <status_callback+0x3c>)
  406abe:	4798      	blx	r3
	}
}
  406ac0:	b007      	add	sp, #28
  406ac2:	f85d fb04 	ldr.w	pc, [sp], #4
		strcpy((char*)c_mess, "IP=");
  406ac6:	4b09      	ldr	r3, [pc, #36]	; (406aec <status_callback+0x40>)
  406ac8:	9301      	str	r3, [sp, #4]
		strcat((char*)c_mess, inet_ntoa(*(struct in_addr *)&(netif->ip_addr)));
  406aca:	3004      	adds	r0, #4
  406acc:	4b08      	ldr	r3, [pc, #32]	; (406af0 <status_callback+0x44>)
  406ace:	4798      	blx	r3
  406ad0:	4601      	mov	r1, r0
  406ad2:	a801      	add	r0, sp, #4
  406ad4:	4b07      	ldr	r3, [pc, #28]	; (406af4 <status_callback+0x48>)
  406ad6:	4798      	blx	r3
		printf("Network up %s\r\n", (char const*)c_mess);
  406ad8:	a901      	add	r1, sp, #4
  406ada:	4807      	ldr	r0, [pc, #28]	; (406af8 <status_callback+0x4c>)
  406adc:	4b02      	ldr	r3, [pc, #8]	; (406ae8 <status_callback+0x3c>)
  406ade:	4798      	blx	r3
  406ae0:	e7ee      	b.n	406ac0 <status_callback+0x14>
  406ae2:	bf00      	nop
  406ae4:	0040b420 	.word	0x0040b420
  406ae8:	00407289 	.word	0x00407289
  406aec:	003d5049 	.word	0x003d5049
  406af0:	00401b95 	.word	0x00401b95
  406af4:	0040772d 	.word	0x0040772d
  406af8:	0040b410 	.word	0x0040b410

00406afc <init_ethernet>:
{
  406afc:	b530      	push	{r4, r5, lr}
  406afe:	b089      	sub	sp, #36	; 0x24
	lwip_init();
  406b00:	4b13      	ldr	r3, [pc, #76]	; (406b50 <init_ethernet+0x54>)
  406b02:	4798      	blx	r3
	IP4_ADDR(&x_ip_addr, ETHERNET_CONF_IPADDR0, ETHERNET_CONF_IPADDR1,
  406b04:	4b13      	ldr	r3, [pc, #76]	; (406b54 <init_ethernet+0x58>)
  406b06:	9305      	str	r3, [sp, #20]
	IP4_ADDR(&x_net_mask, ETHERNET_CONF_NET_MASK0, ETHERNET_CONF_NET_MASK1,
  406b08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
  406b0c:	9306      	str	r3, [sp, #24]
	IP4_ADDR(&x_gateway, ETHERNET_CONF_GATEWAY_ADDR0,
  406b0e:	ab08      	add	r3, sp, #32
  406b10:	4a11      	ldr	r2, [pc, #68]	; (406b58 <init_ethernet+0x5c>)
  406b12:	f843 2d04 	str.w	r2, [r3, #-4]!
	if (NULL == netif_add(&gs_net_if, &x_ip_addr, &x_net_mask, &x_gateway, NULL,
  406b16:	4c11      	ldr	r4, [pc, #68]	; (406b5c <init_ethernet+0x60>)
  406b18:	4a11      	ldr	r2, [pc, #68]	; (406b60 <init_ethernet+0x64>)
  406b1a:	9202      	str	r2, [sp, #8]
  406b1c:	4a11      	ldr	r2, [pc, #68]	; (406b64 <init_ethernet+0x68>)
  406b1e:	9201      	str	r2, [sp, #4]
  406b20:	2200      	movs	r2, #0
  406b22:	9200      	str	r2, [sp, #0]
  406b24:	aa06      	add	r2, sp, #24
  406b26:	a905      	add	r1, sp, #20
  406b28:	4620      	mov	r0, r4
  406b2a:	4d0f      	ldr	r5, [pc, #60]	; (406b68 <init_ethernet+0x6c>)
  406b2c:	47a8      	blx	r5
	netif_set_default(&gs_net_if);
  406b2e:	4620      	mov	r0, r4
  406b30:	4b0e      	ldr	r3, [pc, #56]	; (406b6c <init_ethernet+0x70>)
  406b32:	4798      	blx	r3
	netif_set_status_callback(&gs_net_if, status_callback);
  406b34:	490e      	ldr	r1, [pc, #56]	; (406b70 <init_ethernet+0x74>)
  406b36:	4620      	mov	r0, r4
  406b38:	4b0e      	ldr	r3, [pc, #56]	; (406b74 <init_ethernet+0x78>)
  406b3a:	4798      	blx	r3
	netif_set_up(&gs_net_if);
  406b3c:	4620      	mov	r0, r4
  406b3e:	4b0e      	ldr	r3, [pc, #56]	; (406b78 <init_ethernet+0x7c>)
  406b40:	4798      	blx	r3
	printf("Static IP Address Assigned\r\n");
  406b42:	480e      	ldr	r0, [pc, #56]	; (406b7c <init_ethernet+0x80>)
  406b44:	4b0e      	ldr	r3, [pc, #56]	; (406b80 <init_ethernet+0x84>)
  406b46:	4798      	blx	r3
	sys_init_timing();
  406b48:	4b0e      	ldr	r3, [pc, #56]	; (406b84 <init_ethernet+0x88>)
  406b4a:	4798      	blx	r3
}
  406b4c:	b009      	add	sp, #36	; 0x24
  406b4e:	bd30      	pop	{r4, r5, pc}
  406b50:	004021a1 	.word	0x004021a1
  406b54:	6401a8c0 	.word	0x6401a8c0
  406b58:	fa01a8c0 	.word	0xfa01a8c0
  406b5c:	204049ec 	.word	0x204049ec
  406b60:	004064b5 	.word	0x004064b5
  406b64:	00406885 	.word	0x00406885
  406b68:	00402735 	.word	0x00402735
  406b6c:	00402785 	.word	0x00402785
  406b70:	00406aad 	.word	0x00406aad
  406b74:	004027cd 	.word	0x004027cd
  406b78:	00402791 	.word	0x00402791
  406b7c:	0040b3f0 	.word	0x0040b3f0
  406b80:	00407289 	.word	0x00407289
  406b84:	00406f01 	.word	0x00406f01

00406b88 <ethernet_task>:

/**
 * \brief Process incoming ethernet frames, then update timers.
 */
void ethernet_task(void)
{
  406b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Poll the network interface driver for incoming ethernet frames. */
	ethernetif_input(&gs_net_if);
  406b8a:	4814      	ldr	r0, [pc, #80]	; (406bdc <ethernet_task+0x54>)
  406b8c:	4b14      	ldr	r3, [pc, #80]	; (406be0 <ethernet_task+0x58>)
  406b8e:	4798      	blx	r3
	ul_cur_time = sys_get_ms();
  406b90:	4b14      	ldr	r3, [pc, #80]	; (406be4 <ethernet_task+0x5c>)
  406b92:	4798      	blx	r3
	if (ul_cur_time >= ul_last_time) {
  406b94:	4b14      	ldr	r3, [pc, #80]	; (406be8 <ethernet_task+0x60>)
  406b96:	681d      	ldr	r5, [r3, #0]
  406b98:	42a8      	cmp	r0, r5
  406b9a:	d307      	bcc.n	406bac <ethernet_task+0x24>
		ul_time_diff = ul_cur_time - ul_last_time;
  406b9c:	1b45      	subs	r5, r0, r5
	if (ul_time_diff) {
  406b9e:	b1dd      	cbz	r5, 406bd8 <ethernet_task+0x50>
		ul_last_time = ul_cur_time;
  406ba0:	4b11      	ldr	r3, [pc, #68]	; (406be8 <ethernet_task+0x60>)
  406ba2:	6018      	str	r0, [r3, #0]
  406ba4:	4c11      	ldr	r4, [pc, #68]	; (406bec <ethernet_task+0x64>)
  406ba6:	f104 0724 	add.w	r7, r4, #36	; 0x24
  406baa:	e009      	b.n	406bc0 <ethernet_task+0x38>
		ul_time_diff = 0xFFFFFFFF - ul_last_time + ul_cur_time;
  406bac:	43ed      	mvns	r5, r5
  406bae:	4405      	add	r5, r0
  406bb0:	e7f5      	b.n	406b9e <ethernet_task+0x16>
				p_tmr_inf->timer -= p_tmr_inf->timer_interval;
  406bb2:	6833      	ldr	r3, [r6, #0]
  406bb4:	6872      	ldr	r2, [r6, #4]
  406bb6:	1a9b      	subs	r3, r3, r2
  406bb8:	6033      	str	r3, [r6, #0]
  406bba:	340c      	adds	r4, #12
		for (ul_idx_timer = 0;
  406bbc:	42bc      	cmp	r4, r7
  406bbe:	d00b      	beq.n	406bd8 <ethernet_task+0x50>
  406bc0:	4626      	mov	r6, r4
			p_tmr_inf->timer += ul_time_diff;
  406bc2:	6823      	ldr	r3, [r4, #0]
  406bc4:	442b      	add	r3, r5
  406bc6:	6023      	str	r3, [r4, #0]
			if (p_tmr_inf->timer > p_tmr_inf->timer_interval) {
  406bc8:	6862      	ldr	r2, [r4, #4]
  406bca:	4293      	cmp	r3, r2
  406bcc:	d9f5      	bls.n	406bba <ethernet_task+0x32>
				if (p_tmr_inf->timer_func) {
  406bce:	68a3      	ldr	r3, [r4, #8]
  406bd0:	2b00      	cmp	r3, #0
  406bd2:	d0ee      	beq.n	406bb2 <ethernet_task+0x2a>
					p_tmr_inf->timer_func();
  406bd4:	4798      	blx	r3
  406bd6:	e7ec      	b.n	406bb2 <ethernet_task+0x2a>
  406bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406bda:	bf00      	nop
  406bdc:	204049ec 	.word	0x204049ec
  406be0:	004067d1 	.word	0x004067d1
  406be4:	00406f95 	.word	0x00406f95
  406be8:	20403950 	.word	0x20403950
  406bec:	20400010 	.word	0x20400010

00406bf0 <fs_open>:
 * if the specified filename is found.
 *
 * \return 1 on success, 0 otherwise.
 */
int fs_open(char *name, struct fs_file *file)
{
  406bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406bf2:	4606      	mov	r6, r0
  406bf4:	460f      	mov	r7, r1
	struct fsdata_file_noconst *f;

	for (f = (struct fsdata_file_noconst *)FS_ROOT;
  406bf6:	4c08      	ldr	r4, [pc, #32]	; (406c18 <fs_open+0x28>)
			f != NULL;
			f = (struct fsdata_file_noconst *)f->next) {
		if (!strcmp(name, (char *)f->name)) {
  406bf8:	4d08      	ldr	r5, [pc, #32]	; (406c1c <fs_open+0x2c>)
  406bfa:	6861      	ldr	r1, [r4, #4]
  406bfc:	4630      	mov	r0, r6
  406bfe:	47a8      	blx	r5
  406c00:	b120      	cbz	r0, 406c0c <fs_open+0x1c>
			f = (struct fsdata_file_noconst *)f->next) {
  406c02:	6824      	ldr	r4, [r4, #0]
	for (f = (struct fsdata_file_noconst *)FS_ROOT;
  406c04:	2c00      	cmp	r4, #0
  406c06:	d1f8      	bne.n	406bfa <fs_open+0xa>
			file->data = (char *)f->data;
			file->len = f->len;
			return 1;
		}
	}
	return 0;
  406c08:	2000      	movs	r0, #0
}
  406c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			file->data = (char *)f->data;
  406c0c:	68a3      	ldr	r3, [r4, #8]
  406c0e:	603b      	str	r3, [r7, #0]
			file->len = f->len;
  406c10:	68e3      	ldr	r3, [r4, #12]
  406c12:	607b      	str	r3, [r7, #4]
			return 1;
  406c14:	2001      	movs	r0, #1
  406c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406c18:	0040c080 	.word	0x0040c080
  406c1c:	00407789 	.word	0x00407789

00406c20 <http_accept>:
 * \param err Connection status.
 *
 * \return ERR_OK on success.
 */
static err_t http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
  406c20:	b538      	push	{r3, r4, r5, lr}
  406c22:	460d      	mov	r5, r1
	struct http_state *hs;

	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(err);

	tcp_setprio(pcb, TCP_PRIO_MIN);
  406c24:	2101      	movs	r1, #1
  406c26:	4628      	mov	r0, r5
  406c28:	4b0f      	ldr	r3, [pc, #60]	; (406c68 <http_accept+0x48>)
  406c2a:	4798      	blx	r3

	/* Allocate memory for the structure that holds the state of the
	connection. */
	hs = (struct http_state *)mem_malloc(sizeof(struct http_state));
  406c2c:	200c      	movs	r0, #12
  406c2e:	4b0f      	ldr	r3, [pc, #60]	; (406c6c <http_accept+0x4c>)
  406c30:	4798      	blx	r3

	if (hs == NULL) {
  406c32:	b1b0      	cbz	r0, 406c62 <http_accept+0x42>
  406c34:	4601      	mov	r1, r0
		//printf("http_accept: Out of memory\n");
		return ERR_MEM;
	}

	/* Initialize the structure. */
	hs->file = NULL;
  406c36:	2400      	movs	r4, #0
  406c38:	6004      	str	r4, [r0, #0]
	hs->left = 0;
  406c3a:	6044      	str	r4, [r0, #4]
	hs->retries = 0;
  406c3c:	7204      	strb	r4, [r0, #8]

	/* Tell TCP that this is the structure we wish to be passed for our
	callbacks. */
	tcp_arg(pcb, hs);
  406c3e:	4628      	mov	r0, r5
  406c40:	4b0b      	ldr	r3, [pc, #44]	; (406c70 <http_accept+0x50>)
  406c42:	4798      	blx	r3

	/* Tell TCP that we wish to be informed of incoming data by a call
	to the http_recv() function. */
	tcp_recv(pcb, http_recv);
  406c44:	490b      	ldr	r1, [pc, #44]	; (406c74 <http_accept+0x54>)
  406c46:	4628      	mov	r0, r5
  406c48:	4b0b      	ldr	r3, [pc, #44]	; (406c78 <http_accept+0x58>)
  406c4a:	4798      	blx	r3

	tcp_err(pcb, http_conn_err);
  406c4c:	490b      	ldr	r1, [pc, #44]	; (406c7c <http_accept+0x5c>)
  406c4e:	4628      	mov	r0, r5
  406c50:	4b0b      	ldr	r3, [pc, #44]	; (406c80 <http_accept+0x60>)
  406c52:	4798      	blx	r3

	tcp_poll(pcb, http_poll, 4);
  406c54:	2204      	movs	r2, #4
  406c56:	490b      	ldr	r1, [pc, #44]	; (406c84 <http_accept+0x64>)
  406c58:	4628      	mov	r0, r5
  406c5a:	4b0b      	ldr	r3, [pc, #44]	; (406c88 <http_accept+0x68>)
  406c5c:	4798      	blx	r3
	return ERR_OK;
  406c5e:	4620      	mov	r0, r4
  406c60:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_MEM;
  406c62:	f04f 30ff 	mov.w	r0, #4294967295
}
  406c66:	bd38      	pop	{r3, r4, r5, pc}
  406c68:	00402fcd 	.word	0x00402fcd
  406c6c:	004024f1 	.word	0x004024f1
  406c70:	00403005 	.word	0x00403005
  406c74:	00406d75 	.word	0x00406d75
  406c78:	00403009 	.word	0x00403009
  406c7c:	00406d29 	.word	0x00406d29
  406c80:	00403013 	.word	0x00403013
  406c84:	00406cd9 	.word	0x00406cd9
  406c88:	0040301d 	.word	0x0040301d

00406c8c <http_send_data>:
{
  406c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406c90:	4606      	mov	r6, r0
  406c92:	460d      	mov	r5, r1
	if (tcp_sndbuf(pcb) < hs->left) {
  406c94:	f8b0 4066 	ldrh.w	r4, [r0, #102]	; 0x66
  406c98:	684b      	ldr	r3, [r1, #4]
  406c9a:	429c      	cmp	r4, r3
  406c9c:	bf28      	it	cs
  406c9e:	461c      	movcs	r4, r3
		err = tcp_write(pcb, hs->file, len, TCP_WRITE_FLAG_COPY);
  406ca0:	f04f 0801 	mov.w	r8, #1
  406ca4:	4f0b      	ldr	r7, [pc, #44]	; (406cd4 <http_send_data+0x48>)
  406ca6:	e002      	b.n	406cae <http_send_data+0x22>
			len /= 2;
  406ca8:	0864      	lsrs	r4, r4, #1
	} while (err == ERR_MEM && len > 1);
  406caa:	2c01      	cmp	r4, #1
  406cac:	d910      	bls.n	406cd0 <http_send_data+0x44>
		err = tcp_write(pcb, hs->file, len, TCP_WRITE_FLAG_COPY);
  406cae:	4643      	mov	r3, r8
  406cb0:	b2a2      	uxth	r2, r4
  406cb2:	6829      	ldr	r1, [r5, #0]
  406cb4:	4630      	mov	r0, r6
  406cb6:	47b8      	blx	r7
		if (err == ERR_MEM) {
  406cb8:	f1b0 3fff 	cmp.w	r0, #4294967295
  406cbc:	d0f4      	beq.n	406ca8 <http_send_data+0x1c>
	if (err == ERR_OK) {
  406cbe:	b928      	cbnz	r0, 406ccc <http_send_data+0x40>
		hs->file += len;
  406cc0:	682b      	ldr	r3, [r5, #0]
  406cc2:	4423      	add	r3, r4
  406cc4:	602b      	str	r3, [r5, #0]
		hs->left -= len;
  406cc6:	686b      	ldr	r3, [r5, #4]
  406cc8:	1b1c      	subs	r4, r3, r4
  406cca:	606c      	str	r4, [r5, #4]
  406ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406cd4:	004052c9 	.word	0x004052c9

00406cd8 <http_poll>:
{
  406cd8:	b508      	push	{r3, lr}
  406cda:	460a      	mov	r2, r1
	if (hs == NULL) {
  406cdc:	b168      	cbz	r0, 406cfa <http_poll+0x22>
  406cde:	4601      	mov	r1, r0
		if (hs->file == 0) {
  406ce0:	6803      	ldr	r3, [r0, #0]
  406ce2:	b183      	cbz	r3, 406d06 <http_poll+0x2e>
		++hs->retries;
  406ce4:	7a03      	ldrb	r3, [r0, #8]
  406ce6:	3301      	adds	r3, #1
  406ce8:	b2db      	uxtb	r3, r3
  406cea:	7203      	strb	r3, [r0, #8]
		if (hs->retries == 4) {
  406cec:	2b04      	cmp	r3, #4
  406cee:	d010      	beq.n	406d12 <http_poll+0x3a>
		http_send_data(pcb, hs);
  406cf0:	4610      	mov	r0, r2
  406cf2:	4b0b      	ldr	r3, [pc, #44]	; (406d20 <http_poll+0x48>)
  406cf4:	4798      	blx	r3
	return ERR_OK;
  406cf6:	2000      	movs	r0, #0
}
  406cf8:	bd08      	pop	{r3, pc}
		tcp_abort(pcb);
  406cfa:	4608      	mov	r0, r1
  406cfc:	4b09      	ldr	r3, [pc, #36]	; (406d24 <http_poll+0x4c>)
  406cfe:	4798      	blx	r3
		return ERR_ABRT;
  406d00:	f06f 0009 	mvn.w	r0, #9
  406d04:	bd08      	pop	{r3, pc}
			tcp_abort(pcb);
  406d06:	4610      	mov	r0, r2
  406d08:	4b06      	ldr	r3, [pc, #24]	; (406d24 <http_poll+0x4c>)
  406d0a:	4798      	blx	r3
			return ERR_ABRT;
  406d0c:	f06f 0009 	mvn.w	r0, #9
  406d10:	bd08      	pop	{r3, pc}
			tcp_abort(pcb);
  406d12:	4610      	mov	r0, r2
  406d14:	4b03      	ldr	r3, [pc, #12]	; (406d24 <http_poll+0x4c>)
  406d16:	4798      	blx	r3
			return ERR_ABRT;
  406d18:	f06f 0009 	mvn.w	r0, #9
  406d1c:	bd08      	pop	{r3, pc}
  406d1e:	bf00      	nop
  406d20:	00406c8d 	.word	0x00406c8d
  406d24:	00403759 	.word	0x00403759

00406d28 <http_conn_err>:
{
  406d28:	b508      	push	{r3, lr}
	mem_free(hs);
  406d2a:	4b01      	ldr	r3, [pc, #4]	; (406d30 <http_conn_err+0x8>)
  406d2c:	4798      	blx	r3
  406d2e:	bd08      	pop	{r3, pc}
  406d30:	00402389 	.word	0x00402389

00406d34 <http_close_conn>:
{
  406d34:	b538      	push	{r3, r4, r5, lr}
  406d36:	4604      	mov	r4, r0
  406d38:	460d      	mov	r5, r1
	tcp_arg(pcb, NULL);
  406d3a:	2100      	movs	r1, #0
  406d3c:	4b08      	ldr	r3, [pc, #32]	; (406d60 <http_close_conn+0x2c>)
  406d3e:	4798      	blx	r3
	tcp_sent(pcb, NULL);
  406d40:	2100      	movs	r1, #0
  406d42:	4620      	mov	r0, r4
  406d44:	4b07      	ldr	r3, [pc, #28]	; (406d64 <http_close_conn+0x30>)
  406d46:	4798      	blx	r3
	tcp_recv(pcb, NULL);
  406d48:	2100      	movs	r1, #0
  406d4a:	4620      	mov	r0, r4
  406d4c:	4b06      	ldr	r3, [pc, #24]	; (406d68 <http_close_conn+0x34>)
  406d4e:	4798      	blx	r3
	mem_free(hs);
  406d50:	4628      	mov	r0, r5
  406d52:	4b06      	ldr	r3, [pc, #24]	; (406d6c <http_close_conn+0x38>)
  406d54:	4798      	blx	r3
	tcp_close(pcb);
  406d56:	4620      	mov	r0, r4
  406d58:	4b05      	ldr	r3, [pc, #20]	; (406d70 <http_close_conn+0x3c>)
  406d5a:	4798      	blx	r3
  406d5c:	bd38      	pop	{r3, r4, r5, pc}
  406d5e:	bf00      	nop
  406d60:	00403005 	.word	0x00403005
  406d64:	0040300f 	.word	0x0040300f
  406d68:	00403009 	.word	0x00403009
  406d6c:	00402389 	.word	0x00402389
  406d70:	0040392d 	.word	0x0040392d

00406d74 <http_recv>:
{
  406d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406d78:	b083      	sub	sp, #12
  406d7a:	4606      	mov	r6, r0
  406d7c:	460f      	mov	r7, r1
	if (err == ERR_OK && p != NULL) {
  406d7e:	fab3 f483 	clz	r4, r3
  406d82:	0964      	lsrs	r4, r4, #5
  406d84:	4615      	mov	r5, r2
  406d86:	b102      	cbz	r2, 406d8a <http_recv+0x16>
  406d88:	b94c      	cbnz	r4, 406d9e <http_recv+0x2a>
	if (err == ERR_OK && p == NULL) {
  406d8a:	b925      	cbnz	r5, 406d96 <http_recv+0x22>
  406d8c:	b11c      	cbz	r4, 406d96 <http_recv+0x22>
		http_close_conn(pcb, hs);
  406d8e:	4631      	mov	r1, r6
  406d90:	4638      	mov	r0, r7
  406d92:	4b30      	ldr	r3, [pc, #192]	; (406e54 <http_recv+0xe0>)
  406d94:	4798      	blx	r3
}
  406d96:	2000      	movs	r0, #0
  406d98:	b003      	add	sp, #12
  406d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		tcp_recved(pcb, p->tot_len);
  406d9e:	8911      	ldrh	r1, [r2, #8]
  406da0:	4638      	mov	r0, r7
  406da2:	4b2d      	ldr	r3, [pc, #180]	; (406e58 <http_recv+0xe4>)
  406da4:	4798      	blx	r3
		if (hs->file == NULL) {
  406da6:	6833      	ldr	r3, [r6, #0]
  406da8:	b11b      	cbz	r3, 406db2 <http_recv+0x3e>
			pbuf_free(p);
  406daa:	4628      	mov	r0, r5
  406dac:	4b2b      	ldr	r3, [pc, #172]	; (406e5c <http_recv+0xe8>)
  406dae:	4798      	blx	r3
  406db0:	e7eb      	b.n	406d8a <http_recv+0x16>
			data = p->payload;
  406db2:	f8d5 8004 	ldr.w	r8, [r5, #4]
			if (strncmp(data, "GET ", 4) == 0) {
  406db6:	2204      	movs	r2, #4
  406db8:	4929      	ldr	r1, [pc, #164]	; (406e60 <http_recv+0xec>)
  406dba:	4640      	mov	r0, r8
  406dbc:	4b29      	ldr	r3, [pc, #164]	; (406e64 <http_recv+0xf0>)
  406dbe:	4798      	blx	r3
  406dc0:	2800      	cmp	r0, #0
  406dc2:	d13f      	bne.n	406e44 <http_recv+0xd0>
  406dc4:	f108 0004 	add.w	r0, r8, #4
  406dc8:	4602      	mov	r2, r0
  406dca:	f108 0e2c 	add.w	lr, r8, #44	; 0x2c
							((char *)data + 4)[i] == '\r' ||
  406dce:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 406e80 <http_recv+0x10c>
						((char *)data + 4)[i] = 0;
  406dd2:	f04f 0900 	mov.w	r9, #0
  406dd6:	e009      	b.n	406dec <http_recv+0x78>
							((char *)data + 4)[i] == '\r' ||
  406dd8:	fa2c f303 	lsr.w	r3, ip, r3
  406ddc:	f013 0f01 	tst.w	r3, #1
						((char *)data + 4)[i] = 0;
  406de0:	bf18      	it	ne
  406de2:	f882 9000 	strbne.w	r9, [r2]
  406de6:	3201      	adds	r2, #1
				for (i = 0; i < 40; i++) {
  406de8:	4572      	cmp	r2, lr
  406dea:	d005      	beq.n	406df8 <http_recv+0x84>
							((char *)data + 4)[i] == '\r' ||
  406dec:	7813      	ldrb	r3, [r2, #0]
  406dee:	3b0a      	subs	r3, #10
  406df0:	b2db      	uxtb	r3, r3
  406df2:	2b16      	cmp	r3, #22
  406df4:	d8f7      	bhi.n	406de6 <http_recv+0x72>
  406df6:	e7ef      	b.n	406dd8 <http_recv+0x64>
				if (*(char *)(data + 4) == '/' &&
  406df8:	f898 3004 	ldrb.w	r3, [r8, #4]
  406dfc:	2b2f      	cmp	r3, #47	; 0x2f
  406dfe:	d013      	beq.n	406e28 <http_recv+0xb4>
				else if (!fs_open((char *)data + 4, &file)) {
  406e00:	4669      	mov	r1, sp
  406e02:	4b19      	ldr	r3, [pc, #100]	; (406e68 <http_recv+0xf4>)
  406e04:	4798      	blx	r3
  406e06:	b1c0      	cbz	r0, 406e3a <http_recv+0xc6>
				hs->file = file.data;
  406e08:	9b00      	ldr	r3, [sp, #0]
  406e0a:	6033      	str	r3, [r6, #0]
				hs->left = file.len;
  406e0c:	9b01      	ldr	r3, [sp, #4]
  406e0e:	6073      	str	r3, [r6, #4]
				pbuf_free(p);
  406e10:	4628      	mov	r0, r5
  406e12:	4b12      	ldr	r3, [pc, #72]	; (406e5c <http_recv+0xe8>)
  406e14:	4798      	blx	r3
				http_send_data(pcb, hs);
  406e16:	4631      	mov	r1, r6
  406e18:	4638      	mov	r0, r7
  406e1a:	4b14      	ldr	r3, [pc, #80]	; (406e6c <http_recv+0xf8>)
  406e1c:	4798      	blx	r3
				tcp_sent(pcb, http_sent);
  406e1e:	4914      	ldr	r1, [pc, #80]	; (406e70 <http_recv+0xfc>)
  406e20:	4638      	mov	r0, r7
  406e22:	4b14      	ldr	r3, [pc, #80]	; (406e74 <http_recv+0x100>)
  406e24:	4798      	blx	r3
  406e26:	e7b0      	b.n	406d8a <http_recv+0x16>
				if (*(char *)(data + 4) == '/' &&
  406e28:	f898 3005 	ldrb.w	r3, [r8, #5]
  406e2c:	2b00      	cmp	r3, #0
  406e2e:	d1e7      	bne.n	406e00 <http_recv+0x8c>
					fs_open("/index.html", &file);
  406e30:	4669      	mov	r1, sp
  406e32:	4811      	ldr	r0, [pc, #68]	; (406e78 <http_recv+0x104>)
  406e34:	4b0c      	ldr	r3, [pc, #48]	; (406e68 <http_recv+0xf4>)
  406e36:	4798      	blx	r3
  406e38:	e7e6      	b.n	406e08 <http_recv+0x94>
					fs_open("/404.html", &file);
  406e3a:	4669      	mov	r1, sp
  406e3c:	480f      	ldr	r0, [pc, #60]	; (406e7c <http_recv+0x108>)
  406e3e:	4b0a      	ldr	r3, [pc, #40]	; (406e68 <http_recv+0xf4>)
  406e40:	4798      	blx	r3
  406e42:	e7e1      	b.n	406e08 <http_recv+0x94>
				pbuf_free(p);
  406e44:	4628      	mov	r0, r5
  406e46:	4b05      	ldr	r3, [pc, #20]	; (406e5c <http_recv+0xe8>)
  406e48:	4798      	blx	r3
				http_close_conn(pcb, hs);
  406e4a:	4631      	mov	r1, r6
  406e4c:	4638      	mov	r0, r7
  406e4e:	4b01      	ldr	r3, [pc, #4]	; (406e54 <http_recv+0xe0>)
  406e50:	4798      	blx	r3
  406e52:	e79a      	b.n	406d8a <http_recv+0x16>
  406e54:	00406d35 	.word	0x00406d35
  406e58:	00402f31 	.word	0x00402f31
  406e5c:	00402861 	.word	0x00402861
  406e60:	0040c0b8 	.word	0x0040c0b8
  406e64:	00407c1d 	.word	0x00407c1d
  406e68:	00406bf1 	.word	0x00406bf1
  406e6c:	00406c8d 	.word	0x00406c8d
  406e70:	00406e85 	.word	0x00406e85
  406e74:	0040300f 	.word	0x0040300f
  406e78:	0040c090 	.word	0x0040c090
  406e7c:	0040c09c 	.word	0x0040c09c
  406e80:	00400009 	.word	0x00400009

00406e84 <http_sent>:
{
  406e84:	b508      	push	{r3, lr}
  406e86:	4603      	mov	r3, r0
  406e88:	4608      	mov	r0, r1
	hs->retries = 0;
  406e8a:	2200      	movs	r2, #0
  406e8c:	721a      	strb	r2, [r3, #8]
	if (hs->left > 0) {
  406e8e:	685a      	ldr	r2, [r3, #4]
  406e90:	b922      	cbnz	r2, 406e9c <http_sent+0x18>
		http_close_conn(pcb, hs);
  406e92:	4619      	mov	r1, r3
  406e94:	4b03      	ldr	r3, [pc, #12]	; (406ea4 <http_sent+0x20>)
  406e96:	4798      	blx	r3
}
  406e98:	2000      	movs	r0, #0
  406e9a:	bd08      	pop	{r3, pc}
		http_send_data(pcb, hs);
  406e9c:	4619      	mov	r1, r3
  406e9e:	4b02      	ldr	r3, [pc, #8]	; (406ea8 <http_sent+0x24>)
  406ea0:	4798      	blx	r3
  406ea2:	e7f9      	b.n	406e98 <http_sent+0x14>
  406ea4:	00406d35 	.word	0x00406d35
  406ea8:	00406c8d 	.word	0x00406c8d

00406eac <httpd_init>:

/**
 * \brief HTTP server init.
 */
void httpd_init(void)
{
  406eac:	b510      	push	{r4, lr}
	struct tcp_pcb *pcb;

	pcb = tcp_new();
  406eae:	4b07      	ldr	r3, [pc, #28]	; (406ecc <httpd_init+0x20>)
  406eb0:	4798      	blx	r3
  406eb2:	4604      	mov	r4, r0
	tcp_bind(pcb, IP_ADDR_ANY, 80);
  406eb4:	2250      	movs	r2, #80	; 0x50
  406eb6:	4906      	ldr	r1, [pc, #24]	; (406ed0 <httpd_init+0x24>)
  406eb8:	4b06      	ldr	r3, [pc, #24]	; (406ed4 <httpd_init+0x28>)
  406eba:	4798      	blx	r3
	pcb = tcp_listen(pcb);
  406ebc:	21ff      	movs	r1, #255	; 0xff
  406ebe:	4620      	mov	r0, r4
  406ec0:	4b05      	ldr	r3, [pc, #20]	; (406ed8 <httpd_init+0x2c>)
  406ec2:	4798      	blx	r3
	tcp_accept(pcb, http_accept);
  406ec4:	4905      	ldr	r1, [pc, #20]	; (406edc <httpd_init+0x30>)
  406ec6:	4b06      	ldr	r3, [pc, #24]	; (406ee0 <httpd_init+0x34>)
  406ec8:	4798      	blx	r3
  406eca:	bd10      	pop	{r4, pc}
  406ecc:	004038d9 	.word	0x004038d9
  406ed0:	0040a764 	.word	0x0040a764
  406ed4:	00402d69 	.word	0x00402d69
  406ed8:	00402e21 	.word	0x00402e21
  406edc:	00406c21 	.word	0x00406c21
  406ee0:	00403019 	.word	0x00403019

00406ee4 <TC0_Handler>:

/**
 * TC0 Interrupt handler.
 */
void TC0_Handler(void)
{
  406ee4:	b082      	sub	sp, #8
	/* Remove warnings. */
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt. */
	ul_dummy = TC0->TC_CHANNEL[0].TC_SR;
  406ee6:	4b04      	ldr	r3, [pc, #16]	; (406ef8 <TC0_Handler+0x14>)
  406ee8:	6a1b      	ldr	r3, [r3, #32]
  406eea:	9301      	str	r3, [sp, #4]

	/* Increase tick. */
	gs_ul_clk_tick++;
  406eec:	4a03      	ldr	r2, [pc, #12]	; (406efc <TC0_Handler+0x18>)
  406eee:	6813      	ldr	r3, [r2, #0]
  406ef0:	3301      	adds	r3, #1
  406ef2:	6013      	str	r3, [r2, #0]
}
  406ef4:	b002      	add	sp, #8
  406ef6:	4770      	bx	lr
  406ef8:	4000c000 	.word	0x4000c000
  406efc:	20403954 	.word	0x20403954

00406f00 <sys_init_timing>:

/**
 * \brief Initialize the timer counter (TC0).
 */
void sys_init_timing(void)
{
  406f00:	b570      	push	{r4, r5, r6, lr}
  406f02:	b084      	sub	sp, #16
	uint32_t ul_div;
	uint32_t ul_tcclks;

	/* Clear tick value. */
	gs_ul_clk_tick = 0;
  406f04:	2500      	movs	r5, #0
  406f06:	4b18      	ldr	r3, [pc, #96]	; (406f68 <sys_init_timing+0x68>)
  406f08:	601d      	str	r5, [r3, #0]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC0);
  406f0a:	2017      	movs	r0, #23
  406f0c:	4b17      	ldr	r3, [pc, #92]	; (406f6c <sys_init_timing+0x6c>)
  406f0e:	4798      	blx	r3

	/* Configure TC for a 1kHz frequency and trigger on RC compare. */
	tc_find_mck_divisor(1000,
  406f10:	4c17      	ldr	r4, [pc, #92]	; (406f70 <sys_init_timing+0x70>)
  406f12:	9400      	str	r4, [sp, #0]
  406f14:	ab02      	add	r3, sp, #8
  406f16:	aa03      	add	r2, sp, #12
  406f18:	4621      	mov	r1, r4
  406f1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  406f1e:	4e15      	ldr	r6, [pc, #84]	; (406f74 <sys_init_timing+0x74>)
  406f20:	47b0      	blx	r6
			sysclk_get_main_hz(), &ul_div, &ul_tcclks,
			sysclk_get_main_hz());
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  406f22:	4e15      	ldr	r6, [pc, #84]	; (406f78 <sys_init_timing+0x78>)
  406f24:	9a02      	ldr	r2, [sp, #8]
  406f26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  406f2a:	4629      	mov	r1, r5
  406f2c:	4630      	mov	r0, r6
  406f2e:	4b13      	ldr	r3, [pc, #76]	; (406f7c <sys_init_timing+0x7c>)
  406f30:	4798      	blx	r3
	tc_write_rc(TC0, 0, (sysclk_get_main_hz() / ul_div) / 1000);
  406f32:	9a03      	ldr	r2, [sp, #12]
  406f34:	fbb4 f4f2 	udiv	r4, r4, r2
  406f38:	4a11      	ldr	r2, [pc, #68]	; (406f80 <sys_init_timing+0x80>)
  406f3a:	fba2 3204 	umull	r3, r2, r2, r4
  406f3e:	0992      	lsrs	r2, r2, #6
  406f40:	4629      	mov	r1, r5
  406f42:	4630      	mov	r0, r6
  406f44:	4b0f      	ldr	r3, [pc, #60]	; (406f84 <sys_init_timing+0x84>)
  406f46:	4798      	blx	r3
  406f48:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  406f4c:	4b0e      	ldr	r3, [pc, #56]	; (406f88 <sys_init_timing+0x88>)
  406f4e:	601a      	str	r2, [r3, #0]

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type)ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  406f50:	2210      	movs	r2, #16
  406f52:	4629      	mov	r1, r5
  406f54:	4630      	mov	r0, r6
  406f56:	4b0d      	ldr	r3, [pc, #52]	; (406f8c <sys_init_timing+0x8c>)
  406f58:	4798      	blx	r3

	/* Start timer. */
	tc_start(TC0, 0);
  406f5a:	4629      	mov	r1, r5
  406f5c:	4630      	mov	r0, r6
  406f5e:	4b0c      	ldr	r3, [pc, #48]	; (406f90 <sys_init_timing+0x90>)
  406f60:	4798      	blx	r3
}
  406f62:	b004      	add	sp, #16
  406f64:	bd70      	pop	{r4, r5, r6, pc}
  406f66:	bf00      	nop
  406f68:	20403954 	.word	0x20403954
  406f6c:	00400ed1 	.word	0x00400ed1
  406f70:	11e1a300 	.word	0x11e1a300
  406f74:	00400f23 	.word	0x00400f23
  406f78:	4000c000 	.word	0x4000c000
  406f7c:	00400ef1 	.word	0x00400ef1
  406f80:	10624dd3 	.word	0x10624dd3
  406f84:	00400f13 	.word	0x00400f13
  406f88:	e000e100 	.word	0xe000e100
  406f8c:	00400f1b 	.word	0x00400f1b
  406f90:	00400f0b 	.word	0x00400f0b

00406f94 <sys_get_ms>:
/**
 * \brief Return the number of timer ticks (ms).
 */
uint32_t sys_get_ms(void)
{
	return gs_ul_clk_tick;
  406f94:	4b01      	ldr	r3, [pc, #4]	; (406f9c <sys_get_ms+0x8>)
  406f96:	6818      	ldr	r0, [r3, #0]
}
  406f98:	4770      	bx	lr
  406f9a:	bf00      	nop
  406f9c:	20403954 	.word	0x20403954

00406fa0 <sys_now>:
	return gs_ul_clk_tick;
  406fa0:	4b01      	ldr	r3, [pc, #4]	; (406fa8 <sys_now+0x8>)
  406fa2:	6818      	ldr	r0, [r3, #0]

#if ((LWIP_VERSION) != ((1U << 24) | (3U << 16) | (2U << 8) | (LWIP_VERSION_RC)))
u32_t sys_now(void)
{
	return (sys_get_ms());
}
  406fa4:	4770      	bx	lr
  406fa6:	bf00      	nop
  406fa8:	20403954 	.word	0x20403954

00406fac <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  406fac:	b5f0      	push	{r4, r5, r6, r7, lr}
  406fae:	b083      	sub	sp, #12
  406fb0:	4605      	mov	r5, r0
  406fb2:	460c      	mov	r4, r1
	uint32_t val = 0;
  406fb4:	2300      	movs	r3, #0
  406fb6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  406fb8:	4b2a      	ldr	r3, [pc, #168]	; (407064 <usart_serial_getchar+0xb8>)
  406fba:	4298      	cmp	r0, r3
  406fbc:	d013      	beq.n	406fe6 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  406fbe:	4b2a      	ldr	r3, [pc, #168]	; (407068 <usart_serial_getchar+0xbc>)
  406fc0:	4298      	cmp	r0, r3
  406fc2:	d018      	beq.n	406ff6 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  406fc4:	4b29      	ldr	r3, [pc, #164]	; (40706c <usart_serial_getchar+0xc0>)
  406fc6:	4298      	cmp	r0, r3
  406fc8:	d01d      	beq.n	407006 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  406fca:	4b29      	ldr	r3, [pc, #164]	; (407070 <usart_serial_getchar+0xc4>)
  406fcc:	429d      	cmp	r5, r3
  406fce:	d022      	beq.n	407016 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  406fd0:	4b28      	ldr	r3, [pc, #160]	; (407074 <usart_serial_getchar+0xc8>)
  406fd2:	429d      	cmp	r5, r3
  406fd4:	d027      	beq.n	407026 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  406fd6:	4b28      	ldr	r3, [pc, #160]	; (407078 <usart_serial_getchar+0xcc>)
  406fd8:	429d      	cmp	r5, r3
  406fda:	d02e      	beq.n	40703a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  406fdc:	4b27      	ldr	r3, [pc, #156]	; (40707c <usart_serial_getchar+0xd0>)
  406fde:	429d      	cmp	r5, r3
  406fe0:	d035      	beq.n	40704e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  406fe2:	b003      	add	sp, #12
  406fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  406fe6:	461f      	mov	r7, r3
  406fe8:	4e25      	ldr	r6, [pc, #148]	; (407080 <usart_serial_getchar+0xd4>)
  406fea:	4621      	mov	r1, r4
  406fec:	4638      	mov	r0, r7
  406fee:	47b0      	blx	r6
  406ff0:	2800      	cmp	r0, #0
  406ff2:	d1fa      	bne.n	406fea <usart_serial_getchar+0x3e>
  406ff4:	e7e9      	b.n	406fca <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  406ff6:	461f      	mov	r7, r3
  406ff8:	4e21      	ldr	r6, [pc, #132]	; (407080 <usart_serial_getchar+0xd4>)
  406ffa:	4621      	mov	r1, r4
  406ffc:	4638      	mov	r0, r7
  406ffe:	47b0      	blx	r6
  407000:	2800      	cmp	r0, #0
  407002:	d1fa      	bne.n	406ffa <usart_serial_getchar+0x4e>
  407004:	e7e4      	b.n	406fd0 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  407006:	461f      	mov	r7, r3
  407008:	4e1d      	ldr	r6, [pc, #116]	; (407080 <usart_serial_getchar+0xd4>)
  40700a:	4621      	mov	r1, r4
  40700c:	4638      	mov	r0, r7
  40700e:	47b0      	blx	r6
  407010:	2800      	cmp	r0, #0
  407012:	d1fa      	bne.n	40700a <usart_serial_getchar+0x5e>
  407014:	e7df      	b.n	406fd6 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  407016:	461f      	mov	r7, r3
  407018:	4e19      	ldr	r6, [pc, #100]	; (407080 <usart_serial_getchar+0xd4>)
  40701a:	4621      	mov	r1, r4
  40701c:	4638      	mov	r0, r7
  40701e:	47b0      	blx	r6
  407020:	2800      	cmp	r0, #0
  407022:	d1fa      	bne.n	40701a <usart_serial_getchar+0x6e>
  407024:	e7da      	b.n	406fdc <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  407026:	461e      	mov	r6, r3
  407028:	4d16      	ldr	r5, [pc, #88]	; (407084 <usart_serial_getchar+0xd8>)
  40702a:	a901      	add	r1, sp, #4
  40702c:	4630      	mov	r0, r6
  40702e:	47a8      	blx	r5
  407030:	2800      	cmp	r0, #0
  407032:	d1fa      	bne.n	40702a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  407034:	9b01      	ldr	r3, [sp, #4]
  407036:	7023      	strb	r3, [r4, #0]
  407038:	e7d3      	b.n	406fe2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40703a:	461e      	mov	r6, r3
  40703c:	4d11      	ldr	r5, [pc, #68]	; (407084 <usart_serial_getchar+0xd8>)
  40703e:	a901      	add	r1, sp, #4
  407040:	4630      	mov	r0, r6
  407042:	47a8      	blx	r5
  407044:	2800      	cmp	r0, #0
  407046:	d1fa      	bne.n	40703e <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  407048:	9b01      	ldr	r3, [sp, #4]
  40704a:	7023      	strb	r3, [r4, #0]
  40704c:	e7c9      	b.n	406fe2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40704e:	461e      	mov	r6, r3
  407050:	4d0c      	ldr	r5, [pc, #48]	; (407084 <usart_serial_getchar+0xd8>)
  407052:	a901      	add	r1, sp, #4
  407054:	4630      	mov	r0, r6
  407056:	47a8      	blx	r5
  407058:	2800      	cmp	r0, #0
  40705a:	d1fa      	bne.n	407052 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  40705c:	9b01      	ldr	r3, [sp, #4]
  40705e:	7023      	strb	r3, [r4, #0]
}
  407060:	e7bf      	b.n	406fe2 <usart_serial_getchar+0x36>
  407062:	bf00      	nop
  407064:	400e0800 	.word	0x400e0800
  407068:	400e0a00 	.word	0x400e0a00
  40706c:	400e1a00 	.word	0x400e1a00
  407070:	400e1c00 	.word	0x400e1c00
  407074:	40024000 	.word	0x40024000
  407078:	40028000 	.word	0x40028000
  40707c:	4002c000 	.word	0x4002c000
  407080:	00400fa5 	.word	0x00400fa5
  407084:	004010b3 	.word	0x004010b3

00407088 <usart_serial_putchar>:
{
  407088:	b570      	push	{r4, r5, r6, lr}
  40708a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  40708c:	4b2a      	ldr	r3, [pc, #168]	; (407138 <usart_serial_putchar+0xb0>)
  40708e:	4298      	cmp	r0, r3
  407090:	d013      	beq.n	4070ba <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  407092:	4b2a      	ldr	r3, [pc, #168]	; (40713c <usart_serial_putchar+0xb4>)
  407094:	4298      	cmp	r0, r3
  407096:	d019      	beq.n	4070cc <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  407098:	4b29      	ldr	r3, [pc, #164]	; (407140 <usart_serial_putchar+0xb8>)
  40709a:	4298      	cmp	r0, r3
  40709c:	d01f      	beq.n	4070de <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40709e:	4b29      	ldr	r3, [pc, #164]	; (407144 <usart_serial_putchar+0xbc>)
  4070a0:	4298      	cmp	r0, r3
  4070a2:	d025      	beq.n	4070f0 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4070a4:	4b28      	ldr	r3, [pc, #160]	; (407148 <usart_serial_putchar+0xc0>)
  4070a6:	4298      	cmp	r0, r3
  4070a8:	d02b      	beq.n	407102 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4070aa:	4b28      	ldr	r3, [pc, #160]	; (40714c <usart_serial_putchar+0xc4>)
  4070ac:	4298      	cmp	r0, r3
  4070ae:	d031      	beq.n	407114 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4070b0:	4b27      	ldr	r3, [pc, #156]	; (407150 <usart_serial_putchar+0xc8>)
  4070b2:	4298      	cmp	r0, r3
  4070b4:	d037      	beq.n	407126 <usart_serial_putchar+0x9e>
	return 0;
  4070b6:	2000      	movs	r0, #0
}
  4070b8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4070ba:	461e      	mov	r6, r3
  4070bc:	4d25      	ldr	r5, [pc, #148]	; (407154 <usart_serial_putchar+0xcc>)
  4070be:	4621      	mov	r1, r4
  4070c0:	4630      	mov	r0, r6
  4070c2:	47a8      	blx	r5
  4070c4:	2800      	cmp	r0, #0
  4070c6:	d1fa      	bne.n	4070be <usart_serial_putchar+0x36>
		return 1;
  4070c8:	2001      	movs	r0, #1
  4070ca:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4070cc:	461e      	mov	r6, r3
  4070ce:	4d21      	ldr	r5, [pc, #132]	; (407154 <usart_serial_putchar+0xcc>)
  4070d0:	4621      	mov	r1, r4
  4070d2:	4630      	mov	r0, r6
  4070d4:	47a8      	blx	r5
  4070d6:	2800      	cmp	r0, #0
  4070d8:	d1fa      	bne.n	4070d0 <usart_serial_putchar+0x48>
		return 1;
  4070da:	2001      	movs	r0, #1
  4070dc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4070de:	461e      	mov	r6, r3
  4070e0:	4d1c      	ldr	r5, [pc, #112]	; (407154 <usart_serial_putchar+0xcc>)
  4070e2:	4621      	mov	r1, r4
  4070e4:	4630      	mov	r0, r6
  4070e6:	47a8      	blx	r5
  4070e8:	2800      	cmp	r0, #0
  4070ea:	d1fa      	bne.n	4070e2 <usart_serial_putchar+0x5a>
		return 1;
  4070ec:	2001      	movs	r0, #1
  4070ee:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4070f0:	461e      	mov	r6, r3
  4070f2:	4d18      	ldr	r5, [pc, #96]	; (407154 <usart_serial_putchar+0xcc>)
  4070f4:	4621      	mov	r1, r4
  4070f6:	4630      	mov	r0, r6
  4070f8:	47a8      	blx	r5
  4070fa:	2800      	cmp	r0, #0
  4070fc:	d1fa      	bne.n	4070f4 <usart_serial_putchar+0x6c>
		return 1;
  4070fe:	2001      	movs	r0, #1
  407100:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  407102:	461e      	mov	r6, r3
  407104:	4d14      	ldr	r5, [pc, #80]	; (407158 <usart_serial_putchar+0xd0>)
  407106:	4621      	mov	r1, r4
  407108:	4630      	mov	r0, r6
  40710a:	47a8      	blx	r5
  40710c:	2800      	cmp	r0, #0
  40710e:	d1fa      	bne.n	407106 <usart_serial_putchar+0x7e>
		return 1;
  407110:	2001      	movs	r0, #1
  407112:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  407114:	461e      	mov	r6, r3
  407116:	4d10      	ldr	r5, [pc, #64]	; (407158 <usart_serial_putchar+0xd0>)
  407118:	4621      	mov	r1, r4
  40711a:	4630      	mov	r0, r6
  40711c:	47a8      	blx	r5
  40711e:	2800      	cmp	r0, #0
  407120:	d1fa      	bne.n	407118 <usart_serial_putchar+0x90>
		return 1;
  407122:	2001      	movs	r0, #1
  407124:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  407126:	461e      	mov	r6, r3
  407128:	4d0b      	ldr	r5, [pc, #44]	; (407158 <usart_serial_putchar+0xd0>)
  40712a:	4621      	mov	r1, r4
  40712c:	4630      	mov	r0, r6
  40712e:	47a8      	blx	r5
  407130:	2800      	cmp	r0, #0
  407132:	d1fa      	bne.n	40712a <usart_serial_putchar+0xa2>
		return 1;
  407134:	2001      	movs	r0, #1
  407136:	bd70      	pop	{r4, r5, r6, pc}
  407138:	400e0800 	.word	0x400e0800
  40713c:	400e0a00 	.word	0x400e0a00
  407140:	400e1a00 	.word	0x400e1a00
  407144:	400e1c00 	.word	0x400e1c00
  407148:	40024000 	.word	0x40024000
  40714c:	40028000 	.word	0x40028000
  407150:	4002c000 	.word	0x4002c000
  407154:	00400f93 	.word	0x00400f93
  407158:	0040109d 	.word	0x0040109d

0040715c <main>:
/**
 * \brief Main program function. Configure the hardware, initialize lwIP
 * TCP/IP stack, and start HTTP service.
 */
int main(void)
{
  40715c:	b500      	push	{lr}
  40715e:	b087      	sub	sp, #28
	/* Initialize the SAM system. */
	sysclk_init();
  407160:	4b20      	ldr	r3, [pc, #128]	; (4071e4 <main+0x88>)
  407162:	4798      	blx	r3
	board_init();
  407164:	4b20      	ldr	r3, [pc, #128]	; (4071e8 <main+0x8c>)
  407166:	4798      	blx	r3
  407168:	200e      	movs	r0, #14
  40716a:	4e20      	ldr	r6, [pc, #128]	; (4071ec <main+0x90>)
  40716c:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40716e:	4d20      	ldr	r5, [pc, #128]	; (4071f0 <main+0x94>)
  407170:	4b20      	ldr	r3, [pc, #128]	; (4071f4 <main+0x98>)
  407172:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  407174:	4a20      	ldr	r2, [pc, #128]	; (4071f8 <main+0x9c>)
  407176:	4b21      	ldr	r3, [pc, #132]	; (4071fc <main+0xa0>)
  407178:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40717a:	4a21      	ldr	r2, [pc, #132]	; (407200 <main+0xa4>)
  40717c:	4b21      	ldr	r3, [pc, #132]	; (407204 <main+0xa8>)
  40717e:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  407180:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  407184:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  407186:	23c0      	movs	r3, #192	; 0xc0
  407188:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  40718a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40718e:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  407190:	2400      	movs	r4, #0
  407192:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  407194:	9404      	str	r4, [sp, #16]
  407196:	200e      	movs	r0, #14
  407198:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  40719a:	4a1b      	ldr	r2, [pc, #108]	; (407208 <main+0xac>)
  40719c:	4669      	mov	r1, sp
  40719e:	4628      	mov	r0, r5
  4071a0:	4b1a      	ldr	r3, [pc, #104]	; (40720c <main+0xb0>)
  4071a2:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4071a4:	4628      	mov	r0, r5
  4071a6:	4b1a      	ldr	r3, [pc, #104]	; (407210 <main+0xb4>)
  4071a8:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4071aa:	4628      	mov	r0, r5
  4071ac:	4b19      	ldr	r3, [pc, #100]	; (407214 <main+0xb8>)
  4071ae:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4071b0:	4e19      	ldr	r6, [pc, #100]	; (407218 <main+0xbc>)
  4071b2:	6833      	ldr	r3, [r6, #0]
  4071b4:	4621      	mov	r1, r4
  4071b6:	6898      	ldr	r0, [r3, #8]
  4071b8:	4d18      	ldr	r5, [pc, #96]	; (40721c <main+0xc0>)
  4071ba:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4071bc:	6833      	ldr	r3, [r6, #0]
  4071be:	4621      	mov	r1, r4
  4071c0:	6858      	ldr	r0, [r3, #4]
  4071c2:	47a8      	blx	r5
	setbuf(stdout, NULL);
  4071c4:	6833      	ldr	r3, [r6, #0]
  4071c6:	4621      	mov	r1, r4
  4071c8:	6898      	ldr	r0, [r3, #8]
  4071ca:	47a8      	blx	r5

	/* Configure debug UART */
	configure_console();

	/* Print example information. */
	puts(STRING_HEADER);
  4071cc:	4814      	ldr	r0, [pc, #80]	; (407220 <main+0xc4>)
  4071ce:	4b15      	ldr	r3, [pc, #84]	; (407224 <main+0xc8>)
  4071d0:	4798      	blx	r3

	/* Bring up the ethernet interface & initialize timer0, channel0. */
	init_ethernet();
  4071d2:	4b15      	ldr	r3, [pc, #84]	; (407228 <main+0xcc>)
  4071d4:	4798      	blx	r3

	/* Bring up the web server. */
	httpd_init();
  4071d6:	4b15      	ldr	r3, [pc, #84]	; (40722c <main+0xd0>)
  4071d8:	4798      	blx	r3
	
	echo_init();
  4071da:	4b15      	ldr	r3, [pc, #84]	; (407230 <main+0xd4>)
  4071dc:	4798      	blx	r3

	/* Program main loop. */
	while (1) {
		/* Check for input packet and process it. */
		ethernet_task();
  4071de:	4c15      	ldr	r4, [pc, #84]	; (407234 <main+0xd8>)
  4071e0:	47a0      	blx	r4
  4071e2:	e7fd      	b.n	4071e0 <main+0x84>
  4071e4:	004004d9 	.word	0x004004d9
  4071e8:	004005d9 	.word	0x004005d9
  4071ec:	00400ed1 	.word	0x00400ed1
  4071f0:	40028000 	.word	0x40028000
  4071f4:	20403994 	.word	0x20403994
  4071f8:	00407089 	.word	0x00407089
  4071fc:	20403990 	.word	0x20403990
  407200:	00406fad 	.word	0x00406fad
  407204:	2040398c 	.word	0x2040398c
  407208:	047868c0 	.word	0x047868c0
  40720c:	0040103d 	.word	0x0040103d
  407210:	00401091 	.word	0x00401091
  407214:	00401097 	.word	0x00401097
  407218:	20400034 	.word	0x20400034
  40721c:	0040758d 	.word	0x0040758d
  407220:	0040c0c0 	.word	0x0040c0c0
  407224:	0040757d 	.word	0x0040757d
  407228:	00406afd 	.word	0x00406afd
  40722c:	00406ead 	.word	0x00406ead
  407230:	00400255 	.word	0x00400255
  407234:	00406b89 	.word	0x00406b89

00407238 <__libc_init_array>:
  407238:	b570      	push	{r4, r5, r6, lr}
  40723a:	4e0f      	ldr	r6, [pc, #60]	; (407278 <__libc_init_array+0x40>)
  40723c:	4d0f      	ldr	r5, [pc, #60]	; (40727c <__libc_init_array+0x44>)
  40723e:	1b76      	subs	r6, r6, r5
  407240:	10b6      	asrs	r6, r6, #2
  407242:	bf18      	it	ne
  407244:	2400      	movne	r4, #0
  407246:	d005      	beq.n	407254 <__libc_init_array+0x1c>
  407248:	3401      	adds	r4, #1
  40724a:	f855 3b04 	ldr.w	r3, [r5], #4
  40724e:	4798      	blx	r3
  407250:	42a6      	cmp	r6, r4
  407252:	d1f9      	bne.n	407248 <__libc_init_array+0x10>
  407254:	4e0a      	ldr	r6, [pc, #40]	; (407280 <__libc_init_array+0x48>)
  407256:	4d0b      	ldr	r5, [pc, #44]	; (407284 <__libc_init_array+0x4c>)
  407258:	1b76      	subs	r6, r6, r5
  40725a:	f005 f813 	bl	40c284 <_init>
  40725e:	10b6      	asrs	r6, r6, #2
  407260:	bf18      	it	ne
  407262:	2400      	movne	r4, #0
  407264:	d006      	beq.n	407274 <__libc_init_array+0x3c>
  407266:	3401      	adds	r4, #1
  407268:	f855 3b04 	ldr.w	r3, [r5], #4
  40726c:	4798      	blx	r3
  40726e:	42a6      	cmp	r6, r4
  407270:	d1f9      	bne.n	407266 <__libc_init_array+0x2e>
  407272:	bd70      	pop	{r4, r5, r6, pc}
  407274:	bd70      	pop	{r4, r5, r6, pc}
  407276:	bf00      	nop
  407278:	0040c290 	.word	0x0040c290
  40727c:	0040c290 	.word	0x0040c290
  407280:	0040c298 	.word	0x0040c298
  407284:	0040c290 	.word	0x0040c290

00407288 <iprintf>:
  407288:	b40f      	push	{r0, r1, r2, r3}
  40728a:	b500      	push	{lr}
  40728c:	4907      	ldr	r1, [pc, #28]	; (4072ac <iprintf+0x24>)
  40728e:	b083      	sub	sp, #12
  407290:	ab04      	add	r3, sp, #16
  407292:	6808      	ldr	r0, [r1, #0]
  407294:	f853 2b04 	ldr.w	r2, [r3], #4
  407298:	6881      	ldr	r1, [r0, #8]
  40729a:	9301      	str	r3, [sp, #4]
  40729c:	f000 fd50 	bl	407d40 <_vfiprintf_r>
  4072a0:	b003      	add	sp, #12
  4072a2:	f85d eb04 	ldr.w	lr, [sp], #4
  4072a6:	b004      	add	sp, #16
  4072a8:	4770      	bx	lr
  4072aa:	bf00      	nop
  4072ac:	20400034 	.word	0x20400034

004072b0 <memcmp>:
  4072b0:	2a03      	cmp	r2, #3
  4072b2:	b470      	push	{r4, r5, r6}
  4072b4:	d922      	bls.n	4072fc <memcmp+0x4c>
  4072b6:	ea40 0301 	orr.w	r3, r0, r1
  4072ba:	079b      	lsls	r3, r3, #30
  4072bc:	d011      	beq.n	4072e2 <memcmp+0x32>
  4072be:	7803      	ldrb	r3, [r0, #0]
  4072c0:	780c      	ldrb	r4, [r1, #0]
  4072c2:	42a3      	cmp	r3, r4
  4072c4:	d11d      	bne.n	407302 <memcmp+0x52>
  4072c6:	440a      	add	r2, r1
  4072c8:	3101      	adds	r1, #1
  4072ca:	e005      	b.n	4072d8 <memcmp+0x28>
  4072cc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4072d0:	f811 4b01 	ldrb.w	r4, [r1], #1
  4072d4:	42a3      	cmp	r3, r4
  4072d6:	d114      	bne.n	407302 <memcmp+0x52>
  4072d8:	4291      	cmp	r1, r2
  4072da:	d1f7      	bne.n	4072cc <memcmp+0x1c>
  4072dc:	2000      	movs	r0, #0
  4072de:	bc70      	pop	{r4, r5, r6}
  4072e0:	4770      	bx	lr
  4072e2:	680d      	ldr	r5, [r1, #0]
  4072e4:	6806      	ldr	r6, [r0, #0]
  4072e6:	42ae      	cmp	r6, r5
  4072e8:	460c      	mov	r4, r1
  4072ea:	4603      	mov	r3, r0
  4072ec:	f101 0104 	add.w	r1, r1, #4
  4072f0:	f100 0004 	add.w	r0, r0, #4
  4072f4:	d108      	bne.n	407308 <memcmp+0x58>
  4072f6:	3a04      	subs	r2, #4
  4072f8:	2a03      	cmp	r2, #3
  4072fa:	d8f2      	bhi.n	4072e2 <memcmp+0x32>
  4072fc:	2a00      	cmp	r2, #0
  4072fe:	d1de      	bne.n	4072be <memcmp+0xe>
  407300:	e7ec      	b.n	4072dc <memcmp+0x2c>
  407302:	1b18      	subs	r0, r3, r4
  407304:	bc70      	pop	{r4, r5, r6}
  407306:	4770      	bx	lr
  407308:	4621      	mov	r1, r4
  40730a:	4618      	mov	r0, r3
  40730c:	e7d7      	b.n	4072be <memcmp+0xe>
  40730e:	bf00      	nop

00407310 <memcpy>:
  407310:	4684      	mov	ip, r0
  407312:	ea41 0300 	orr.w	r3, r1, r0
  407316:	f013 0303 	ands.w	r3, r3, #3
  40731a:	d16d      	bne.n	4073f8 <memcpy+0xe8>
  40731c:	3a40      	subs	r2, #64	; 0x40
  40731e:	d341      	bcc.n	4073a4 <memcpy+0x94>
  407320:	f851 3b04 	ldr.w	r3, [r1], #4
  407324:	f840 3b04 	str.w	r3, [r0], #4
  407328:	f851 3b04 	ldr.w	r3, [r1], #4
  40732c:	f840 3b04 	str.w	r3, [r0], #4
  407330:	f851 3b04 	ldr.w	r3, [r1], #4
  407334:	f840 3b04 	str.w	r3, [r0], #4
  407338:	f851 3b04 	ldr.w	r3, [r1], #4
  40733c:	f840 3b04 	str.w	r3, [r0], #4
  407340:	f851 3b04 	ldr.w	r3, [r1], #4
  407344:	f840 3b04 	str.w	r3, [r0], #4
  407348:	f851 3b04 	ldr.w	r3, [r1], #4
  40734c:	f840 3b04 	str.w	r3, [r0], #4
  407350:	f851 3b04 	ldr.w	r3, [r1], #4
  407354:	f840 3b04 	str.w	r3, [r0], #4
  407358:	f851 3b04 	ldr.w	r3, [r1], #4
  40735c:	f840 3b04 	str.w	r3, [r0], #4
  407360:	f851 3b04 	ldr.w	r3, [r1], #4
  407364:	f840 3b04 	str.w	r3, [r0], #4
  407368:	f851 3b04 	ldr.w	r3, [r1], #4
  40736c:	f840 3b04 	str.w	r3, [r0], #4
  407370:	f851 3b04 	ldr.w	r3, [r1], #4
  407374:	f840 3b04 	str.w	r3, [r0], #4
  407378:	f851 3b04 	ldr.w	r3, [r1], #4
  40737c:	f840 3b04 	str.w	r3, [r0], #4
  407380:	f851 3b04 	ldr.w	r3, [r1], #4
  407384:	f840 3b04 	str.w	r3, [r0], #4
  407388:	f851 3b04 	ldr.w	r3, [r1], #4
  40738c:	f840 3b04 	str.w	r3, [r0], #4
  407390:	f851 3b04 	ldr.w	r3, [r1], #4
  407394:	f840 3b04 	str.w	r3, [r0], #4
  407398:	f851 3b04 	ldr.w	r3, [r1], #4
  40739c:	f840 3b04 	str.w	r3, [r0], #4
  4073a0:	3a40      	subs	r2, #64	; 0x40
  4073a2:	d2bd      	bcs.n	407320 <memcpy+0x10>
  4073a4:	3230      	adds	r2, #48	; 0x30
  4073a6:	d311      	bcc.n	4073cc <memcpy+0xbc>
  4073a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4073ac:	f840 3b04 	str.w	r3, [r0], #4
  4073b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4073b4:	f840 3b04 	str.w	r3, [r0], #4
  4073b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4073bc:	f840 3b04 	str.w	r3, [r0], #4
  4073c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4073c4:	f840 3b04 	str.w	r3, [r0], #4
  4073c8:	3a10      	subs	r2, #16
  4073ca:	d2ed      	bcs.n	4073a8 <memcpy+0x98>
  4073cc:	320c      	adds	r2, #12
  4073ce:	d305      	bcc.n	4073dc <memcpy+0xcc>
  4073d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4073d4:	f840 3b04 	str.w	r3, [r0], #4
  4073d8:	3a04      	subs	r2, #4
  4073da:	d2f9      	bcs.n	4073d0 <memcpy+0xc0>
  4073dc:	3204      	adds	r2, #4
  4073de:	d008      	beq.n	4073f2 <memcpy+0xe2>
  4073e0:	07d2      	lsls	r2, r2, #31
  4073e2:	bf1c      	itt	ne
  4073e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4073e8:	f800 3b01 	strbne.w	r3, [r0], #1
  4073ec:	d301      	bcc.n	4073f2 <memcpy+0xe2>
  4073ee:	880b      	ldrh	r3, [r1, #0]
  4073f0:	8003      	strh	r3, [r0, #0]
  4073f2:	4660      	mov	r0, ip
  4073f4:	4770      	bx	lr
  4073f6:	bf00      	nop
  4073f8:	2a08      	cmp	r2, #8
  4073fa:	d313      	bcc.n	407424 <memcpy+0x114>
  4073fc:	078b      	lsls	r3, r1, #30
  4073fe:	d08d      	beq.n	40731c <memcpy+0xc>
  407400:	f010 0303 	ands.w	r3, r0, #3
  407404:	d08a      	beq.n	40731c <memcpy+0xc>
  407406:	f1c3 0304 	rsb	r3, r3, #4
  40740a:	1ad2      	subs	r2, r2, r3
  40740c:	07db      	lsls	r3, r3, #31
  40740e:	bf1c      	itt	ne
  407410:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407414:	f800 3b01 	strbne.w	r3, [r0], #1
  407418:	d380      	bcc.n	40731c <memcpy+0xc>
  40741a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40741e:	f820 3b02 	strh.w	r3, [r0], #2
  407422:	e77b      	b.n	40731c <memcpy+0xc>
  407424:	3a04      	subs	r2, #4
  407426:	d3d9      	bcc.n	4073dc <memcpy+0xcc>
  407428:	3a01      	subs	r2, #1
  40742a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40742e:	f800 3b01 	strb.w	r3, [r0], #1
  407432:	d2f9      	bcs.n	407428 <memcpy+0x118>
  407434:	780b      	ldrb	r3, [r1, #0]
  407436:	7003      	strb	r3, [r0, #0]
  407438:	784b      	ldrb	r3, [r1, #1]
  40743a:	7043      	strb	r3, [r0, #1]
  40743c:	788b      	ldrb	r3, [r1, #2]
  40743e:	7083      	strb	r3, [r0, #2]
  407440:	4660      	mov	r0, ip
  407442:	4770      	bx	lr

00407444 <memset>:
  407444:	b470      	push	{r4, r5, r6}
  407446:	0786      	lsls	r6, r0, #30
  407448:	d046      	beq.n	4074d8 <memset+0x94>
  40744a:	1e54      	subs	r4, r2, #1
  40744c:	2a00      	cmp	r2, #0
  40744e:	d041      	beq.n	4074d4 <memset+0x90>
  407450:	b2ca      	uxtb	r2, r1
  407452:	4603      	mov	r3, r0
  407454:	e002      	b.n	40745c <memset+0x18>
  407456:	f114 34ff 	adds.w	r4, r4, #4294967295
  40745a:	d33b      	bcc.n	4074d4 <memset+0x90>
  40745c:	f803 2b01 	strb.w	r2, [r3], #1
  407460:	079d      	lsls	r5, r3, #30
  407462:	d1f8      	bne.n	407456 <memset+0x12>
  407464:	2c03      	cmp	r4, #3
  407466:	d92e      	bls.n	4074c6 <memset+0x82>
  407468:	b2cd      	uxtb	r5, r1
  40746a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40746e:	2c0f      	cmp	r4, #15
  407470:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  407474:	d919      	bls.n	4074aa <memset+0x66>
  407476:	f103 0210 	add.w	r2, r3, #16
  40747a:	4626      	mov	r6, r4
  40747c:	3e10      	subs	r6, #16
  40747e:	2e0f      	cmp	r6, #15
  407480:	f842 5c10 	str.w	r5, [r2, #-16]
  407484:	f842 5c0c 	str.w	r5, [r2, #-12]
  407488:	f842 5c08 	str.w	r5, [r2, #-8]
  40748c:	f842 5c04 	str.w	r5, [r2, #-4]
  407490:	f102 0210 	add.w	r2, r2, #16
  407494:	d8f2      	bhi.n	40747c <memset+0x38>
  407496:	f1a4 0210 	sub.w	r2, r4, #16
  40749a:	f022 020f 	bic.w	r2, r2, #15
  40749e:	f004 040f 	and.w	r4, r4, #15
  4074a2:	3210      	adds	r2, #16
  4074a4:	2c03      	cmp	r4, #3
  4074a6:	4413      	add	r3, r2
  4074a8:	d90d      	bls.n	4074c6 <memset+0x82>
  4074aa:	461e      	mov	r6, r3
  4074ac:	4622      	mov	r2, r4
  4074ae:	3a04      	subs	r2, #4
  4074b0:	2a03      	cmp	r2, #3
  4074b2:	f846 5b04 	str.w	r5, [r6], #4
  4074b6:	d8fa      	bhi.n	4074ae <memset+0x6a>
  4074b8:	1f22      	subs	r2, r4, #4
  4074ba:	f022 0203 	bic.w	r2, r2, #3
  4074be:	3204      	adds	r2, #4
  4074c0:	4413      	add	r3, r2
  4074c2:	f004 0403 	and.w	r4, r4, #3
  4074c6:	b12c      	cbz	r4, 4074d4 <memset+0x90>
  4074c8:	b2c9      	uxtb	r1, r1
  4074ca:	441c      	add	r4, r3
  4074cc:	f803 1b01 	strb.w	r1, [r3], #1
  4074d0:	429c      	cmp	r4, r3
  4074d2:	d1fb      	bne.n	4074cc <memset+0x88>
  4074d4:	bc70      	pop	{r4, r5, r6}
  4074d6:	4770      	bx	lr
  4074d8:	4614      	mov	r4, r2
  4074da:	4603      	mov	r3, r0
  4074dc:	e7c2      	b.n	407464 <memset+0x20>
  4074de:	bf00      	nop

004074e0 <_puts_r>:
  4074e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4074e2:	4605      	mov	r5, r0
  4074e4:	b089      	sub	sp, #36	; 0x24
  4074e6:	4608      	mov	r0, r1
  4074e8:	460c      	mov	r4, r1
  4074ea:	f000 fb29 	bl	407b40 <strlen>
  4074ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4074f0:	4f21      	ldr	r7, [pc, #132]	; (407578 <_puts_r+0x98>)
  4074f2:	9404      	str	r4, [sp, #16]
  4074f4:	2601      	movs	r6, #1
  4074f6:	1c44      	adds	r4, r0, #1
  4074f8:	a904      	add	r1, sp, #16
  4074fa:	2202      	movs	r2, #2
  4074fc:	9403      	str	r4, [sp, #12]
  4074fe:	9005      	str	r0, [sp, #20]
  407500:	68ac      	ldr	r4, [r5, #8]
  407502:	9706      	str	r7, [sp, #24]
  407504:	9607      	str	r6, [sp, #28]
  407506:	9101      	str	r1, [sp, #4]
  407508:	9202      	str	r2, [sp, #8]
  40750a:	b353      	cbz	r3, 407562 <_puts_r+0x82>
  40750c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40750e:	f013 0f01 	tst.w	r3, #1
  407512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407516:	b29a      	uxth	r2, r3
  407518:	d101      	bne.n	40751e <_puts_r+0x3e>
  40751a:	0590      	lsls	r0, r2, #22
  40751c:	d525      	bpl.n	40756a <_puts_r+0x8a>
  40751e:	0491      	lsls	r1, r2, #18
  407520:	d406      	bmi.n	407530 <_puts_r+0x50>
  407522:	6e62      	ldr	r2, [r4, #100]	; 0x64
  407524:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407528:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40752c:	81a3      	strh	r3, [r4, #12]
  40752e:	6662      	str	r2, [r4, #100]	; 0x64
  407530:	4628      	mov	r0, r5
  407532:	aa01      	add	r2, sp, #4
  407534:	4621      	mov	r1, r4
  407536:	f001 fe05 	bl	409144 <__sfvwrite_r>
  40753a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40753c:	2800      	cmp	r0, #0
  40753e:	bf0c      	ite	eq
  407540:	250a      	moveq	r5, #10
  407542:	f04f 35ff 	movne.w	r5, #4294967295
  407546:	07da      	lsls	r2, r3, #31
  407548:	d402      	bmi.n	407550 <_puts_r+0x70>
  40754a:	89a3      	ldrh	r3, [r4, #12]
  40754c:	059b      	lsls	r3, r3, #22
  40754e:	d502      	bpl.n	407556 <_puts_r+0x76>
  407550:	4628      	mov	r0, r5
  407552:	b009      	add	sp, #36	; 0x24
  407554:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407556:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407558:	f001 ffaa 	bl	4094b0 <__retarget_lock_release_recursive>
  40755c:	4628      	mov	r0, r5
  40755e:	b009      	add	sp, #36	; 0x24
  407560:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407562:	4628      	mov	r0, r5
  407564:	f001 fbe2 	bl	408d2c <__sinit>
  407568:	e7d0      	b.n	40750c <_puts_r+0x2c>
  40756a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40756c:	f001 ff9e 	bl	4094ac <__retarget_lock_acquire_recursive>
  407570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407574:	b29a      	uxth	r2, r3
  407576:	e7d2      	b.n	40751e <_puts_r+0x3e>
  407578:	0040ac78 	.word	0x0040ac78

0040757c <puts>:
  40757c:	4b02      	ldr	r3, [pc, #8]	; (407588 <puts+0xc>)
  40757e:	4601      	mov	r1, r0
  407580:	6818      	ldr	r0, [r3, #0]
  407582:	f7ff bfad 	b.w	4074e0 <_puts_r>
  407586:	bf00      	nop
  407588:	20400034 	.word	0x20400034

0040758c <setbuf>:
  40758c:	2900      	cmp	r1, #0
  40758e:	bf0c      	ite	eq
  407590:	2202      	moveq	r2, #2
  407592:	2200      	movne	r2, #0
  407594:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407598:	f000 b800 	b.w	40759c <setvbuf>

0040759c <setvbuf>:
  40759c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4075a0:	4c61      	ldr	r4, [pc, #388]	; (407728 <setvbuf+0x18c>)
  4075a2:	6825      	ldr	r5, [r4, #0]
  4075a4:	b083      	sub	sp, #12
  4075a6:	4604      	mov	r4, r0
  4075a8:	460f      	mov	r7, r1
  4075aa:	4690      	mov	r8, r2
  4075ac:	461e      	mov	r6, r3
  4075ae:	b115      	cbz	r5, 4075b6 <setvbuf+0x1a>
  4075b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4075b2:	2b00      	cmp	r3, #0
  4075b4:	d064      	beq.n	407680 <setvbuf+0xe4>
  4075b6:	f1b8 0f02 	cmp.w	r8, #2
  4075ba:	d006      	beq.n	4075ca <setvbuf+0x2e>
  4075bc:	f1b8 0f01 	cmp.w	r8, #1
  4075c0:	f200 809f 	bhi.w	407702 <setvbuf+0x166>
  4075c4:	2e00      	cmp	r6, #0
  4075c6:	f2c0 809c 	blt.w	407702 <setvbuf+0x166>
  4075ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4075cc:	07d8      	lsls	r0, r3, #31
  4075ce:	d534      	bpl.n	40763a <setvbuf+0x9e>
  4075d0:	4621      	mov	r1, r4
  4075d2:	4628      	mov	r0, r5
  4075d4:	f001 fb52 	bl	408c7c <_fflush_r>
  4075d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4075da:	b141      	cbz	r1, 4075ee <setvbuf+0x52>
  4075dc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4075e0:	4299      	cmp	r1, r3
  4075e2:	d002      	beq.n	4075ea <setvbuf+0x4e>
  4075e4:	4628      	mov	r0, r5
  4075e6:	f001 fcc7 	bl	408f78 <_free_r>
  4075ea:	2300      	movs	r3, #0
  4075ec:	6323      	str	r3, [r4, #48]	; 0x30
  4075ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4075f2:	2200      	movs	r2, #0
  4075f4:	61a2      	str	r2, [r4, #24]
  4075f6:	6062      	str	r2, [r4, #4]
  4075f8:	061a      	lsls	r2, r3, #24
  4075fa:	d43a      	bmi.n	407672 <setvbuf+0xd6>
  4075fc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  407600:	f023 0303 	bic.w	r3, r3, #3
  407604:	f1b8 0f02 	cmp.w	r8, #2
  407608:	81a3      	strh	r3, [r4, #12]
  40760a:	d01d      	beq.n	407648 <setvbuf+0xac>
  40760c:	ab01      	add	r3, sp, #4
  40760e:	466a      	mov	r2, sp
  407610:	4621      	mov	r1, r4
  407612:	4628      	mov	r0, r5
  407614:	f001 ff4e 	bl	4094b4 <__swhatbuf_r>
  407618:	89a3      	ldrh	r3, [r4, #12]
  40761a:	4318      	orrs	r0, r3
  40761c:	81a0      	strh	r0, [r4, #12]
  40761e:	2e00      	cmp	r6, #0
  407620:	d132      	bne.n	407688 <setvbuf+0xec>
  407622:	9e00      	ldr	r6, [sp, #0]
  407624:	4630      	mov	r0, r6
  407626:	f001 ffbd 	bl	4095a4 <malloc>
  40762a:	4607      	mov	r7, r0
  40762c:	2800      	cmp	r0, #0
  40762e:	d06b      	beq.n	407708 <setvbuf+0x16c>
  407630:	89a3      	ldrh	r3, [r4, #12]
  407632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407636:	81a3      	strh	r3, [r4, #12]
  407638:	e028      	b.n	40768c <setvbuf+0xf0>
  40763a:	89a3      	ldrh	r3, [r4, #12]
  40763c:	0599      	lsls	r1, r3, #22
  40763e:	d4c7      	bmi.n	4075d0 <setvbuf+0x34>
  407640:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407642:	f001 ff33 	bl	4094ac <__retarget_lock_acquire_recursive>
  407646:	e7c3      	b.n	4075d0 <setvbuf+0x34>
  407648:	2500      	movs	r5, #0
  40764a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40764c:	2600      	movs	r6, #0
  40764e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407652:	f043 0302 	orr.w	r3, r3, #2
  407656:	2001      	movs	r0, #1
  407658:	60a6      	str	r6, [r4, #8]
  40765a:	07ce      	lsls	r6, r1, #31
  40765c:	81a3      	strh	r3, [r4, #12]
  40765e:	6022      	str	r2, [r4, #0]
  407660:	6122      	str	r2, [r4, #16]
  407662:	6160      	str	r0, [r4, #20]
  407664:	d401      	bmi.n	40766a <setvbuf+0xce>
  407666:	0598      	lsls	r0, r3, #22
  407668:	d53e      	bpl.n	4076e8 <setvbuf+0x14c>
  40766a:	4628      	mov	r0, r5
  40766c:	b003      	add	sp, #12
  40766e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407672:	6921      	ldr	r1, [r4, #16]
  407674:	4628      	mov	r0, r5
  407676:	f001 fc7f 	bl	408f78 <_free_r>
  40767a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40767e:	e7bd      	b.n	4075fc <setvbuf+0x60>
  407680:	4628      	mov	r0, r5
  407682:	f001 fb53 	bl	408d2c <__sinit>
  407686:	e796      	b.n	4075b6 <setvbuf+0x1a>
  407688:	2f00      	cmp	r7, #0
  40768a:	d0cb      	beq.n	407624 <setvbuf+0x88>
  40768c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40768e:	2b00      	cmp	r3, #0
  407690:	d033      	beq.n	4076fa <setvbuf+0x15e>
  407692:	9b00      	ldr	r3, [sp, #0]
  407694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407698:	6027      	str	r7, [r4, #0]
  40769a:	429e      	cmp	r6, r3
  40769c:	bf1c      	itt	ne
  40769e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4076a2:	81a2      	strhne	r2, [r4, #12]
  4076a4:	f1b8 0f01 	cmp.w	r8, #1
  4076a8:	bf04      	itt	eq
  4076aa:	f042 0201 	orreq.w	r2, r2, #1
  4076ae:	81a2      	strheq	r2, [r4, #12]
  4076b0:	b292      	uxth	r2, r2
  4076b2:	f012 0308 	ands.w	r3, r2, #8
  4076b6:	6127      	str	r7, [r4, #16]
  4076b8:	6166      	str	r6, [r4, #20]
  4076ba:	d00e      	beq.n	4076da <setvbuf+0x13e>
  4076bc:	07d1      	lsls	r1, r2, #31
  4076be:	d51a      	bpl.n	4076f6 <setvbuf+0x15a>
  4076c0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4076c2:	4276      	negs	r6, r6
  4076c4:	2300      	movs	r3, #0
  4076c6:	f015 0501 	ands.w	r5, r5, #1
  4076ca:	61a6      	str	r6, [r4, #24]
  4076cc:	60a3      	str	r3, [r4, #8]
  4076ce:	d009      	beq.n	4076e4 <setvbuf+0x148>
  4076d0:	2500      	movs	r5, #0
  4076d2:	4628      	mov	r0, r5
  4076d4:	b003      	add	sp, #12
  4076d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4076da:	60a3      	str	r3, [r4, #8]
  4076dc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4076de:	f015 0501 	ands.w	r5, r5, #1
  4076e2:	d1f5      	bne.n	4076d0 <setvbuf+0x134>
  4076e4:	0593      	lsls	r3, r2, #22
  4076e6:	d4c0      	bmi.n	40766a <setvbuf+0xce>
  4076e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4076ea:	f001 fee1 	bl	4094b0 <__retarget_lock_release_recursive>
  4076ee:	4628      	mov	r0, r5
  4076f0:	b003      	add	sp, #12
  4076f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4076f6:	60a6      	str	r6, [r4, #8]
  4076f8:	e7f0      	b.n	4076dc <setvbuf+0x140>
  4076fa:	4628      	mov	r0, r5
  4076fc:	f001 fb16 	bl	408d2c <__sinit>
  407700:	e7c7      	b.n	407692 <setvbuf+0xf6>
  407702:	f04f 35ff 	mov.w	r5, #4294967295
  407706:	e7b0      	b.n	40766a <setvbuf+0xce>
  407708:	f8dd 9000 	ldr.w	r9, [sp]
  40770c:	45b1      	cmp	r9, r6
  40770e:	d004      	beq.n	40771a <setvbuf+0x17e>
  407710:	4648      	mov	r0, r9
  407712:	f001 ff47 	bl	4095a4 <malloc>
  407716:	4607      	mov	r7, r0
  407718:	b920      	cbnz	r0, 407724 <setvbuf+0x188>
  40771a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40771e:	f04f 35ff 	mov.w	r5, #4294967295
  407722:	e792      	b.n	40764a <setvbuf+0xae>
  407724:	464e      	mov	r6, r9
  407726:	e783      	b.n	407630 <setvbuf+0x94>
  407728:	20400034 	.word	0x20400034

0040772c <strcat>:
  40772c:	0783      	lsls	r3, r0, #30
  40772e:	b510      	push	{r4, lr}
  407730:	4604      	mov	r4, r0
  407732:	d110      	bne.n	407756 <strcat+0x2a>
  407734:	6802      	ldr	r2, [r0, #0]
  407736:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  40773a:	ea23 0302 	bic.w	r3, r3, r2
  40773e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  407742:	d108      	bne.n	407756 <strcat+0x2a>
  407744:	f850 2f04 	ldr.w	r2, [r0, #4]!
  407748:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  40774c:	ea23 0302 	bic.w	r3, r3, r2
  407750:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  407754:	d0f6      	beq.n	407744 <strcat+0x18>
  407756:	7803      	ldrb	r3, [r0, #0]
  407758:	b11b      	cbz	r3, 407762 <strcat+0x36>
  40775a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40775e:	2b00      	cmp	r3, #0
  407760:	d1fb      	bne.n	40775a <strcat+0x2e>
  407762:	f000 f97b 	bl	407a5c <strcpy>
  407766:	4620      	mov	r0, r4
  407768:	bd10      	pop	{r4, pc}
  40776a:	bf00      	nop
	...
  407780:	eba2 0003 	sub.w	r0, r2, r3
  407784:	4770      	bx	lr
  407786:	bf00      	nop

00407788 <strcmp>:
  407788:	7802      	ldrb	r2, [r0, #0]
  40778a:	780b      	ldrb	r3, [r1, #0]
  40778c:	2a01      	cmp	r2, #1
  40778e:	bf28      	it	cs
  407790:	429a      	cmpcs	r2, r3
  407792:	d1f5      	bne.n	407780 <strcat+0x54>
  407794:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  407798:	ea40 0401 	orr.w	r4, r0, r1
  40779c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  4077a0:	f06f 0c00 	mvn.w	ip, #0
  4077a4:	ea4f 7244 	mov.w	r2, r4, lsl #29
  4077a8:	b312      	cbz	r2, 4077f0 <strcmp+0x68>
  4077aa:	ea80 0401 	eor.w	r4, r0, r1
  4077ae:	f014 0f07 	tst.w	r4, #7
  4077b2:	d16a      	bne.n	40788a <strcmp+0x102>
  4077b4:	f000 0407 	and.w	r4, r0, #7
  4077b8:	f020 0007 	bic.w	r0, r0, #7
  4077bc:	f004 0503 	and.w	r5, r4, #3
  4077c0:	f021 0107 	bic.w	r1, r1, #7
  4077c4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4077c8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  4077cc:	f014 0f04 	tst.w	r4, #4
  4077d0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  4077d4:	fa0c f405 	lsl.w	r4, ip, r5
  4077d8:	ea62 0204 	orn	r2, r2, r4
  4077dc:	ea66 0604 	orn	r6, r6, r4
  4077e0:	d00a      	beq.n	4077f8 <strcmp+0x70>
  4077e2:	ea63 0304 	orn	r3, r3, r4
  4077e6:	4662      	mov	r2, ip
  4077e8:	ea67 0704 	orn	r7, r7, r4
  4077ec:	4666      	mov	r6, ip
  4077ee:	e003      	b.n	4077f8 <strcmp+0x70>
  4077f0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  4077f4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  4077f8:	fa82 f54c 	uadd8	r5, r2, ip
  4077fc:	ea82 0406 	eor.w	r4, r2, r6
  407800:	faa4 f48c 	sel	r4, r4, ip
  407804:	bb6c      	cbnz	r4, 407862 <strcmp+0xda>
  407806:	fa83 f54c 	uadd8	r5, r3, ip
  40780a:	ea83 0507 	eor.w	r5, r3, r7
  40780e:	faa5 f58c 	sel	r5, r5, ip
  407812:	b995      	cbnz	r5, 40783a <strcmp+0xb2>
  407814:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  407818:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  40781c:	fa82 f54c 	uadd8	r5, r2, ip
  407820:	ea82 0406 	eor.w	r4, r2, r6
  407824:	faa4 f48c 	sel	r4, r4, ip
  407828:	fa83 f54c 	uadd8	r5, r3, ip
  40782c:	ea83 0507 	eor.w	r5, r3, r7
  407830:	faa5 f58c 	sel	r5, r5, ip
  407834:	4325      	orrs	r5, r4
  407836:	d0db      	beq.n	4077f0 <strcmp+0x68>
  407838:	b99c      	cbnz	r4, 407862 <strcmp+0xda>
  40783a:	ba2d      	rev	r5, r5
  40783c:	fab5 f485 	clz	r4, r5
  407840:	f024 0407 	bic.w	r4, r4, #7
  407844:	fa27 f104 	lsr.w	r1, r7, r4
  407848:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40784c:	fa23 f304 	lsr.w	r3, r3, r4
  407850:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  407854:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407858:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40785c:	eba0 0001 	sub.w	r0, r0, r1
  407860:	4770      	bx	lr
  407862:	ba24      	rev	r4, r4
  407864:	fab4 f484 	clz	r4, r4
  407868:	f024 0407 	bic.w	r4, r4, #7
  40786c:	fa26 f104 	lsr.w	r1, r6, r4
  407870:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  407874:	fa22 f204 	lsr.w	r2, r2, r4
  407878:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40787c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407880:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  407884:	eba0 0001 	sub.w	r0, r0, r1
  407888:	4770      	bx	lr
  40788a:	f014 0f03 	tst.w	r4, #3
  40788e:	d13c      	bne.n	40790a <strcmp+0x182>
  407890:	f010 0403 	ands.w	r4, r0, #3
  407894:	d128      	bne.n	4078e8 <strcmp+0x160>
  407896:	f850 2b08 	ldr.w	r2, [r0], #8
  40789a:	f851 3b08 	ldr.w	r3, [r1], #8
  40789e:	fa82 f54c 	uadd8	r5, r2, ip
  4078a2:	ea82 0503 	eor.w	r5, r2, r3
  4078a6:	faa5 f58c 	sel	r5, r5, ip
  4078aa:	b95d      	cbnz	r5, 4078c4 <strcmp+0x13c>
  4078ac:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4078b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4078b4:	fa82 f54c 	uadd8	r5, r2, ip
  4078b8:	ea82 0503 	eor.w	r5, r2, r3
  4078bc:	faa5 f58c 	sel	r5, r5, ip
  4078c0:	2d00      	cmp	r5, #0
  4078c2:	d0e8      	beq.n	407896 <strcmp+0x10e>
  4078c4:	ba2d      	rev	r5, r5
  4078c6:	fab5 f485 	clz	r4, r5
  4078ca:	f024 0407 	bic.w	r4, r4, #7
  4078ce:	fa23 f104 	lsr.w	r1, r3, r4
  4078d2:	fa22 f204 	lsr.w	r2, r2, r4
  4078d6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  4078da:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4078de:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4078e2:	eba0 0001 	sub.w	r0, r0, r1
  4078e6:	4770      	bx	lr
  4078e8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  4078ec:	f020 0003 	bic.w	r0, r0, #3
  4078f0:	f850 2b08 	ldr.w	r2, [r0], #8
  4078f4:	f021 0103 	bic.w	r1, r1, #3
  4078f8:	f851 3b08 	ldr.w	r3, [r1], #8
  4078fc:	fa0c f404 	lsl.w	r4, ip, r4
  407900:	ea62 0204 	orn	r2, r2, r4
  407904:	ea63 0304 	orn	r3, r3, r4
  407908:	e7c9      	b.n	40789e <strcmp+0x116>
  40790a:	f010 0403 	ands.w	r4, r0, #3
  40790e:	d01a      	beq.n	407946 <strcmp+0x1be>
  407910:	eba1 0104 	sub.w	r1, r1, r4
  407914:	f020 0003 	bic.w	r0, r0, #3
  407918:	07e4      	lsls	r4, r4, #31
  40791a:	f850 2b04 	ldr.w	r2, [r0], #4
  40791e:	d006      	beq.n	40792e <strcmp+0x1a6>
  407920:	d20f      	bcs.n	407942 <strcmp+0x1ba>
  407922:	788b      	ldrb	r3, [r1, #2]
  407924:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  407928:	1ae4      	subs	r4, r4, r3
  40792a:	d106      	bne.n	40793a <strcmp+0x1b2>
  40792c:	b12b      	cbz	r3, 40793a <strcmp+0x1b2>
  40792e:	78cb      	ldrb	r3, [r1, #3]
  407930:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  407934:	1ae4      	subs	r4, r4, r3
  407936:	d100      	bne.n	40793a <strcmp+0x1b2>
  407938:	b91b      	cbnz	r3, 407942 <strcmp+0x1ba>
  40793a:	4620      	mov	r0, r4
  40793c:	f85d 4b10 	ldr.w	r4, [sp], #16
  407940:	4770      	bx	lr
  407942:	f101 0104 	add.w	r1, r1, #4
  407946:	f850 2b04 	ldr.w	r2, [r0], #4
  40794a:	07cc      	lsls	r4, r1, #31
  40794c:	f021 0103 	bic.w	r1, r1, #3
  407950:	f851 3b04 	ldr.w	r3, [r1], #4
  407954:	d848      	bhi.n	4079e8 <strcmp+0x260>
  407956:	d224      	bcs.n	4079a2 <strcmp+0x21a>
  407958:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  40795c:	fa82 f54c 	uadd8	r5, r2, ip
  407960:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  407964:	faa5 f58c 	sel	r5, r5, ip
  407968:	d10a      	bne.n	407980 <strcmp+0x1f8>
  40796a:	b965      	cbnz	r5, 407986 <strcmp+0x1fe>
  40796c:	f851 3b04 	ldr.w	r3, [r1], #4
  407970:	ea84 0402 	eor.w	r4, r4, r2
  407974:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  407978:	d10e      	bne.n	407998 <strcmp+0x210>
  40797a:	f850 2b04 	ldr.w	r2, [r0], #4
  40797e:	e7eb      	b.n	407958 <strcmp+0x1d0>
  407980:	ea4f 2313 	mov.w	r3, r3, lsr #8
  407984:	e055      	b.n	407a32 <strcmp+0x2aa>
  407986:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  40798a:	d14d      	bne.n	407a28 <strcmp+0x2a0>
  40798c:	7808      	ldrb	r0, [r1, #0]
  40798e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  407992:	f1c0 0000 	rsb	r0, r0, #0
  407996:	4770      	bx	lr
  407998:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40799c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  4079a0:	e047      	b.n	407a32 <strcmp+0x2aa>
  4079a2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  4079a6:	fa82 f54c 	uadd8	r5, r2, ip
  4079aa:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  4079ae:	faa5 f58c 	sel	r5, r5, ip
  4079b2:	d10a      	bne.n	4079ca <strcmp+0x242>
  4079b4:	b965      	cbnz	r5, 4079d0 <strcmp+0x248>
  4079b6:	f851 3b04 	ldr.w	r3, [r1], #4
  4079ba:	ea84 0402 	eor.w	r4, r4, r2
  4079be:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  4079c2:	d10c      	bne.n	4079de <strcmp+0x256>
  4079c4:	f850 2b04 	ldr.w	r2, [r0], #4
  4079c8:	e7eb      	b.n	4079a2 <strcmp+0x21a>
  4079ca:	ea4f 4313 	mov.w	r3, r3, lsr #16
  4079ce:	e030      	b.n	407a32 <strcmp+0x2aa>
  4079d0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  4079d4:	d128      	bne.n	407a28 <strcmp+0x2a0>
  4079d6:	880b      	ldrh	r3, [r1, #0]
  4079d8:	ea4f 4212 	mov.w	r2, r2, lsr #16
  4079dc:	e029      	b.n	407a32 <strcmp+0x2aa>
  4079de:	ea4f 4212 	mov.w	r2, r2, lsr #16
  4079e2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  4079e6:	e024      	b.n	407a32 <strcmp+0x2aa>
  4079e8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  4079ec:	fa82 f54c 	uadd8	r5, r2, ip
  4079f0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  4079f4:	faa5 f58c 	sel	r5, r5, ip
  4079f8:	d10a      	bne.n	407a10 <strcmp+0x288>
  4079fa:	b965      	cbnz	r5, 407a16 <strcmp+0x28e>
  4079fc:	f851 3b04 	ldr.w	r3, [r1], #4
  407a00:	ea84 0402 	eor.w	r4, r4, r2
  407a04:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  407a08:	d109      	bne.n	407a1e <strcmp+0x296>
  407a0a:	f850 2b04 	ldr.w	r2, [r0], #4
  407a0e:	e7eb      	b.n	4079e8 <strcmp+0x260>
  407a10:	ea4f 6313 	mov.w	r3, r3, lsr #24
  407a14:	e00d      	b.n	407a32 <strcmp+0x2aa>
  407a16:	f015 0fff 	tst.w	r5, #255	; 0xff
  407a1a:	d105      	bne.n	407a28 <strcmp+0x2a0>
  407a1c:	680b      	ldr	r3, [r1, #0]
  407a1e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  407a22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  407a26:	e004      	b.n	407a32 <strcmp+0x2aa>
  407a28:	f04f 0000 	mov.w	r0, #0
  407a2c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  407a30:	4770      	bx	lr
  407a32:	ba12      	rev	r2, r2
  407a34:	ba1b      	rev	r3, r3
  407a36:	fa82 f44c 	uadd8	r4, r2, ip
  407a3a:	ea82 0403 	eor.w	r4, r2, r3
  407a3e:	faa4 f58c 	sel	r5, r4, ip
  407a42:	fab5 f485 	clz	r4, r5
  407a46:	fa02 f204 	lsl.w	r2, r2, r4
  407a4a:	fa03 f304 	lsl.w	r3, r3, r4
  407a4e:	ea4f 6012 	mov.w	r0, r2, lsr #24
  407a52:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  407a56:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  407a5a:	4770      	bx	lr

00407a5c <strcpy>:
  407a5c:	ea80 0201 	eor.w	r2, r0, r1
  407a60:	4684      	mov	ip, r0
  407a62:	f012 0f03 	tst.w	r2, #3
  407a66:	d14f      	bne.n	407b08 <strcpy+0xac>
  407a68:	f011 0f03 	tst.w	r1, #3
  407a6c:	d132      	bne.n	407ad4 <strcpy+0x78>
  407a6e:	f84d 4d04 	str.w	r4, [sp, #-4]!
  407a72:	f011 0f04 	tst.w	r1, #4
  407a76:	f851 3b04 	ldr.w	r3, [r1], #4
  407a7a:	d00b      	beq.n	407a94 <strcpy+0x38>
  407a7c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  407a80:	439a      	bics	r2, r3
  407a82:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  407a86:	bf04      	itt	eq
  407a88:	f84c 3b04 	streq.w	r3, [ip], #4
  407a8c:	f851 3b04 	ldreq.w	r3, [r1], #4
  407a90:	d116      	bne.n	407ac0 <strcpy+0x64>
  407a92:	bf00      	nop
  407a94:	f851 4b04 	ldr.w	r4, [r1], #4
  407a98:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  407a9c:	439a      	bics	r2, r3
  407a9e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  407aa2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  407aa6:	d10b      	bne.n	407ac0 <strcpy+0x64>
  407aa8:	f84c 3b04 	str.w	r3, [ip], #4
  407aac:	43a2      	bics	r2, r4
  407aae:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  407ab2:	bf04      	itt	eq
  407ab4:	f851 3b04 	ldreq.w	r3, [r1], #4
  407ab8:	f84c 4b04 	streq.w	r4, [ip], #4
  407abc:	d0ea      	beq.n	407a94 <strcpy+0x38>
  407abe:	4623      	mov	r3, r4
  407ac0:	f80c 3b01 	strb.w	r3, [ip], #1
  407ac4:	f013 0fff 	tst.w	r3, #255	; 0xff
  407ac8:	ea4f 2333 	mov.w	r3, r3, ror #8
  407acc:	d1f8      	bne.n	407ac0 <strcpy+0x64>
  407ace:	f85d 4b04 	ldr.w	r4, [sp], #4
  407ad2:	4770      	bx	lr
  407ad4:	f011 0f01 	tst.w	r1, #1
  407ad8:	d006      	beq.n	407ae8 <strcpy+0x8c>
  407ada:	f811 2b01 	ldrb.w	r2, [r1], #1
  407ade:	f80c 2b01 	strb.w	r2, [ip], #1
  407ae2:	2a00      	cmp	r2, #0
  407ae4:	bf08      	it	eq
  407ae6:	4770      	bxeq	lr
  407ae8:	f011 0f02 	tst.w	r1, #2
  407aec:	d0bf      	beq.n	407a6e <strcpy+0x12>
  407aee:	f831 2b02 	ldrh.w	r2, [r1], #2
  407af2:	f012 0fff 	tst.w	r2, #255	; 0xff
  407af6:	bf16      	itet	ne
  407af8:	f82c 2b02 	strhne.w	r2, [ip], #2
  407afc:	f88c 2000 	strbeq.w	r2, [ip]
  407b00:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  407b04:	d1b3      	bne.n	407a6e <strcpy+0x12>
  407b06:	4770      	bx	lr
  407b08:	f811 2b01 	ldrb.w	r2, [r1], #1
  407b0c:	f80c 2b01 	strb.w	r2, [ip], #1
  407b10:	2a00      	cmp	r2, #0
  407b12:	d1f9      	bne.n	407b08 <strcpy+0xac>
  407b14:	4770      	bx	lr
  407b16:	bf00      	nop
	...

00407b40 <strlen>:
  407b40:	f890 f000 	pld	[r0]
  407b44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  407b48:	f020 0107 	bic.w	r1, r0, #7
  407b4c:	f06f 0c00 	mvn.w	ip, #0
  407b50:	f010 0407 	ands.w	r4, r0, #7
  407b54:	f891 f020 	pld	[r1, #32]
  407b58:	f040 8049 	bne.w	407bee <strlen+0xae>
  407b5c:	f04f 0400 	mov.w	r4, #0
  407b60:	f06f 0007 	mvn.w	r0, #7
  407b64:	e9d1 2300 	ldrd	r2, r3, [r1]
  407b68:	f891 f040 	pld	[r1, #64]	; 0x40
  407b6c:	f100 0008 	add.w	r0, r0, #8
  407b70:	fa82 f24c 	uadd8	r2, r2, ip
  407b74:	faa4 f28c 	sel	r2, r4, ip
  407b78:	fa83 f34c 	uadd8	r3, r3, ip
  407b7c:	faa2 f38c 	sel	r3, r2, ip
  407b80:	bb4b      	cbnz	r3, 407bd6 <strlen+0x96>
  407b82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  407b86:	fa82 f24c 	uadd8	r2, r2, ip
  407b8a:	f100 0008 	add.w	r0, r0, #8
  407b8e:	faa4 f28c 	sel	r2, r4, ip
  407b92:	fa83 f34c 	uadd8	r3, r3, ip
  407b96:	faa2 f38c 	sel	r3, r2, ip
  407b9a:	b9e3      	cbnz	r3, 407bd6 <strlen+0x96>
  407b9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  407ba0:	fa82 f24c 	uadd8	r2, r2, ip
  407ba4:	f100 0008 	add.w	r0, r0, #8
  407ba8:	faa4 f28c 	sel	r2, r4, ip
  407bac:	fa83 f34c 	uadd8	r3, r3, ip
  407bb0:	faa2 f38c 	sel	r3, r2, ip
  407bb4:	b97b      	cbnz	r3, 407bd6 <strlen+0x96>
  407bb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  407bba:	f101 0120 	add.w	r1, r1, #32
  407bbe:	fa82 f24c 	uadd8	r2, r2, ip
  407bc2:	f100 0008 	add.w	r0, r0, #8
  407bc6:	faa4 f28c 	sel	r2, r4, ip
  407bca:	fa83 f34c 	uadd8	r3, r3, ip
  407bce:	faa2 f38c 	sel	r3, r2, ip
  407bd2:	2b00      	cmp	r3, #0
  407bd4:	d0c6      	beq.n	407b64 <strlen+0x24>
  407bd6:	2a00      	cmp	r2, #0
  407bd8:	bf04      	itt	eq
  407bda:	3004      	addeq	r0, #4
  407bdc:	461a      	moveq	r2, r3
  407bde:	ba12      	rev	r2, r2
  407be0:	fab2 f282 	clz	r2, r2
  407be4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  407be8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  407bec:	4770      	bx	lr
  407bee:	e9d1 2300 	ldrd	r2, r3, [r1]
  407bf2:	f004 0503 	and.w	r5, r4, #3
  407bf6:	f1c4 0000 	rsb	r0, r4, #0
  407bfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  407bfe:	f014 0f04 	tst.w	r4, #4
  407c02:	f891 f040 	pld	[r1, #64]	; 0x40
  407c06:	fa0c f505 	lsl.w	r5, ip, r5
  407c0a:	ea62 0205 	orn	r2, r2, r5
  407c0e:	bf1c      	itt	ne
  407c10:	ea63 0305 	ornne	r3, r3, r5
  407c14:	4662      	movne	r2, ip
  407c16:	f04f 0400 	mov.w	r4, #0
  407c1a:	e7a9      	b.n	407b70 <strlen+0x30>

00407c1c <strncmp>:
  407c1c:	2a00      	cmp	r2, #0
  407c1e:	d041      	beq.n	407ca4 <strncmp+0x88>
  407c20:	ea40 0301 	orr.w	r3, r0, r1
  407c24:	f013 0303 	ands.w	r3, r3, #3
  407c28:	b4f0      	push	{r4, r5, r6, r7}
  407c2a:	d125      	bne.n	407c78 <strncmp+0x5c>
  407c2c:	2a03      	cmp	r2, #3
  407c2e:	d923      	bls.n	407c78 <strncmp+0x5c>
  407c30:	6804      	ldr	r4, [r0, #0]
  407c32:	680d      	ldr	r5, [r1, #0]
  407c34:	42ac      	cmp	r4, r5
  407c36:	d11f      	bne.n	407c78 <strncmp+0x5c>
  407c38:	3a04      	subs	r2, #4
  407c3a:	d038      	beq.n	407cae <strncmp+0x92>
  407c3c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  407c40:	ea25 0404 	bic.w	r4, r5, r4
  407c44:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  407c48:	d12e      	bne.n	407ca8 <strncmp+0x8c>
  407c4a:	3004      	adds	r0, #4
  407c4c:	3104      	adds	r1, #4
  407c4e:	e00f      	b.n	407c70 <strncmp+0x54>
  407c50:	f850 3b04 	ldr.w	r3, [r0], #4
  407c54:	680e      	ldr	r6, [r1, #0]
  407c56:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
  407c5a:	42b3      	cmp	r3, r6
  407c5c:	ea24 0403 	bic.w	r4, r4, r3
  407c60:	f101 0104 	add.w	r1, r1, #4
  407c64:	d126      	bne.n	407cb4 <strncmp+0x98>
  407c66:	3a04      	subs	r2, #4
  407c68:	d021      	beq.n	407cae <strncmp+0x92>
  407c6a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  407c6e:	d11b      	bne.n	407ca8 <strncmp+0x8c>
  407c70:	2a03      	cmp	r2, #3
  407c72:	4607      	mov	r7, r0
  407c74:	460d      	mov	r5, r1
  407c76:	d8eb      	bhi.n	407c50 <strncmp+0x34>
  407c78:	7805      	ldrb	r5, [r0, #0]
  407c7a:	780c      	ldrb	r4, [r1, #0]
  407c7c:	42ac      	cmp	r4, r5
  407c7e:	f102 33ff 	add.w	r3, r2, #4294967295
  407c82:	d11a      	bne.n	407cba <strncmp+0x9e>
  407c84:	b183      	cbz	r3, 407ca8 <strncmp+0x8c>
  407c86:	b914      	cbnz	r4, 407c8e <strncmp+0x72>
  407c88:	e00e      	b.n	407ca8 <strncmp+0x8c>
  407c8a:	b16b      	cbz	r3, 407ca8 <strncmp+0x8c>
  407c8c:	b17a      	cbz	r2, 407cae <strncmp+0x92>
  407c8e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  407c92:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  407c96:	42a2      	cmp	r2, r4
  407c98:	f103 33ff 	add.w	r3, r3, #4294967295
  407c9c:	d0f5      	beq.n	407c8a <strncmp+0x6e>
  407c9e:	1b10      	subs	r0, r2, r4
  407ca0:	bcf0      	pop	{r4, r5, r6, r7}
  407ca2:	4770      	bx	lr
  407ca4:	4610      	mov	r0, r2
  407ca6:	4770      	bx	lr
  407ca8:	2000      	movs	r0, #0
  407caa:	bcf0      	pop	{r4, r5, r6, r7}
  407cac:	4770      	bx	lr
  407cae:	4610      	mov	r0, r2
  407cb0:	bcf0      	pop	{r4, r5, r6, r7}
  407cb2:	4770      	bx	lr
  407cb4:	4629      	mov	r1, r5
  407cb6:	4638      	mov	r0, r7
  407cb8:	e7de      	b.n	407c78 <strncmp+0x5c>
  407cba:	462a      	mov	r2, r5
  407cbc:	e7ef      	b.n	407c9e <strncmp+0x82>
  407cbe:	bf00      	nop

00407cc0 <__sprint_r.part.0>:
  407cc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407cc4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  407cc6:	049c      	lsls	r4, r3, #18
  407cc8:	4693      	mov	fp, r2
  407cca:	d52f      	bpl.n	407d2c <__sprint_r.part.0+0x6c>
  407ccc:	6893      	ldr	r3, [r2, #8]
  407cce:	6812      	ldr	r2, [r2, #0]
  407cd0:	b353      	cbz	r3, 407d28 <__sprint_r.part.0+0x68>
  407cd2:	460e      	mov	r6, r1
  407cd4:	4607      	mov	r7, r0
  407cd6:	f102 0908 	add.w	r9, r2, #8
  407cda:	e919 0420 	ldmdb	r9, {r5, sl}
  407cde:	ea5f 089a 	movs.w	r8, sl, lsr #2
  407ce2:	d017      	beq.n	407d14 <__sprint_r.part.0+0x54>
  407ce4:	3d04      	subs	r5, #4
  407ce6:	2400      	movs	r4, #0
  407ce8:	e001      	b.n	407cee <__sprint_r.part.0+0x2e>
  407cea:	45a0      	cmp	r8, r4
  407cec:	d010      	beq.n	407d10 <__sprint_r.part.0+0x50>
  407cee:	4632      	mov	r2, r6
  407cf0:	f855 1f04 	ldr.w	r1, [r5, #4]!
  407cf4:	4638      	mov	r0, r7
  407cf6:	f001 f8bb 	bl	408e70 <_fputwc_r>
  407cfa:	1c43      	adds	r3, r0, #1
  407cfc:	f104 0401 	add.w	r4, r4, #1
  407d00:	d1f3      	bne.n	407cea <__sprint_r.part.0+0x2a>
  407d02:	2300      	movs	r3, #0
  407d04:	f8cb 3008 	str.w	r3, [fp, #8]
  407d08:	f8cb 3004 	str.w	r3, [fp, #4]
  407d0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d10:	f8db 3008 	ldr.w	r3, [fp, #8]
  407d14:	f02a 0a03 	bic.w	sl, sl, #3
  407d18:	eba3 030a 	sub.w	r3, r3, sl
  407d1c:	f8cb 3008 	str.w	r3, [fp, #8]
  407d20:	f109 0908 	add.w	r9, r9, #8
  407d24:	2b00      	cmp	r3, #0
  407d26:	d1d8      	bne.n	407cda <__sprint_r.part.0+0x1a>
  407d28:	2000      	movs	r0, #0
  407d2a:	e7ea      	b.n	407d02 <__sprint_r.part.0+0x42>
  407d2c:	f001 fa0a 	bl	409144 <__sfvwrite_r>
  407d30:	2300      	movs	r3, #0
  407d32:	f8cb 3008 	str.w	r3, [fp, #8]
  407d36:	f8cb 3004 	str.w	r3, [fp, #4]
  407d3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d3e:	bf00      	nop

00407d40 <_vfiprintf_r>:
  407d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407d44:	b0ad      	sub	sp, #180	; 0xb4
  407d46:	461d      	mov	r5, r3
  407d48:	468b      	mov	fp, r1
  407d4a:	4690      	mov	r8, r2
  407d4c:	9307      	str	r3, [sp, #28]
  407d4e:	9006      	str	r0, [sp, #24]
  407d50:	b118      	cbz	r0, 407d5a <_vfiprintf_r+0x1a>
  407d52:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407d54:	2b00      	cmp	r3, #0
  407d56:	f000 80f3 	beq.w	407f40 <_vfiprintf_r+0x200>
  407d5a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407d5e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  407d62:	07df      	lsls	r7, r3, #31
  407d64:	b281      	uxth	r1, r0
  407d66:	d402      	bmi.n	407d6e <_vfiprintf_r+0x2e>
  407d68:	058e      	lsls	r6, r1, #22
  407d6a:	f140 80fc 	bpl.w	407f66 <_vfiprintf_r+0x226>
  407d6e:	048c      	lsls	r4, r1, #18
  407d70:	d40a      	bmi.n	407d88 <_vfiprintf_r+0x48>
  407d72:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407d76:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  407d7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  407d7e:	f8ab 100c 	strh.w	r1, [fp, #12]
  407d82:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  407d86:	b289      	uxth	r1, r1
  407d88:	0708      	lsls	r0, r1, #28
  407d8a:	f140 80b3 	bpl.w	407ef4 <_vfiprintf_r+0x1b4>
  407d8e:	f8db 3010 	ldr.w	r3, [fp, #16]
  407d92:	2b00      	cmp	r3, #0
  407d94:	f000 80ae 	beq.w	407ef4 <_vfiprintf_r+0x1b4>
  407d98:	f001 031a 	and.w	r3, r1, #26
  407d9c:	2b0a      	cmp	r3, #10
  407d9e:	f000 80b5 	beq.w	407f0c <_vfiprintf_r+0x1cc>
  407da2:	2300      	movs	r3, #0
  407da4:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  407da8:	930b      	str	r3, [sp, #44]	; 0x2c
  407daa:	9311      	str	r3, [sp, #68]	; 0x44
  407dac:	9310      	str	r3, [sp, #64]	; 0x40
  407dae:	9303      	str	r3, [sp, #12]
  407db0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  407db4:	46ca      	mov	sl, r9
  407db6:	f8cd b010 	str.w	fp, [sp, #16]
  407dba:	f898 3000 	ldrb.w	r3, [r8]
  407dbe:	4644      	mov	r4, r8
  407dc0:	b1fb      	cbz	r3, 407e02 <_vfiprintf_r+0xc2>
  407dc2:	2b25      	cmp	r3, #37	; 0x25
  407dc4:	d102      	bne.n	407dcc <_vfiprintf_r+0x8c>
  407dc6:	e01c      	b.n	407e02 <_vfiprintf_r+0xc2>
  407dc8:	2b25      	cmp	r3, #37	; 0x25
  407dca:	d003      	beq.n	407dd4 <_vfiprintf_r+0x94>
  407dcc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  407dd0:	2b00      	cmp	r3, #0
  407dd2:	d1f9      	bne.n	407dc8 <_vfiprintf_r+0x88>
  407dd4:	eba4 0508 	sub.w	r5, r4, r8
  407dd8:	b19d      	cbz	r5, 407e02 <_vfiprintf_r+0xc2>
  407dda:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407ddc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407dde:	f8ca 8000 	str.w	r8, [sl]
  407de2:	3301      	adds	r3, #1
  407de4:	442a      	add	r2, r5
  407de6:	2b07      	cmp	r3, #7
  407de8:	f8ca 5004 	str.w	r5, [sl, #4]
  407dec:	9211      	str	r2, [sp, #68]	; 0x44
  407dee:	9310      	str	r3, [sp, #64]	; 0x40
  407df0:	dd7a      	ble.n	407ee8 <_vfiprintf_r+0x1a8>
  407df2:	2a00      	cmp	r2, #0
  407df4:	f040 84b0 	bne.w	408758 <_vfiprintf_r+0xa18>
  407df8:	9b03      	ldr	r3, [sp, #12]
  407dfa:	9210      	str	r2, [sp, #64]	; 0x40
  407dfc:	442b      	add	r3, r5
  407dfe:	46ca      	mov	sl, r9
  407e00:	9303      	str	r3, [sp, #12]
  407e02:	7823      	ldrb	r3, [r4, #0]
  407e04:	2b00      	cmp	r3, #0
  407e06:	f000 83e0 	beq.w	4085ca <_vfiprintf_r+0x88a>
  407e0a:	2000      	movs	r0, #0
  407e0c:	f04f 0300 	mov.w	r3, #0
  407e10:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  407e14:	f104 0801 	add.w	r8, r4, #1
  407e18:	7862      	ldrb	r2, [r4, #1]
  407e1a:	4605      	mov	r5, r0
  407e1c:	4606      	mov	r6, r0
  407e1e:	4603      	mov	r3, r0
  407e20:	f04f 34ff 	mov.w	r4, #4294967295
  407e24:	f108 0801 	add.w	r8, r8, #1
  407e28:	f1a2 0120 	sub.w	r1, r2, #32
  407e2c:	2958      	cmp	r1, #88	; 0x58
  407e2e:	f200 82de 	bhi.w	4083ee <_vfiprintf_r+0x6ae>
  407e32:	e8df f011 	tbh	[pc, r1, lsl #1]
  407e36:	0221      	.short	0x0221
  407e38:	02dc02dc 	.word	0x02dc02dc
  407e3c:	02dc0229 	.word	0x02dc0229
  407e40:	02dc02dc 	.word	0x02dc02dc
  407e44:	02dc02dc 	.word	0x02dc02dc
  407e48:	028902dc 	.word	0x028902dc
  407e4c:	02dc0295 	.word	0x02dc0295
  407e50:	02bd00a2 	.word	0x02bd00a2
  407e54:	019f02dc 	.word	0x019f02dc
  407e58:	01a401a4 	.word	0x01a401a4
  407e5c:	01a401a4 	.word	0x01a401a4
  407e60:	01a401a4 	.word	0x01a401a4
  407e64:	01a401a4 	.word	0x01a401a4
  407e68:	02dc01a4 	.word	0x02dc01a4
  407e6c:	02dc02dc 	.word	0x02dc02dc
  407e70:	02dc02dc 	.word	0x02dc02dc
  407e74:	02dc02dc 	.word	0x02dc02dc
  407e78:	02dc02dc 	.word	0x02dc02dc
  407e7c:	01b202dc 	.word	0x01b202dc
  407e80:	02dc02dc 	.word	0x02dc02dc
  407e84:	02dc02dc 	.word	0x02dc02dc
  407e88:	02dc02dc 	.word	0x02dc02dc
  407e8c:	02dc02dc 	.word	0x02dc02dc
  407e90:	02dc02dc 	.word	0x02dc02dc
  407e94:	02dc0197 	.word	0x02dc0197
  407e98:	02dc02dc 	.word	0x02dc02dc
  407e9c:	02dc02dc 	.word	0x02dc02dc
  407ea0:	02dc019b 	.word	0x02dc019b
  407ea4:	025302dc 	.word	0x025302dc
  407ea8:	02dc02dc 	.word	0x02dc02dc
  407eac:	02dc02dc 	.word	0x02dc02dc
  407eb0:	02dc02dc 	.word	0x02dc02dc
  407eb4:	02dc02dc 	.word	0x02dc02dc
  407eb8:	02dc02dc 	.word	0x02dc02dc
  407ebc:	021b025a 	.word	0x021b025a
  407ec0:	02dc02dc 	.word	0x02dc02dc
  407ec4:	026e02dc 	.word	0x026e02dc
  407ec8:	02dc021b 	.word	0x02dc021b
  407ecc:	027302dc 	.word	0x027302dc
  407ed0:	01f502dc 	.word	0x01f502dc
  407ed4:	02090182 	.word	0x02090182
  407ed8:	02dc02d7 	.word	0x02dc02d7
  407edc:	02dc029a 	.word	0x02dc029a
  407ee0:	02dc00a7 	.word	0x02dc00a7
  407ee4:	022e02dc 	.word	0x022e02dc
  407ee8:	f10a 0a08 	add.w	sl, sl, #8
  407eec:	9b03      	ldr	r3, [sp, #12]
  407eee:	442b      	add	r3, r5
  407ef0:	9303      	str	r3, [sp, #12]
  407ef2:	e786      	b.n	407e02 <_vfiprintf_r+0xc2>
  407ef4:	4659      	mov	r1, fp
  407ef6:	9806      	ldr	r0, [sp, #24]
  407ef8:	f000 fdac 	bl	408a54 <__swsetup_r>
  407efc:	bb18      	cbnz	r0, 407f46 <_vfiprintf_r+0x206>
  407efe:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  407f02:	f001 031a 	and.w	r3, r1, #26
  407f06:	2b0a      	cmp	r3, #10
  407f08:	f47f af4b 	bne.w	407da2 <_vfiprintf_r+0x62>
  407f0c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  407f10:	2b00      	cmp	r3, #0
  407f12:	f6ff af46 	blt.w	407da2 <_vfiprintf_r+0x62>
  407f16:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407f1a:	07db      	lsls	r3, r3, #31
  407f1c:	d405      	bmi.n	407f2a <_vfiprintf_r+0x1ea>
  407f1e:	058f      	lsls	r7, r1, #22
  407f20:	d403      	bmi.n	407f2a <_vfiprintf_r+0x1ea>
  407f22:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  407f26:	f001 fac3 	bl	4094b0 <__retarget_lock_release_recursive>
  407f2a:	462b      	mov	r3, r5
  407f2c:	4642      	mov	r2, r8
  407f2e:	4659      	mov	r1, fp
  407f30:	9806      	ldr	r0, [sp, #24]
  407f32:	f000 fd4d 	bl	4089d0 <__sbprintf>
  407f36:	9003      	str	r0, [sp, #12]
  407f38:	9803      	ldr	r0, [sp, #12]
  407f3a:	b02d      	add	sp, #180	; 0xb4
  407f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407f40:	f000 fef4 	bl	408d2c <__sinit>
  407f44:	e709      	b.n	407d5a <_vfiprintf_r+0x1a>
  407f46:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407f4a:	07d9      	lsls	r1, r3, #31
  407f4c:	d404      	bmi.n	407f58 <_vfiprintf_r+0x218>
  407f4e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  407f52:	059a      	lsls	r2, r3, #22
  407f54:	f140 84aa 	bpl.w	4088ac <_vfiprintf_r+0xb6c>
  407f58:	f04f 33ff 	mov.w	r3, #4294967295
  407f5c:	9303      	str	r3, [sp, #12]
  407f5e:	9803      	ldr	r0, [sp, #12]
  407f60:	b02d      	add	sp, #180	; 0xb4
  407f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407f66:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  407f6a:	f001 fa9f 	bl	4094ac <__retarget_lock_acquire_recursive>
  407f6e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  407f72:	b281      	uxth	r1, r0
  407f74:	e6fb      	b.n	407d6e <_vfiprintf_r+0x2e>
  407f76:	4276      	negs	r6, r6
  407f78:	9207      	str	r2, [sp, #28]
  407f7a:	f043 0304 	orr.w	r3, r3, #4
  407f7e:	f898 2000 	ldrb.w	r2, [r8]
  407f82:	e74f      	b.n	407e24 <_vfiprintf_r+0xe4>
  407f84:	9608      	str	r6, [sp, #32]
  407f86:	069e      	lsls	r6, r3, #26
  407f88:	f100 8450 	bmi.w	40882c <_vfiprintf_r+0xaec>
  407f8c:	9907      	ldr	r1, [sp, #28]
  407f8e:	06dd      	lsls	r5, r3, #27
  407f90:	460a      	mov	r2, r1
  407f92:	f100 83ef 	bmi.w	408774 <_vfiprintf_r+0xa34>
  407f96:	0658      	lsls	r0, r3, #25
  407f98:	f140 83ec 	bpl.w	408774 <_vfiprintf_r+0xa34>
  407f9c:	880e      	ldrh	r6, [r1, #0]
  407f9e:	3104      	adds	r1, #4
  407fa0:	2700      	movs	r7, #0
  407fa2:	2201      	movs	r2, #1
  407fa4:	9107      	str	r1, [sp, #28]
  407fa6:	f04f 0100 	mov.w	r1, #0
  407faa:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  407fae:	2500      	movs	r5, #0
  407fb0:	1c61      	adds	r1, r4, #1
  407fb2:	f000 8116 	beq.w	4081e2 <_vfiprintf_r+0x4a2>
  407fb6:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  407fba:	9102      	str	r1, [sp, #8]
  407fbc:	ea56 0107 	orrs.w	r1, r6, r7
  407fc0:	f040 8114 	bne.w	4081ec <_vfiprintf_r+0x4ac>
  407fc4:	2c00      	cmp	r4, #0
  407fc6:	f040 835c 	bne.w	408682 <_vfiprintf_r+0x942>
  407fca:	2a00      	cmp	r2, #0
  407fcc:	f040 83b7 	bne.w	40873e <_vfiprintf_r+0x9fe>
  407fd0:	f013 0301 	ands.w	r3, r3, #1
  407fd4:	9305      	str	r3, [sp, #20]
  407fd6:	f000 8457 	beq.w	408888 <_vfiprintf_r+0xb48>
  407fda:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  407fde:	2330      	movs	r3, #48	; 0x30
  407fe0:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  407fe4:	9b05      	ldr	r3, [sp, #20]
  407fe6:	42a3      	cmp	r3, r4
  407fe8:	bfb8      	it	lt
  407fea:	4623      	movlt	r3, r4
  407fec:	9301      	str	r3, [sp, #4]
  407fee:	b10d      	cbz	r5, 407ff4 <_vfiprintf_r+0x2b4>
  407ff0:	3301      	adds	r3, #1
  407ff2:	9301      	str	r3, [sp, #4]
  407ff4:	9b02      	ldr	r3, [sp, #8]
  407ff6:	f013 0302 	ands.w	r3, r3, #2
  407ffa:	9309      	str	r3, [sp, #36]	; 0x24
  407ffc:	d002      	beq.n	408004 <_vfiprintf_r+0x2c4>
  407ffe:	9b01      	ldr	r3, [sp, #4]
  408000:	3302      	adds	r3, #2
  408002:	9301      	str	r3, [sp, #4]
  408004:	9b02      	ldr	r3, [sp, #8]
  408006:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40800a:	930a      	str	r3, [sp, #40]	; 0x28
  40800c:	f040 8217 	bne.w	40843e <_vfiprintf_r+0x6fe>
  408010:	9b08      	ldr	r3, [sp, #32]
  408012:	9a01      	ldr	r2, [sp, #4]
  408014:	1a9d      	subs	r5, r3, r2
  408016:	2d00      	cmp	r5, #0
  408018:	f340 8211 	ble.w	40843e <_vfiprintf_r+0x6fe>
  40801c:	2d10      	cmp	r5, #16
  40801e:	f340 8490 	ble.w	408942 <_vfiprintf_r+0xc02>
  408022:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408024:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408026:	4ec4      	ldr	r6, [pc, #784]	; (408338 <_vfiprintf_r+0x5f8>)
  408028:	46d6      	mov	lr, sl
  40802a:	2710      	movs	r7, #16
  40802c:	46a2      	mov	sl, r4
  40802e:	4619      	mov	r1, r3
  408030:	9c06      	ldr	r4, [sp, #24]
  408032:	e007      	b.n	408044 <_vfiprintf_r+0x304>
  408034:	f101 0c02 	add.w	ip, r1, #2
  408038:	f10e 0e08 	add.w	lr, lr, #8
  40803c:	4601      	mov	r1, r0
  40803e:	3d10      	subs	r5, #16
  408040:	2d10      	cmp	r5, #16
  408042:	dd11      	ble.n	408068 <_vfiprintf_r+0x328>
  408044:	1c48      	adds	r0, r1, #1
  408046:	3210      	adds	r2, #16
  408048:	2807      	cmp	r0, #7
  40804a:	9211      	str	r2, [sp, #68]	; 0x44
  40804c:	e88e 00c0 	stmia.w	lr, {r6, r7}
  408050:	9010      	str	r0, [sp, #64]	; 0x40
  408052:	ddef      	ble.n	408034 <_vfiprintf_r+0x2f4>
  408054:	2a00      	cmp	r2, #0
  408056:	f040 81e4 	bne.w	408422 <_vfiprintf_r+0x6e2>
  40805a:	3d10      	subs	r5, #16
  40805c:	2d10      	cmp	r5, #16
  40805e:	4611      	mov	r1, r2
  408060:	f04f 0c01 	mov.w	ip, #1
  408064:	46ce      	mov	lr, r9
  408066:	dced      	bgt.n	408044 <_vfiprintf_r+0x304>
  408068:	4654      	mov	r4, sl
  40806a:	4661      	mov	r1, ip
  40806c:	46f2      	mov	sl, lr
  40806e:	442a      	add	r2, r5
  408070:	2907      	cmp	r1, #7
  408072:	9211      	str	r2, [sp, #68]	; 0x44
  408074:	f8ca 6000 	str.w	r6, [sl]
  408078:	f8ca 5004 	str.w	r5, [sl, #4]
  40807c:	9110      	str	r1, [sp, #64]	; 0x40
  40807e:	f300 82ec 	bgt.w	40865a <_vfiprintf_r+0x91a>
  408082:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408086:	f10a 0a08 	add.w	sl, sl, #8
  40808a:	1c48      	adds	r0, r1, #1
  40808c:	2d00      	cmp	r5, #0
  40808e:	f040 81de 	bne.w	40844e <_vfiprintf_r+0x70e>
  408092:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408094:	2b00      	cmp	r3, #0
  408096:	f000 81f8 	beq.w	40848a <_vfiprintf_r+0x74a>
  40809a:	3202      	adds	r2, #2
  40809c:	a90e      	add	r1, sp, #56	; 0x38
  40809e:	2302      	movs	r3, #2
  4080a0:	2807      	cmp	r0, #7
  4080a2:	9211      	str	r2, [sp, #68]	; 0x44
  4080a4:	9010      	str	r0, [sp, #64]	; 0x40
  4080a6:	e88a 000a 	stmia.w	sl, {r1, r3}
  4080aa:	f340 81ea 	ble.w	408482 <_vfiprintf_r+0x742>
  4080ae:	2a00      	cmp	r2, #0
  4080b0:	f040 838c 	bne.w	4087cc <_vfiprintf_r+0xa8c>
  4080b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4080b6:	2b80      	cmp	r3, #128	; 0x80
  4080b8:	f04f 0001 	mov.w	r0, #1
  4080bc:	4611      	mov	r1, r2
  4080be:	46ca      	mov	sl, r9
  4080c0:	f040 81e7 	bne.w	408492 <_vfiprintf_r+0x752>
  4080c4:	9b08      	ldr	r3, [sp, #32]
  4080c6:	9d01      	ldr	r5, [sp, #4]
  4080c8:	1b5e      	subs	r6, r3, r5
  4080ca:	2e00      	cmp	r6, #0
  4080cc:	f340 81e1 	ble.w	408492 <_vfiprintf_r+0x752>
  4080d0:	2e10      	cmp	r6, #16
  4080d2:	4d9a      	ldr	r5, [pc, #616]	; (40833c <_vfiprintf_r+0x5fc>)
  4080d4:	f340 8450 	ble.w	408978 <_vfiprintf_r+0xc38>
  4080d8:	46d4      	mov	ip, sl
  4080da:	2710      	movs	r7, #16
  4080dc:	46a2      	mov	sl, r4
  4080de:	9c06      	ldr	r4, [sp, #24]
  4080e0:	e007      	b.n	4080f2 <_vfiprintf_r+0x3b2>
  4080e2:	f101 0e02 	add.w	lr, r1, #2
  4080e6:	f10c 0c08 	add.w	ip, ip, #8
  4080ea:	4601      	mov	r1, r0
  4080ec:	3e10      	subs	r6, #16
  4080ee:	2e10      	cmp	r6, #16
  4080f0:	dd11      	ble.n	408116 <_vfiprintf_r+0x3d6>
  4080f2:	1c48      	adds	r0, r1, #1
  4080f4:	3210      	adds	r2, #16
  4080f6:	2807      	cmp	r0, #7
  4080f8:	9211      	str	r2, [sp, #68]	; 0x44
  4080fa:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4080fe:	9010      	str	r0, [sp, #64]	; 0x40
  408100:	ddef      	ble.n	4080e2 <_vfiprintf_r+0x3a2>
  408102:	2a00      	cmp	r2, #0
  408104:	f040 829d 	bne.w	408642 <_vfiprintf_r+0x902>
  408108:	3e10      	subs	r6, #16
  40810a:	2e10      	cmp	r6, #16
  40810c:	f04f 0e01 	mov.w	lr, #1
  408110:	4611      	mov	r1, r2
  408112:	46cc      	mov	ip, r9
  408114:	dced      	bgt.n	4080f2 <_vfiprintf_r+0x3b2>
  408116:	4654      	mov	r4, sl
  408118:	46e2      	mov	sl, ip
  40811a:	4432      	add	r2, r6
  40811c:	f1be 0f07 	cmp.w	lr, #7
  408120:	9211      	str	r2, [sp, #68]	; 0x44
  408122:	e88a 0060 	stmia.w	sl, {r5, r6}
  408126:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40812a:	f300 8369 	bgt.w	408800 <_vfiprintf_r+0xac0>
  40812e:	f10a 0a08 	add.w	sl, sl, #8
  408132:	f10e 0001 	add.w	r0, lr, #1
  408136:	4671      	mov	r1, lr
  408138:	e1ab      	b.n	408492 <_vfiprintf_r+0x752>
  40813a:	9608      	str	r6, [sp, #32]
  40813c:	f013 0220 	ands.w	r2, r3, #32
  408140:	f040 838c 	bne.w	40885c <_vfiprintf_r+0xb1c>
  408144:	f013 0110 	ands.w	r1, r3, #16
  408148:	f040 831a 	bne.w	408780 <_vfiprintf_r+0xa40>
  40814c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  408150:	f000 8316 	beq.w	408780 <_vfiprintf_r+0xa40>
  408154:	9807      	ldr	r0, [sp, #28]
  408156:	460a      	mov	r2, r1
  408158:	4601      	mov	r1, r0
  40815a:	3104      	adds	r1, #4
  40815c:	8806      	ldrh	r6, [r0, #0]
  40815e:	9107      	str	r1, [sp, #28]
  408160:	2700      	movs	r7, #0
  408162:	e720      	b.n	407fa6 <_vfiprintf_r+0x266>
  408164:	9608      	str	r6, [sp, #32]
  408166:	f043 0310 	orr.w	r3, r3, #16
  40816a:	e7e7      	b.n	40813c <_vfiprintf_r+0x3fc>
  40816c:	9608      	str	r6, [sp, #32]
  40816e:	f043 0310 	orr.w	r3, r3, #16
  408172:	e708      	b.n	407f86 <_vfiprintf_r+0x246>
  408174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408178:	f898 2000 	ldrb.w	r2, [r8]
  40817c:	e652      	b.n	407e24 <_vfiprintf_r+0xe4>
  40817e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  408182:	2600      	movs	r6, #0
  408184:	f818 2b01 	ldrb.w	r2, [r8], #1
  408188:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40818c:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  408190:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  408194:	2909      	cmp	r1, #9
  408196:	d9f5      	bls.n	408184 <_vfiprintf_r+0x444>
  408198:	e646      	b.n	407e28 <_vfiprintf_r+0xe8>
  40819a:	9608      	str	r6, [sp, #32]
  40819c:	2800      	cmp	r0, #0
  40819e:	f040 8408 	bne.w	4089b2 <_vfiprintf_r+0xc72>
  4081a2:	f043 0310 	orr.w	r3, r3, #16
  4081a6:	069e      	lsls	r6, r3, #26
  4081a8:	f100 834c 	bmi.w	408844 <_vfiprintf_r+0xb04>
  4081ac:	06dd      	lsls	r5, r3, #27
  4081ae:	f100 82f3 	bmi.w	408798 <_vfiprintf_r+0xa58>
  4081b2:	0658      	lsls	r0, r3, #25
  4081b4:	f140 82f0 	bpl.w	408798 <_vfiprintf_r+0xa58>
  4081b8:	9d07      	ldr	r5, [sp, #28]
  4081ba:	f9b5 6000 	ldrsh.w	r6, [r5]
  4081be:	462a      	mov	r2, r5
  4081c0:	17f7      	asrs	r7, r6, #31
  4081c2:	3204      	adds	r2, #4
  4081c4:	4630      	mov	r0, r6
  4081c6:	4639      	mov	r1, r7
  4081c8:	9207      	str	r2, [sp, #28]
  4081ca:	2800      	cmp	r0, #0
  4081cc:	f171 0200 	sbcs.w	r2, r1, #0
  4081d0:	f2c0 835d 	blt.w	40888e <_vfiprintf_r+0xb4e>
  4081d4:	1c61      	adds	r1, r4, #1
  4081d6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4081da:	f04f 0201 	mov.w	r2, #1
  4081de:	f47f aeea 	bne.w	407fb6 <_vfiprintf_r+0x276>
  4081e2:	ea56 0107 	orrs.w	r1, r6, r7
  4081e6:	f000 824d 	beq.w	408684 <_vfiprintf_r+0x944>
  4081ea:	9302      	str	r3, [sp, #8]
  4081ec:	2a01      	cmp	r2, #1
  4081ee:	f000 828c 	beq.w	40870a <_vfiprintf_r+0x9ca>
  4081f2:	2a02      	cmp	r2, #2
  4081f4:	f040 825c 	bne.w	4086b0 <_vfiprintf_r+0x970>
  4081f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4081fa:	46cb      	mov	fp, r9
  4081fc:	0933      	lsrs	r3, r6, #4
  4081fe:	f006 010f 	and.w	r1, r6, #15
  408202:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  408206:	093a      	lsrs	r2, r7, #4
  408208:	461e      	mov	r6, r3
  40820a:	4617      	mov	r7, r2
  40820c:	5c43      	ldrb	r3, [r0, r1]
  40820e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  408212:	ea56 0307 	orrs.w	r3, r6, r7
  408216:	d1f1      	bne.n	4081fc <_vfiprintf_r+0x4bc>
  408218:	eba9 030b 	sub.w	r3, r9, fp
  40821c:	9305      	str	r3, [sp, #20]
  40821e:	e6e1      	b.n	407fe4 <_vfiprintf_r+0x2a4>
  408220:	2800      	cmp	r0, #0
  408222:	f040 83c0 	bne.w	4089a6 <_vfiprintf_r+0xc66>
  408226:	0699      	lsls	r1, r3, #26
  408228:	f100 8367 	bmi.w	4088fa <_vfiprintf_r+0xbba>
  40822c:	06da      	lsls	r2, r3, #27
  40822e:	f100 80f1 	bmi.w	408414 <_vfiprintf_r+0x6d4>
  408232:	065b      	lsls	r3, r3, #25
  408234:	f140 80ee 	bpl.w	408414 <_vfiprintf_r+0x6d4>
  408238:	9a07      	ldr	r2, [sp, #28]
  40823a:	6813      	ldr	r3, [r2, #0]
  40823c:	3204      	adds	r2, #4
  40823e:	9207      	str	r2, [sp, #28]
  408240:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  408244:	801a      	strh	r2, [r3, #0]
  408246:	e5b8      	b.n	407dba <_vfiprintf_r+0x7a>
  408248:	9807      	ldr	r0, [sp, #28]
  40824a:	4a3d      	ldr	r2, [pc, #244]	; (408340 <_vfiprintf_r+0x600>)
  40824c:	9608      	str	r6, [sp, #32]
  40824e:	920b      	str	r2, [sp, #44]	; 0x2c
  408250:	6806      	ldr	r6, [r0, #0]
  408252:	2278      	movs	r2, #120	; 0x78
  408254:	2130      	movs	r1, #48	; 0x30
  408256:	3004      	adds	r0, #4
  408258:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40825c:	f043 0302 	orr.w	r3, r3, #2
  408260:	9007      	str	r0, [sp, #28]
  408262:	2700      	movs	r7, #0
  408264:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  408268:	2202      	movs	r2, #2
  40826a:	e69c      	b.n	407fa6 <_vfiprintf_r+0x266>
  40826c:	9608      	str	r6, [sp, #32]
  40826e:	2800      	cmp	r0, #0
  408270:	d099      	beq.n	4081a6 <_vfiprintf_r+0x466>
  408272:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408276:	e796      	b.n	4081a6 <_vfiprintf_r+0x466>
  408278:	f898 2000 	ldrb.w	r2, [r8]
  40827c:	2d00      	cmp	r5, #0
  40827e:	f47f add1 	bne.w	407e24 <_vfiprintf_r+0xe4>
  408282:	2001      	movs	r0, #1
  408284:	2520      	movs	r5, #32
  408286:	e5cd      	b.n	407e24 <_vfiprintf_r+0xe4>
  408288:	f043 0301 	orr.w	r3, r3, #1
  40828c:	f898 2000 	ldrb.w	r2, [r8]
  408290:	e5c8      	b.n	407e24 <_vfiprintf_r+0xe4>
  408292:	9608      	str	r6, [sp, #32]
  408294:	2800      	cmp	r0, #0
  408296:	f040 8393 	bne.w	4089c0 <_vfiprintf_r+0xc80>
  40829a:	4929      	ldr	r1, [pc, #164]	; (408340 <_vfiprintf_r+0x600>)
  40829c:	910b      	str	r1, [sp, #44]	; 0x2c
  40829e:	069f      	lsls	r7, r3, #26
  4082a0:	f100 82e8 	bmi.w	408874 <_vfiprintf_r+0xb34>
  4082a4:	9807      	ldr	r0, [sp, #28]
  4082a6:	06de      	lsls	r6, r3, #27
  4082a8:	4601      	mov	r1, r0
  4082aa:	f100 8270 	bmi.w	40878e <_vfiprintf_r+0xa4e>
  4082ae:	065d      	lsls	r5, r3, #25
  4082b0:	f140 826d 	bpl.w	40878e <_vfiprintf_r+0xa4e>
  4082b4:	3104      	adds	r1, #4
  4082b6:	8806      	ldrh	r6, [r0, #0]
  4082b8:	9107      	str	r1, [sp, #28]
  4082ba:	2700      	movs	r7, #0
  4082bc:	07d8      	lsls	r0, r3, #31
  4082be:	f140 8222 	bpl.w	408706 <_vfiprintf_r+0x9c6>
  4082c2:	ea56 0107 	orrs.w	r1, r6, r7
  4082c6:	f000 821e 	beq.w	408706 <_vfiprintf_r+0x9c6>
  4082ca:	2130      	movs	r1, #48	; 0x30
  4082cc:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4082d0:	f043 0302 	orr.w	r3, r3, #2
  4082d4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4082d8:	2202      	movs	r2, #2
  4082da:	e664      	b.n	407fa6 <_vfiprintf_r+0x266>
  4082dc:	9608      	str	r6, [sp, #32]
  4082de:	2800      	cmp	r0, #0
  4082e0:	f040 836b 	bne.w	4089ba <_vfiprintf_r+0xc7a>
  4082e4:	4917      	ldr	r1, [pc, #92]	; (408344 <_vfiprintf_r+0x604>)
  4082e6:	910b      	str	r1, [sp, #44]	; 0x2c
  4082e8:	e7d9      	b.n	40829e <_vfiprintf_r+0x55e>
  4082ea:	9907      	ldr	r1, [sp, #28]
  4082ec:	9608      	str	r6, [sp, #32]
  4082ee:	680a      	ldr	r2, [r1, #0]
  4082f0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4082f4:	f04f 0000 	mov.w	r0, #0
  4082f8:	460a      	mov	r2, r1
  4082fa:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4082fe:	3204      	adds	r2, #4
  408300:	2001      	movs	r0, #1
  408302:	9001      	str	r0, [sp, #4]
  408304:	9207      	str	r2, [sp, #28]
  408306:	9005      	str	r0, [sp, #20]
  408308:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40830c:	9302      	str	r3, [sp, #8]
  40830e:	2400      	movs	r4, #0
  408310:	e670      	b.n	407ff4 <_vfiprintf_r+0x2b4>
  408312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408316:	f898 2000 	ldrb.w	r2, [r8]
  40831a:	e583      	b.n	407e24 <_vfiprintf_r+0xe4>
  40831c:	f898 2000 	ldrb.w	r2, [r8]
  408320:	2a6c      	cmp	r2, #108	; 0x6c
  408322:	bf03      	ittte	eq
  408324:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  408328:	f043 0320 	orreq.w	r3, r3, #32
  40832c:	f108 0801 	addeq.w	r8, r8, #1
  408330:	f043 0310 	orrne.w	r3, r3, #16
  408334:	e576      	b.n	407e24 <_vfiprintf_r+0xe4>
  408336:	bf00      	nop
  408338:	0040c150 	.word	0x0040c150
  40833c:	0040c160 	.word	0x0040c160
  408340:	0040c134 	.word	0x0040c134
  408344:	0040c120 	.word	0x0040c120
  408348:	9907      	ldr	r1, [sp, #28]
  40834a:	680e      	ldr	r6, [r1, #0]
  40834c:	460a      	mov	r2, r1
  40834e:	2e00      	cmp	r6, #0
  408350:	f102 0204 	add.w	r2, r2, #4
  408354:	f6ff ae0f 	blt.w	407f76 <_vfiprintf_r+0x236>
  408358:	9207      	str	r2, [sp, #28]
  40835a:	f898 2000 	ldrb.w	r2, [r8]
  40835e:	e561      	b.n	407e24 <_vfiprintf_r+0xe4>
  408360:	f898 2000 	ldrb.w	r2, [r8]
  408364:	2001      	movs	r0, #1
  408366:	252b      	movs	r5, #43	; 0x2b
  408368:	e55c      	b.n	407e24 <_vfiprintf_r+0xe4>
  40836a:	9907      	ldr	r1, [sp, #28]
  40836c:	9608      	str	r6, [sp, #32]
  40836e:	f8d1 b000 	ldr.w	fp, [r1]
  408372:	f04f 0200 	mov.w	r2, #0
  408376:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40837a:	1d0e      	adds	r6, r1, #4
  40837c:	f1bb 0f00 	cmp.w	fp, #0
  408380:	f000 82e5 	beq.w	40894e <_vfiprintf_r+0xc0e>
  408384:	1c67      	adds	r7, r4, #1
  408386:	f000 82c4 	beq.w	408912 <_vfiprintf_r+0xbd2>
  40838a:	4622      	mov	r2, r4
  40838c:	2100      	movs	r1, #0
  40838e:	4658      	mov	r0, fp
  408390:	9301      	str	r3, [sp, #4]
  408392:	f001 fbd5 	bl	409b40 <memchr>
  408396:	9b01      	ldr	r3, [sp, #4]
  408398:	2800      	cmp	r0, #0
  40839a:	f000 82e5 	beq.w	408968 <_vfiprintf_r+0xc28>
  40839e:	eba0 020b 	sub.w	r2, r0, fp
  4083a2:	9205      	str	r2, [sp, #20]
  4083a4:	9607      	str	r6, [sp, #28]
  4083a6:	9302      	str	r3, [sp, #8]
  4083a8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4083ac:	2400      	movs	r4, #0
  4083ae:	e619      	b.n	407fe4 <_vfiprintf_r+0x2a4>
  4083b0:	f898 2000 	ldrb.w	r2, [r8]
  4083b4:	2a2a      	cmp	r2, #42	; 0x2a
  4083b6:	f108 0701 	add.w	r7, r8, #1
  4083ba:	f000 82e9 	beq.w	408990 <_vfiprintf_r+0xc50>
  4083be:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4083c2:	2909      	cmp	r1, #9
  4083c4:	46b8      	mov	r8, r7
  4083c6:	f04f 0400 	mov.w	r4, #0
  4083ca:	f63f ad2d 	bhi.w	407e28 <_vfiprintf_r+0xe8>
  4083ce:	f818 2b01 	ldrb.w	r2, [r8], #1
  4083d2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4083d6:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4083da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4083de:	2909      	cmp	r1, #9
  4083e0:	d9f5      	bls.n	4083ce <_vfiprintf_r+0x68e>
  4083e2:	e521      	b.n	407e28 <_vfiprintf_r+0xe8>
  4083e4:	f043 0320 	orr.w	r3, r3, #32
  4083e8:	f898 2000 	ldrb.w	r2, [r8]
  4083ec:	e51a      	b.n	407e24 <_vfiprintf_r+0xe4>
  4083ee:	9608      	str	r6, [sp, #32]
  4083f0:	2800      	cmp	r0, #0
  4083f2:	f040 82db 	bne.w	4089ac <_vfiprintf_r+0xc6c>
  4083f6:	2a00      	cmp	r2, #0
  4083f8:	f000 80e7 	beq.w	4085ca <_vfiprintf_r+0x88a>
  4083fc:	2101      	movs	r1, #1
  4083fe:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  408402:	f04f 0200 	mov.w	r2, #0
  408406:	9101      	str	r1, [sp, #4]
  408408:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40840c:	9105      	str	r1, [sp, #20]
  40840e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  408412:	e77b      	b.n	40830c <_vfiprintf_r+0x5cc>
  408414:	9a07      	ldr	r2, [sp, #28]
  408416:	6813      	ldr	r3, [r2, #0]
  408418:	3204      	adds	r2, #4
  40841a:	9207      	str	r2, [sp, #28]
  40841c:	9a03      	ldr	r2, [sp, #12]
  40841e:	601a      	str	r2, [r3, #0]
  408420:	e4cb      	b.n	407dba <_vfiprintf_r+0x7a>
  408422:	aa0f      	add	r2, sp, #60	; 0x3c
  408424:	9904      	ldr	r1, [sp, #16]
  408426:	4620      	mov	r0, r4
  408428:	f7ff fc4a 	bl	407cc0 <__sprint_r.part.0>
  40842c:	2800      	cmp	r0, #0
  40842e:	f040 8139 	bne.w	4086a4 <_vfiprintf_r+0x964>
  408432:	9910      	ldr	r1, [sp, #64]	; 0x40
  408434:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408436:	f101 0c01 	add.w	ip, r1, #1
  40843a:	46ce      	mov	lr, r9
  40843c:	e5ff      	b.n	40803e <_vfiprintf_r+0x2fe>
  40843e:	9910      	ldr	r1, [sp, #64]	; 0x40
  408440:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408442:	1c48      	adds	r0, r1, #1
  408444:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408448:	2d00      	cmp	r5, #0
  40844a:	f43f ae22 	beq.w	408092 <_vfiprintf_r+0x352>
  40844e:	3201      	adds	r2, #1
  408450:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  408454:	2101      	movs	r1, #1
  408456:	2807      	cmp	r0, #7
  408458:	9211      	str	r2, [sp, #68]	; 0x44
  40845a:	9010      	str	r0, [sp, #64]	; 0x40
  40845c:	f8ca 5000 	str.w	r5, [sl]
  408460:	f8ca 1004 	str.w	r1, [sl, #4]
  408464:	f340 8108 	ble.w	408678 <_vfiprintf_r+0x938>
  408468:	2a00      	cmp	r2, #0
  40846a:	f040 81bc 	bne.w	4087e6 <_vfiprintf_r+0xaa6>
  40846e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408470:	2b00      	cmp	r3, #0
  408472:	f43f ae1f 	beq.w	4080b4 <_vfiprintf_r+0x374>
  408476:	ab0e      	add	r3, sp, #56	; 0x38
  408478:	2202      	movs	r2, #2
  40847a:	4608      	mov	r0, r1
  40847c:	931c      	str	r3, [sp, #112]	; 0x70
  40847e:	921d      	str	r2, [sp, #116]	; 0x74
  408480:	46ca      	mov	sl, r9
  408482:	4601      	mov	r1, r0
  408484:	f10a 0a08 	add.w	sl, sl, #8
  408488:	3001      	adds	r0, #1
  40848a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40848c:	2b80      	cmp	r3, #128	; 0x80
  40848e:	f43f ae19 	beq.w	4080c4 <_vfiprintf_r+0x384>
  408492:	9b05      	ldr	r3, [sp, #20]
  408494:	1ae4      	subs	r4, r4, r3
  408496:	2c00      	cmp	r4, #0
  408498:	dd2e      	ble.n	4084f8 <_vfiprintf_r+0x7b8>
  40849a:	2c10      	cmp	r4, #16
  40849c:	4db3      	ldr	r5, [pc, #716]	; (40876c <_vfiprintf_r+0xa2c>)
  40849e:	dd1e      	ble.n	4084de <_vfiprintf_r+0x79e>
  4084a0:	46d6      	mov	lr, sl
  4084a2:	2610      	movs	r6, #16
  4084a4:	9f06      	ldr	r7, [sp, #24]
  4084a6:	f8dd a010 	ldr.w	sl, [sp, #16]
  4084aa:	e006      	b.n	4084ba <_vfiprintf_r+0x77a>
  4084ac:	1c88      	adds	r0, r1, #2
  4084ae:	f10e 0e08 	add.w	lr, lr, #8
  4084b2:	4619      	mov	r1, r3
  4084b4:	3c10      	subs	r4, #16
  4084b6:	2c10      	cmp	r4, #16
  4084b8:	dd10      	ble.n	4084dc <_vfiprintf_r+0x79c>
  4084ba:	1c4b      	adds	r3, r1, #1
  4084bc:	3210      	adds	r2, #16
  4084be:	2b07      	cmp	r3, #7
  4084c0:	9211      	str	r2, [sp, #68]	; 0x44
  4084c2:	e88e 0060 	stmia.w	lr, {r5, r6}
  4084c6:	9310      	str	r3, [sp, #64]	; 0x40
  4084c8:	ddf0      	ble.n	4084ac <_vfiprintf_r+0x76c>
  4084ca:	2a00      	cmp	r2, #0
  4084cc:	d165      	bne.n	40859a <_vfiprintf_r+0x85a>
  4084ce:	3c10      	subs	r4, #16
  4084d0:	2c10      	cmp	r4, #16
  4084d2:	f04f 0001 	mov.w	r0, #1
  4084d6:	4611      	mov	r1, r2
  4084d8:	46ce      	mov	lr, r9
  4084da:	dcee      	bgt.n	4084ba <_vfiprintf_r+0x77a>
  4084dc:	46f2      	mov	sl, lr
  4084de:	4422      	add	r2, r4
  4084e0:	2807      	cmp	r0, #7
  4084e2:	9211      	str	r2, [sp, #68]	; 0x44
  4084e4:	f8ca 5000 	str.w	r5, [sl]
  4084e8:	f8ca 4004 	str.w	r4, [sl, #4]
  4084ec:	9010      	str	r0, [sp, #64]	; 0x40
  4084ee:	f300 8085 	bgt.w	4085fc <_vfiprintf_r+0x8bc>
  4084f2:	f10a 0a08 	add.w	sl, sl, #8
  4084f6:	3001      	adds	r0, #1
  4084f8:	9905      	ldr	r1, [sp, #20]
  4084fa:	f8ca b000 	str.w	fp, [sl]
  4084fe:	440a      	add	r2, r1
  408500:	2807      	cmp	r0, #7
  408502:	9211      	str	r2, [sp, #68]	; 0x44
  408504:	f8ca 1004 	str.w	r1, [sl, #4]
  408508:	9010      	str	r0, [sp, #64]	; 0x40
  40850a:	f340 8082 	ble.w	408612 <_vfiprintf_r+0x8d2>
  40850e:	2a00      	cmp	r2, #0
  408510:	f040 8118 	bne.w	408744 <_vfiprintf_r+0xa04>
  408514:	9b02      	ldr	r3, [sp, #8]
  408516:	9210      	str	r2, [sp, #64]	; 0x40
  408518:	0758      	lsls	r0, r3, #29
  40851a:	d535      	bpl.n	408588 <_vfiprintf_r+0x848>
  40851c:	9b08      	ldr	r3, [sp, #32]
  40851e:	9901      	ldr	r1, [sp, #4]
  408520:	1a5c      	subs	r4, r3, r1
  408522:	2c00      	cmp	r4, #0
  408524:	f340 80e7 	ble.w	4086f6 <_vfiprintf_r+0x9b6>
  408528:	46ca      	mov	sl, r9
  40852a:	2c10      	cmp	r4, #16
  40852c:	f340 8218 	ble.w	408960 <_vfiprintf_r+0xc20>
  408530:	9910      	ldr	r1, [sp, #64]	; 0x40
  408532:	4e8f      	ldr	r6, [pc, #572]	; (408770 <_vfiprintf_r+0xa30>)
  408534:	9f06      	ldr	r7, [sp, #24]
  408536:	f8dd b010 	ldr.w	fp, [sp, #16]
  40853a:	2510      	movs	r5, #16
  40853c:	e006      	b.n	40854c <_vfiprintf_r+0x80c>
  40853e:	1c88      	adds	r0, r1, #2
  408540:	f10a 0a08 	add.w	sl, sl, #8
  408544:	4619      	mov	r1, r3
  408546:	3c10      	subs	r4, #16
  408548:	2c10      	cmp	r4, #16
  40854a:	dd11      	ble.n	408570 <_vfiprintf_r+0x830>
  40854c:	1c4b      	adds	r3, r1, #1
  40854e:	3210      	adds	r2, #16
  408550:	2b07      	cmp	r3, #7
  408552:	9211      	str	r2, [sp, #68]	; 0x44
  408554:	f8ca 6000 	str.w	r6, [sl]
  408558:	f8ca 5004 	str.w	r5, [sl, #4]
  40855c:	9310      	str	r3, [sp, #64]	; 0x40
  40855e:	ddee      	ble.n	40853e <_vfiprintf_r+0x7fe>
  408560:	bb42      	cbnz	r2, 4085b4 <_vfiprintf_r+0x874>
  408562:	3c10      	subs	r4, #16
  408564:	2c10      	cmp	r4, #16
  408566:	f04f 0001 	mov.w	r0, #1
  40856a:	4611      	mov	r1, r2
  40856c:	46ca      	mov	sl, r9
  40856e:	dced      	bgt.n	40854c <_vfiprintf_r+0x80c>
  408570:	4422      	add	r2, r4
  408572:	2807      	cmp	r0, #7
  408574:	9211      	str	r2, [sp, #68]	; 0x44
  408576:	f8ca 6000 	str.w	r6, [sl]
  40857a:	f8ca 4004 	str.w	r4, [sl, #4]
  40857e:	9010      	str	r0, [sp, #64]	; 0x40
  408580:	dd51      	ble.n	408626 <_vfiprintf_r+0x8e6>
  408582:	2a00      	cmp	r2, #0
  408584:	f040 819b 	bne.w	4088be <_vfiprintf_r+0xb7e>
  408588:	9b03      	ldr	r3, [sp, #12]
  40858a:	9a08      	ldr	r2, [sp, #32]
  40858c:	9901      	ldr	r1, [sp, #4]
  40858e:	428a      	cmp	r2, r1
  408590:	bfac      	ite	ge
  408592:	189b      	addge	r3, r3, r2
  408594:	185b      	addlt	r3, r3, r1
  408596:	9303      	str	r3, [sp, #12]
  408598:	e04e      	b.n	408638 <_vfiprintf_r+0x8f8>
  40859a:	aa0f      	add	r2, sp, #60	; 0x3c
  40859c:	4651      	mov	r1, sl
  40859e:	4638      	mov	r0, r7
  4085a0:	f7ff fb8e 	bl	407cc0 <__sprint_r.part.0>
  4085a4:	2800      	cmp	r0, #0
  4085a6:	f040 813f 	bne.w	408828 <_vfiprintf_r+0xae8>
  4085aa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4085ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4085ae:	1c48      	adds	r0, r1, #1
  4085b0:	46ce      	mov	lr, r9
  4085b2:	e77f      	b.n	4084b4 <_vfiprintf_r+0x774>
  4085b4:	aa0f      	add	r2, sp, #60	; 0x3c
  4085b6:	4659      	mov	r1, fp
  4085b8:	4638      	mov	r0, r7
  4085ba:	f7ff fb81 	bl	407cc0 <__sprint_r.part.0>
  4085be:	b960      	cbnz	r0, 4085da <_vfiprintf_r+0x89a>
  4085c0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4085c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4085c4:	1c48      	adds	r0, r1, #1
  4085c6:	46ca      	mov	sl, r9
  4085c8:	e7bd      	b.n	408546 <_vfiprintf_r+0x806>
  4085ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4085cc:	f8dd b010 	ldr.w	fp, [sp, #16]
  4085d0:	2b00      	cmp	r3, #0
  4085d2:	f040 81d4 	bne.w	40897e <_vfiprintf_r+0xc3e>
  4085d6:	2300      	movs	r3, #0
  4085d8:	9310      	str	r3, [sp, #64]	; 0x40
  4085da:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4085de:	f013 0f01 	tst.w	r3, #1
  4085e2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4085e6:	d102      	bne.n	4085ee <_vfiprintf_r+0x8ae>
  4085e8:	059a      	lsls	r2, r3, #22
  4085ea:	f140 80de 	bpl.w	4087aa <_vfiprintf_r+0xa6a>
  4085ee:	065b      	lsls	r3, r3, #25
  4085f0:	f53f acb2 	bmi.w	407f58 <_vfiprintf_r+0x218>
  4085f4:	9803      	ldr	r0, [sp, #12]
  4085f6:	b02d      	add	sp, #180	; 0xb4
  4085f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4085fc:	2a00      	cmp	r2, #0
  4085fe:	f040 8106 	bne.w	40880e <_vfiprintf_r+0xace>
  408602:	9a05      	ldr	r2, [sp, #20]
  408604:	921d      	str	r2, [sp, #116]	; 0x74
  408606:	2301      	movs	r3, #1
  408608:	9211      	str	r2, [sp, #68]	; 0x44
  40860a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40860e:	9310      	str	r3, [sp, #64]	; 0x40
  408610:	46ca      	mov	sl, r9
  408612:	f10a 0a08 	add.w	sl, sl, #8
  408616:	9b02      	ldr	r3, [sp, #8]
  408618:	0759      	lsls	r1, r3, #29
  40861a:	d504      	bpl.n	408626 <_vfiprintf_r+0x8e6>
  40861c:	9b08      	ldr	r3, [sp, #32]
  40861e:	9901      	ldr	r1, [sp, #4]
  408620:	1a5c      	subs	r4, r3, r1
  408622:	2c00      	cmp	r4, #0
  408624:	dc81      	bgt.n	40852a <_vfiprintf_r+0x7ea>
  408626:	9b03      	ldr	r3, [sp, #12]
  408628:	9908      	ldr	r1, [sp, #32]
  40862a:	9801      	ldr	r0, [sp, #4]
  40862c:	4281      	cmp	r1, r0
  40862e:	bfac      	ite	ge
  408630:	185b      	addge	r3, r3, r1
  408632:	181b      	addlt	r3, r3, r0
  408634:	9303      	str	r3, [sp, #12]
  408636:	bb72      	cbnz	r2, 408696 <_vfiprintf_r+0x956>
  408638:	2300      	movs	r3, #0
  40863a:	9310      	str	r3, [sp, #64]	; 0x40
  40863c:	46ca      	mov	sl, r9
  40863e:	f7ff bbbc 	b.w	407dba <_vfiprintf_r+0x7a>
  408642:	aa0f      	add	r2, sp, #60	; 0x3c
  408644:	9904      	ldr	r1, [sp, #16]
  408646:	4620      	mov	r0, r4
  408648:	f7ff fb3a 	bl	407cc0 <__sprint_r.part.0>
  40864c:	bb50      	cbnz	r0, 4086a4 <_vfiprintf_r+0x964>
  40864e:	9910      	ldr	r1, [sp, #64]	; 0x40
  408650:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408652:	f101 0e01 	add.w	lr, r1, #1
  408656:	46cc      	mov	ip, r9
  408658:	e548      	b.n	4080ec <_vfiprintf_r+0x3ac>
  40865a:	2a00      	cmp	r2, #0
  40865c:	f040 8140 	bne.w	4088e0 <_vfiprintf_r+0xba0>
  408660:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  408664:	2900      	cmp	r1, #0
  408666:	f000 811b 	beq.w	4088a0 <_vfiprintf_r+0xb60>
  40866a:	2201      	movs	r2, #1
  40866c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  408670:	4610      	mov	r0, r2
  408672:	921d      	str	r2, [sp, #116]	; 0x74
  408674:	911c      	str	r1, [sp, #112]	; 0x70
  408676:	46ca      	mov	sl, r9
  408678:	4601      	mov	r1, r0
  40867a:	f10a 0a08 	add.w	sl, sl, #8
  40867e:	3001      	adds	r0, #1
  408680:	e507      	b.n	408092 <_vfiprintf_r+0x352>
  408682:	9b02      	ldr	r3, [sp, #8]
  408684:	2a01      	cmp	r2, #1
  408686:	f000 8098 	beq.w	4087ba <_vfiprintf_r+0xa7a>
  40868a:	2a02      	cmp	r2, #2
  40868c:	d10d      	bne.n	4086aa <_vfiprintf_r+0x96a>
  40868e:	9302      	str	r3, [sp, #8]
  408690:	2600      	movs	r6, #0
  408692:	2700      	movs	r7, #0
  408694:	e5b0      	b.n	4081f8 <_vfiprintf_r+0x4b8>
  408696:	aa0f      	add	r2, sp, #60	; 0x3c
  408698:	9904      	ldr	r1, [sp, #16]
  40869a:	9806      	ldr	r0, [sp, #24]
  40869c:	f7ff fb10 	bl	407cc0 <__sprint_r.part.0>
  4086a0:	2800      	cmp	r0, #0
  4086a2:	d0c9      	beq.n	408638 <_vfiprintf_r+0x8f8>
  4086a4:	f8dd b010 	ldr.w	fp, [sp, #16]
  4086a8:	e797      	b.n	4085da <_vfiprintf_r+0x89a>
  4086aa:	9302      	str	r3, [sp, #8]
  4086ac:	2600      	movs	r6, #0
  4086ae:	2700      	movs	r7, #0
  4086b0:	4649      	mov	r1, r9
  4086b2:	e000      	b.n	4086b6 <_vfiprintf_r+0x976>
  4086b4:	4659      	mov	r1, fp
  4086b6:	08f2      	lsrs	r2, r6, #3
  4086b8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4086bc:	08f8      	lsrs	r0, r7, #3
  4086be:	f006 0307 	and.w	r3, r6, #7
  4086c2:	4607      	mov	r7, r0
  4086c4:	4616      	mov	r6, r2
  4086c6:	3330      	adds	r3, #48	; 0x30
  4086c8:	ea56 0207 	orrs.w	r2, r6, r7
  4086cc:	f801 3c01 	strb.w	r3, [r1, #-1]
  4086d0:	f101 3bff 	add.w	fp, r1, #4294967295
  4086d4:	d1ee      	bne.n	4086b4 <_vfiprintf_r+0x974>
  4086d6:	9a02      	ldr	r2, [sp, #8]
  4086d8:	07d6      	lsls	r6, r2, #31
  4086da:	f57f ad9d 	bpl.w	408218 <_vfiprintf_r+0x4d8>
  4086de:	2b30      	cmp	r3, #48	; 0x30
  4086e0:	f43f ad9a 	beq.w	408218 <_vfiprintf_r+0x4d8>
  4086e4:	3902      	subs	r1, #2
  4086e6:	2330      	movs	r3, #48	; 0x30
  4086e8:	f80b 3c01 	strb.w	r3, [fp, #-1]
  4086ec:	eba9 0301 	sub.w	r3, r9, r1
  4086f0:	9305      	str	r3, [sp, #20]
  4086f2:	468b      	mov	fp, r1
  4086f4:	e476      	b.n	407fe4 <_vfiprintf_r+0x2a4>
  4086f6:	9b03      	ldr	r3, [sp, #12]
  4086f8:	9a08      	ldr	r2, [sp, #32]
  4086fa:	428a      	cmp	r2, r1
  4086fc:	bfac      	ite	ge
  4086fe:	189b      	addge	r3, r3, r2
  408700:	185b      	addlt	r3, r3, r1
  408702:	9303      	str	r3, [sp, #12]
  408704:	e798      	b.n	408638 <_vfiprintf_r+0x8f8>
  408706:	2202      	movs	r2, #2
  408708:	e44d      	b.n	407fa6 <_vfiprintf_r+0x266>
  40870a:	2f00      	cmp	r7, #0
  40870c:	bf08      	it	eq
  40870e:	2e0a      	cmpeq	r6, #10
  408710:	d352      	bcc.n	4087b8 <_vfiprintf_r+0xa78>
  408712:	46cb      	mov	fp, r9
  408714:	4630      	mov	r0, r6
  408716:	4639      	mov	r1, r7
  408718:	220a      	movs	r2, #10
  40871a:	2300      	movs	r3, #0
  40871c:	f001 fe9a 	bl	40a454 <__aeabi_uldivmod>
  408720:	3230      	adds	r2, #48	; 0x30
  408722:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  408726:	4630      	mov	r0, r6
  408728:	4639      	mov	r1, r7
  40872a:	2300      	movs	r3, #0
  40872c:	220a      	movs	r2, #10
  40872e:	f001 fe91 	bl	40a454 <__aeabi_uldivmod>
  408732:	4606      	mov	r6, r0
  408734:	460f      	mov	r7, r1
  408736:	ea56 0307 	orrs.w	r3, r6, r7
  40873a:	d1eb      	bne.n	408714 <_vfiprintf_r+0x9d4>
  40873c:	e56c      	b.n	408218 <_vfiprintf_r+0x4d8>
  40873e:	9405      	str	r4, [sp, #20]
  408740:	46cb      	mov	fp, r9
  408742:	e44f      	b.n	407fe4 <_vfiprintf_r+0x2a4>
  408744:	aa0f      	add	r2, sp, #60	; 0x3c
  408746:	9904      	ldr	r1, [sp, #16]
  408748:	9806      	ldr	r0, [sp, #24]
  40874a:	f7ff fab9 	bl	407cc0 <__sprint_r.part.0>
  40874e:	2800      	cmp	r0, #0
  408750:	d1a8      	bne.n	4086a4 <_vfiprintf_r+0x964>
  408752:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408754:	46ca      	mov	sl, r9
  408756:	e75e      	b.n	408616 <_vfiprintf_r+0x8d6>
  408758:	aa0f      	add	r2, sp, #60	; 0x3c
  40875a:	9904      	ldr	r1, [sp, #16]
  40875c:	9806      	ldr	r0, [sp, #24]
  40875e:	f7ff faaf 	bl	407cc0 <__sprint_r.part.0>
  408762:	2800      	cmp	r0, #0
  408764:	d19e      	bne.n	4086a4 <_vfiprintf_r+0x964>
  408766:	46ca      	mov	sl, r9
  408768:	f7ff bbc0 	b.w	407eec <_vfiprintf_r+0x1ac>
  40876c:	0040c160 	.word	0x0040c160
  408770:	0040c150 	.word	0x0040c150
  408774:	3104      	adds	r1, #4
  408776:	6816      	ldr	r6, [r2, #0]
  408778:	9107      	str	r1, [sp, #28]
  40877a:	2201      	movs	r2, #1
  40877c:	2700      	movs	r7, #0
  40877e:	e412      	b.n	407fa6 <_vfiprintf_r+0x266>
  408780:	9807      	ldr	r0, [sp, #28]
  408782:	4601      	mov	r1, r0
  408784:	3104      	adds	r1, #4
  408786:	6806      	ldr	r6, [r0, #0]
  408788:	9107      	str	r1, [sp, #28]
  40878a:	2700      	movs	r7, #0
  40878c:	e40b      	b.n	407fa6 <_vfiprintf_r+0x266>
  40878e:	680e      	ldr	r6, [r1, #0]
  408790:	3104      	adds	r1, #4
  408792:	9107      	str	r1, [sp, #28]
  408794:	2700      	movs	r7, #0
  408796:	e591      	b.n	4082bc <_vfiprintf_r+0x57c>
  408798:	9907      	ldr	r1, [sp, #28]
  40879a:	680e      	ldr	r6, [r1, #0]
  40879c:	460a      	mov	r2, r1
  40879e:	17f7      	asrs	r7, r6, #31
  4087a0:	3204      	adds	r2, #4
  4087a2:	9207      	str	r2, [sp, #28]
  4087a4:	4630      	mov	r0, r6
  4087a6:	4639      	mov	r1, r7
  4087a8:	e50f      	b.n	4081ca <_vfiprintf_r+0x48a>
  4087aa:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4087ae:	f000 fe7f 	bl	4094b0 <__retarget_lock_release_recursive>
  4087b2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4087b6:	e71a      	b.n	4085ee <_vfiprintf_r+0x8ae>
  4087b8:	9b02      	ldr	r3, [sp, #8]
  4087ba:	9302      	str	r3, [sp, #8]
  4087bc:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4087c0:	3630      	adds	r6, #48	; 0x30
  4087c2:	2301      	movs	r3, #1
  4087c4:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4087c8:	9305      	str	r3, [sp, #20]
  4087ca:	e40b      	b.n	407fe4 <_vfiprintf_r+0x2a4>
  4087cc:	aa0f      	add	r2, sp, #60	; 0x3c
  4087ce:	9904      	ldr	r1, [sp, #16]
  4087d0:	9806      	ldr	r0, [sp, #24]
  4087d2:	f7ff fa75 	bl	407cc0 <__sprint_r.part.0>
  4087d6:	2800      	cmp	r0, #0
  4087d8:	f47f af64 	bne.w	4086a4 <_vfiprintf_r+0x964>
  4087dc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4087de:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4087e0:	1c48      	adds	r0, r1, #1
  4087e2:	46ca      	mov	sl, r9
  4087e4:	e651      	b.n	40848a <_vfiprintf_r+0x74a>
  4087e6:	aa0f      	add	r2, sp, #60	; 0x3c
  4087e8:	9904      	ldr	r1, [sp, #16]
  4087ea:	9806      	ldr	r0, [sp, #24]
  4087ec:	f7ff fa68 	bl	407cc0 <__sprint_r.part.0>
  4087f0:	2800      	cmp	r0, #0
  4087f2:	f47f af57 	bne.w	4086a4 <_vfiprintf_r+0x964>
  4087f6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4087f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4087fa:	1c48      	adds	r0, r1, #1
  4087fc:	46ca      	mov	sl, r9
  4087fe:	e448      	b.n	408092 <_vfiprintf_r+0x352>
  408800:	2a00      	cmp	r2, #0
  408802:	f040 8091 	bne.w	408928 <_vfiprintf_r+0xbe8>
  408806:	2001      	movs	r0, #1
  408808:	4611      	mov	r1, r2
  40880a:	46ca      	mov	sl, r9
  40880c:	e641      	b.n	408492 <_vfiprintf_r+0x752>
  40880e:	aa0f      	add	r2, sp, #60	; 0x3c
  408810:	9904      	ldr	r1, [sp, #16]
  408812:	9806      	ldr	r0, [sp, #24]
  408814:	f7ff fa54 	bl	407cc0 <__sprint_r.part.0>
  408818:	2800      	cmp	r0, #0
  40881a:	f47f af43 	bne.w	4086a4 <_vfiprintf_r+0x964>
  40881e:	9810      	ldr	r0, [sp, #64]	; 0x40
  408820:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408822:	3001      	adds	r0, #1
  408824:	46ca      	mov	sl, r9
  408826:	e667      	b.n	4084f8 <_vfiprintf_r+0x7b8>
  408828:	46d3      	mov	fp, sl
  40882a:	e6d6      	b.n	4085da <_vfiprintf_r+0x89a>
  40882c:	9e07      	ldr	r6, [sp, #28]
  40882e:	3607      	adds	r6, #7
  408830:	f026 0207 	bic.w	r2, r6, #7
  408834:	f102 0108 	add.w	r1, r2, #8
  408838:	e9d2 6700 	ldrd	r6, r7, [r2]
  40883c:	9107      	str	r1, [sp, #28]
  40883e:	2201      	movs	r2, #1
  408840:	f7ff bbb1 	b.w	407fa6 <_vfiprintf_r+0x266>
  408844:	9e07      	ldr	r6, [sp, #28]
  408846:	3607      	adds	r6, #7
  408848:	f026 0607 	bic.w	r6, r6, #7
  40884c:	e9d6 0100 	ldrd	r0, r1, [r6]
  408850:	f106 0208 	add.w	r2, r6, #8
  408854:	9207      	str	r2, [sp, #28]
  408856:	4606      	mov	r6, r0
  408858:	460f      	mov	r7, r1
  40885a:	e4b6      	b.n	4081ca <_vfiprintf_r+0x48a>
  40885c:	9e07      	ldr	r6, [sp, #28]
  40885e:	3607      	adds	r6, #7
  408860:	f026 0207 	bic.w	r2, r6, #7
  408864:	f102 0108 	add.w	r1, r2, #8
  408868:	e9d2 6700 	ldrd	r6, r7, [r2]
  40886c:	9107      	str	r1, [sp, #28]
  40886e:	2200      	movs	r2, #0
  408870:	f7ff bb99 	b.w	407fa6 <_vfiprintf_r+0x266>
  408874:	9e07      	ldr	r6, [sp, #28]
  408876:	3607      	adds	r6, #7
  408878:	f026 0107 	bic.w	r1, r6, #7
  40887c:	f101 0008 	add.w	r0, r1, #8
  408880:	9007      	str	r0, [sp, #28]
  408882:	e9d1 6700 	ldrd	r6, r7, [r1]
  408886:	e519      	b.n	4082bc <_vfiprintf_r+0x57c>
  408888:	46cb      	mov	fp, r9
  40888a:	f7ff bbab 	b.w	407fe4 <_vfiprintf_r+0x2a4>
  40888e:	252d      	movs	r5, #45	; 0x2d
  408890:	4276      	negs	r6, r6
  408892:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  408896:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40889a:	2201      	movs	r2, #1
  40889c:	f7ff bb88 	b.w	407fb0 <_vfiprintf_r+0x270>
  4088a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4088a2:	b9b3      	cbnz	r3, 4088d2 <_vfiprintf_r+0xb92>
  4088a4:	4611      	mov	r1, r2
  4088a6:	2001      	movs	r0, #1
  4088a8:	46ca      	mov	sl, r9
  4088aa:	e5f2      	b.n	408492 <_vfiprintf_r+0x752>
  4088ac:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4088b0:	f000 fdfe 	bl	4094b0 <__retarget_lock_release_recursive>
  4088b4:	f04f 33ff 	mov.w	r3, #4294967295
  4088b8:	9303      	str	r3, [sp, #12]
  4088ba:	f7ff bb50 	b.w	407f5e <_vfiprintf_r+0x21e>
  4088be:	aa0f      	add	r2, sp, #60	; 0x3c
  4088c0:	9904      	ldr	r1, [sp, #16]
  4088c2:	9806      	ldr	r0, [sp, #24]
  4088c4:	f7ff f9fc 	bl	407cc0 <__sprint_r.part.0>
  4088c8:	2800      	cmp	r0, #0
  4088ca:	f47f aeeb 	bne.w	4086a4 <_vfiprintf_r+0x964>
  4088ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4088d0:	e6a9      	b.n	408626 <_vfiprintf_r+0x8e6>
  4088d2:	ab0e      	add	r3, sp, #56	; 0x38
  4088d4:	2202      	movs	r2, #2
  4088d6:	931c      	str	r3, [sp, #112]	; 0x70
  4088d8:	921d      	str	r2, [sp, #116]	; 0x74
  4088da:	2001      	movs	r0, #1
  4088dc:	46ca      	mov	sl, r9
  4088de:	e5d0      	b.n	408482 <_vfiprintf_r+0x742>
  4088e0:	aa0f      	add	r2, sp, #60	; 0x3c
  4088e2:	9904      	ldr	r1, [sp, #16]
  4088e4:	9806      	ldr	r0, [sp, #24]
  4088e6:	f7ff f9eb 	bl	407cc0 <__sprint_r.part.0>
  4088ea:	2800      	cmp	r0, #0
  4088ec:	f47f aeda 	bne.w	4086a4 <_vfiprintf_r+0x964>
  4088f0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4088f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4088f4:	1c48      	adds	r0, r1, #1
  4088f6:	46ca      	mov	sl, r9
  4088f8:	e5a4      	b.n	408444 <_vfiprintf_r+0x704>
  4088fa:	9a07      	ldr	r2, [sp, #28]
  4088fc:	9903      	ldr	r1, [sp, #12]
  4088fe:	6813      	ldr	r3, [r2, #0]
  408900:	17cd      	asrs	r5, r1, #31
  408902:	4608      	mov	r0, r1
  408904:	3204      	adds	r2, #4
  408906:	4629      	mov	r1, r5
  408908:	9207      	str	r2, [sp, #28]
  40890a:	e9c3 0100 	strd	r0, r1, [r3]
  40890e:	f7ff ba54 	b.w	407dba <_vfiprintf_r+0x7a>
  408912:	4658      	mov	r0, fp
  408914:	9607      	str	r6, [sp, #28]
  408916:	9302      	str	r3, [sp, #8]
  408918:	f7ff f912 	bl	407b40 <strlen>
  40891c:	2400      	movs	r4, #0
  40891e:	9005      	str	r0, [sp, #20]
  408920:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408924:	f7ff bb5e 	b.w	407fe4 <_vfiprintf_r+0x2a4>
  408928:	aa0f      	add	r2, sp, #60	; 0x3c
  40892a:	9904      	ldr	r1, [sp, #16]
  40892c:	9806      	ldr	r0, [sp, #24]
  40892e:	f7ff f9c7 	bl	407cc0 <__sprint_r.part.0>
  408932:	2800      	cmp	r0, #0
  408934:	f47f aeb6 	bne.w	4086a4 <_vfiprintf_r+0x964>
  408938:	9910      	ldr	r1, [sp, #64]	; 0x40
  40893a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40893c:	1c48      	adds	r0, r1, #1
  40893e:	46ca      	mov	sl, r9
  408940:	e5a7      	b.n	408492 <_vfiprintf_r+0x752>
  408942:	9910      	ldr	r1, [sp, #64]	; 0x40
  408944:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408946:	4e20      	ldr	r6, [pc, #128]	; (4089c8 <_vfiprintf_r+0xc88>)
  408948:	3101      	adds	r1, #1
  40894a:	f7ff bb90 	b.w	40806e <_vfiprintf_r+0x32e>
  40894e:	2c06      	cmp	r4, #6
  408950:	bf28      	it	cs
  408952:	2406      	movcs	r4, #6
  408954:	9405      	str	r4, [sp, #20]
  408956:	9607      	str	r6, [sp, #28]
  408958:	9401      	str	r4, [sp, #4]
  40895a:	f8df b070 	ldr.w	fp, [pc, #112]	; 4089cc <_vfiprintf_r+0xc8c>
  40895e:	e4d5      	b.n	40830c <_vfiprintf_r+0x5cc>
  408960:	9810      	ldr	r0, [sp, #64]	; 0x40
  408962:	4e19      	ldr	r6, [pc, #100]	; (4089c8 <_vfiprintf_r+0xc88>)
  408964:	3001      	adds	r0, #1
  408966:	e603      	b.n	408570 <_vfiprintf_r+0x830>
  408968:	9405      	str	r4, [sp, #20]
  40896a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40896e:	9607      	str	r6, [sp, #28]
  408970:	9302      	str	r3, [sp, #8]
  408972:	4604      	mov	r4, r0
  408974:	f7ff bb36 	b.w	407fe4 <_vfiprintf_r+0x2a4>
  408978:	4686      	mov	lr, r0
  40897a:	f7ff bbce 	b.w	40811a <_vfiprintf_r+0x3da>
  40897e:	9806      	ldr	r0, [sp, #24]
  408980:	aa0f      	add	r2, sp, #60	; 0x3c
  408982:	4659      	mov	r1, fp
  408984:	f7ff f99c 	bl	407cc0 <__sprint_r.part.0>
  408988:	2800      	cmp	r0, #0
  40898a:	f43f ae24 	beq.w	4085d6 <_vfiprintf_r+0x896>
  40898e:	e624      	b.n	4085da <_vfiprintf_r+0x89a>
  408990:	9907      	ldr	r1, [sp, #28]
  408992:	f898 2001 	ldrb.w	r2, [r8, #1]
  408996:	680c      	ldr	r4, [r1, #0]
  408998:	3104      	adds	r1, #4
  40899a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40899e:	46b8      	mov	r8, r7
  4089a0:	9107      	str	r1, [sp, #28]
  4089a2:	f7ff ba3f 	b.w	407e24 <_vfiprintf_r+0xe4>
  4089a6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4089aa:	e43c      	b.n	408226 <_vfiprintf_r+0x4e6>
  4089ac:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4089b0:	e521      	b.n	4083f6 <_vfiprintf_r+0x6b6>
  4089b2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4089b6:	f7ff bbf4 	b.w	4081a2 <_vfiprintf_r+0x462>
  4089ba:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4089be:	e491      	b.n	4082e4 <_vfiprintf_r+0x5a4>
  4089c0:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4089c4:	e469      	b.n	40829a <_vfiprintf_r+0x55a>
  4089c6:	bf00      	nop
  4089c8:	0040c150 	.word	0x0040c150
  4089cc:	0040c148 	.word	0x0040c148

004089d0 <__sbprintf>:
  4089d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4089d4:	460c      	mov	r4, r1
  4089d6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4089da:	8989      	ldrh	r1, [r1, #12]
  4089dc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4089de:	89e5      	ldrh	r5, [r4, #14]
  4089e0:	9619      	str	r6, [sp, #100]	; 0x64
  4089e2:	f021 0102 	bic.w	r1, r1, #2
  4089e6:	4606      	mov	r6, r0
  4089e8:	69e0      	ldr	r0, [r4, #28]
  4089ea:	f8ad 100c 	strh.w	r1, [sp, #12]
  4089ee:	4617      	mov	r7, r2
  4089f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4089f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4089f6:	f8ad 500e 	strh.w	r5, [sp, #14]
  4089fa:	4698      	mov	r8, r3
  4089fc:	ad1a      	add	r5, sp, #104	; 0x68
  4089fe:	2300      	movs	r3, #0
  408a00:	9007      	str	r0, [sp, #28]
  408a02:	a816      	add	r0, sp, #88	; 0x58
  408a04:	9209      	str	r2, [sp, #36]	; 0x24
  408a06:	9306      	str	r3, [sp, #24]
  408a08:	9500      	str	r5, [sp, #0]
  408a0a:	9504      	str	r5, [sp, #16]
  408a0c:	9102      	str	r1, [sp, #8]
  408a0e:	9105      	str	r1, [sp, #20]
  408a10:	f000 fd48 	bl	4094a4 <__retarget_lock_init_recursive>
  408a14:	4643      	mov	r3, r8
  408a16:	463a      	mov	r2, r7
  408a18:	4669      	mov	r1, sp
  408a1a:	4630      	mov	r0, r6
  408a1c:	f7ff f990 	bl	407d40 <_vfiprintf_r>
  408a20:	1e05      	subs	r5, r0, #0
  408a22:	db07      	blt.n	408a34 <__sbprintf+0x64>
  408a24:	4630      	mov	r0, r6
  408a26:	4669      	mov	r1, sp
  408a28:	f000 f928 	bl	408c7c <_fflush_r>
  408a2c:	2800      	cmp	r0, #0
  408a2e:	bf18      	it	ne
  408a30:	f04f 35ff 	movne.w	r5, #4294967295
  408a34:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  408a38:	065b      	lsls	r3, r3, #25
  408a3a:	d503      	bpl.n	408a44 <__sbprintf+0x74>
  408a3c:	89a3      	ldrh	r3, [r4, #12]
  408a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408a42:	81a3      	strh	r3, [r4, #12]
  408a44:	9816      	ldr	r0, [sp, #88]	; 0x58
  408a46:	f000 fd2f 	bl	4094a8 <__retarget_lock_close_recursive>
  408a4a:	4628      	mov	r0, r5
  408a4c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  408a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00408a54 <__swsetup_r>:
  408a54:	b538      	push	{r3, r4, r5, lr}
  408a56:	4b30      	ldr	r3, [pc, #192]	; (408b18 <__swsetup_r+0xc4>)
  408a58:	681b      	ldr	r3, [r3, #0]
  408a5a:	4605      	mov	r5, r0
  408a5c:	460c      	mov	r4, r1
  408a5e:	b113      	cbz	r3, 408a66 <__swsetup_r+0x12>
  408a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  408a62:	2a00      	cmp	r2, #0
  408a64:	d038      	beq.n	408ad8 <__swsetup_r+0x84>
  408a66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408a6a:	b293      	uxth	r3, r2
  408a6c:	0718      	lsls	r0, r3, #28
  408a6e:	d50c      	bpl.n	408a8a <__swsetup_r+0x36>
  408a70:	6920      	ldr	r0, [r4, #16]
  408a72:	b1a8      	cbz	r0, 408aa0 <__swsetup_r+0x4c>
  408a74:	f013 0201 	ands.w	r2, r3, #1
  408a78:	d01e      	beq.n	408ab8 <__swsetup_r+0x64>
  408a7a:	6963      	ldr	r3, [r4, #20]
  408a7c:	2200      	movs	r2, #0
  408a7e:	425b      	negs	r3, r3
  408a80:	61a3      	str	r3, [r4, #24]
  408a82:	60a2      	str	r2, [r4, #8]
  408a84:	b1f0      	cbz	r0, 408ac4 <__swsetup_r+0x70>
  408a86:	2000      	movs	r0, #0
  408a88:	bd38      	pop	{r3, r4, r5, pc}
  408a8a:	06d9      	lsls	r1, r3, #27
  408a8c:	d53c      	bpl.n	408b08 <__swsetup_r+0xb4>
  408a8e:	0758      	lsls	r0, r3, #29
  408a90:	d426      	bmi.n	408ae0 <__swsetup_r+0x8c>
  408a92:	6920      	ldr	r0, [r4, #16]
  408a94:	f042 0308 	orr.w	r3, r2, #8
  408a98:	81a3      	strh	r3, [r4, #12]
  408a9a:	b29b      	uxth	r3, r3
  408a9c:	2800      	cmp	r0, #0
  408a9e:	d1e9      	bne.n	408a74 <__swsetup_r+0x20>
  408aa0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  408aa4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  408aa8:	d0e4      	beq.n	408a74 <__swsetup_r+0x20>
  408aaa:	4628      	mov	r0, r5
  408aac:	4621      	mov	r1, r4
  408aae:	f000 fd2f 	bl	409510 <__smakebuf_r>
  408ab2:	89a3      	ldrh	r3, [r4, #12]
  408ab4:	6920      	ldr	r0, [r4, #16]
  408ab6:	e7dd      	b.n	408a74 <__swsetup_r+0x20>
  408ab8:	0799      	lsls	r1, r3, #30
  408aba:	bf58      	it	pl
  408abc:	6962      	ldrpl	r2, [r4, #20]
  408abe:	60a2      	str	r2, [r4, #8]
  408ac0:	2800      	cmp	r0, #0
  408ac2:	d1e0      	bne.n	408a86 <__swsetup_r+0x32>
  408ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408ac8:	061a      	lsls	r2, r3, #24
  408aca:	d5dd      	bpl.n	408a88 <__swsetup_r+0x34>
  408acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408ad0:	81a3      	strh	r3, [r4, #12]
  408ad2:	f04f 30ff 	mov.w	r0, #4294967295
  408ad6:	bd38      	pop	{r3, r4, r5, pc}
  408ad8:	4618      	mov	r0, r3
  408ada:	f000 f927 	bl	408d2c <__sinit>
  408ade:	e7c2      	b.n	408a66 <__swsetup_r+0x12>
  408ae0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408ae2:	b151      	cbz	r1, 408afa <__swsetup_r+0xa6>
  408ae4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408ae8:	4299      	cmp	r1, r3
  408aea:	d004      	beq.n	408af6 <__swsetup_r+0xa2>
  408aec:	4628      	mov	r0, r5
  408aee:	f000 fa43 	bl	408f78 <_free_r>
  408af2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408af6:	2300      	movs	r3, #0
  408af8:	6323      	str	r3, [r4, #48]	; 0x30
  408afa:	2300      	movs	r3, #0
  408afc:	6920      	ldr	r0, [r4, #16]
  408afe:	6063      	str	r3, [r4, #4]
  408b00:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  408b04:	6020      	str	r0, [r4, #0]
  408b06:	e7c5      	b.n	408a94 <__swsetup_r+0x40>
  408b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  408b0c:	2309      	movs	r3, #9
  408b0e:	602b      	str	r3, [r5, #0]
  408b10:	f04f 30ff 	mov.w	r0, #4294967295
  408b14:	81a2      	strh	r2, [r4, #12]
  408b16:	bd38      	pop	{r3, r4, r5, pc}
  408b18:	20400034 	.word	0x20400034

00408b1c <register_fini>:
  408b1c:	4b02      	ldr	r3, [pc, #8]	; (408b28 <register_fini+0xc>)
  408b1e:	b113      	cbz	r3, 408b26 <register_fini+0xa>
  408b20:	4802      	ldr	r0, [pc, #8]	; (408b2c <register_fini+0x10>)
  408b22:	f000 b805 	b.w	408b30 <atexit>
  408b26:	4770      	bx	lr
  408b28:	00000000 	.word	0x00000000
  408b2c:	00408d9d 	.word	0x00408d9d

00408b30 <atexit>:
  408b30:	2300      	movs	r3, #0
  408b32:	4601      	mov	r1, r0
  408b34:	461a      	mov	r2, r3
  408b36:	4618      	mov	r0, r3
  408b38:	f001 bb64 	b.w	40a204 <__register_exitproc>

00408b3c <__sflush_r>:
  408b3c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  408b40:	b29a      	uxth	r2, r3
  408b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408b46:	460d      	mov	r5, r1
  408b48:	0711      	lsls	r1, r2, #28
  408b4a:	4680      	mov	r8, r0
  408b4c:	d43a      	bmi.n	408bc4 <__sflush_r+0x88>
  408b4e:	686a      	ldr	r2, [r5, #4]
  408b50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  408b54:	2a00      	cmp	r2, #0
  408b56:	81ab      	strh	r3, [r5, #12]
  408b58:	dd6f      	ble.n	408c3a <__sflush_r+0xfe>
  408b5a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  408b5c:	2c00      	cmp	r4, #0
  408b5e:	d049      	beq.n	408bf4 <__sflush_r+0xb8>
  408b60:	2200      	movs	r2, #0
  408b62:	b29b      	uxth	r3, r3
  408b64:	f8d8 6000 	ldr.w	r6, [r8]
  408b68:	f8c8 2000 	str.w	r2, [r8]
  408b6c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  408b70:	d067      	beq.n	408c42 <__sflush_r+0x106>
  408b72:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  408b74:	075f      	lsls	r7, r3, #29
  408b76:	d505      	bpl.n	408b84 <__sflush_r+0x48>
  408b78:	6869      	ldr	r1, [r5, #4]
  408b7a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  408b7c:	1a52      	subs	r2, r2, r1
  408b7e:	b10b      	cbz	r3, 408b84 <__sflush_r+0x48>
  408b80:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  408b82:	1ad2      	subs	r2, r2, r3
  408b84:	2300      	movs	r3, #0
  408b86:	69e9      	ldr	r1, [r5, #28]
  408b88:	4640      	mov	r0, r8
  408b8a:	47a0      	blx	r4
  408b8c:	1c44      	adds	r4, r0, #1
  408b8e:	d03c      	beq.n	408c0a <__sflush_r+0xce>
  408b90:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  408b94:	692a      	ldr	r2, [r5, #16]
  408b96:	602a      	str	r2, [r5, #0]
  408b98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  408b9c:	2200      	movs	r2, #0
  408b9e:	81ab      	strh	r3, [r5, #12]
  408ba0:	04db      	lsls	r3, r3, #19
  408ba2:	606a      	str	r2, [r5, #4]
  408ba4:	d447      	bmi.n	408c36 <__sflush_r+0xfa>
  408ba6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  408ba8:	f8c8 6000 	str.w	r6, [r8]
  408bac:	b311      	cbz	r1, 408bf4 <__sflush_r+0xb8>
  408bae:	f105 0340 	add.w	r3, r5, #64	; 0x40
  408bb2:	4299      	cmp	r1, r3
  408bb4:	d002      	beq.n	408bbc <__sflush_r+0x80>
  408bb6:	4640      	mov	r0, r8
  408bb8:	f000 f9de 	bl	408f78 <_free_r>
  408bbc:	2000      	movs	r0, #0
  408bbe:	6328      	str	r0, [r5, #48]	; 0x30
  408bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408bc4:	692e      	ldr	r6, [r5, #16]
  408bc6:	b1ae      	cbz	r6, 408bf4 <__sflush_r+0xb8>
  408bc8:	682c      	ldr	r4, [r5, #0]
  408bca:	602e      	str	r6, [r5, #0]
  408bcc:	0791      	lsls	r1, r2, #30
  408bce:	bf0c      	ite	eq
  408bd0:	696b      	ldreq	r3, [r5, #20]
  408bd2:	2300      	movne	r3, #0
  408bd4:	1ba4      	subs	r4, r4, r6
  408bd6:	60ab      	str	r3, [r5, #8]
  408bd8:	e00a      	b.n	408bf0 <__sflush_r+0xb4>
  408bda:	4623      	mov	r3, r4
  408bdc:	4632      	mov	r2, r6
  408bde:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  408be0:	69e9      	ldr	r1, [r5, #28]
  408be2:	4640      	mov	r0, r8
  408be4:	47b8      	blx	r7
  408be6:	2800      	cmp	r0, #0
  408be8:	eba4 0400 	sub.w	r4, r4, r0
  408bec:	4406      	add	r6, r0
  408bee:	dd04      	ble.n	408bfa <__sflush_r+0xbe>
  408bf0:	2c00      	cmp	r4, #0
  408bf2:	dcf2      	bgt.n	408bda <__sflush_r+0x9e>
  408bf4:	2000      	movs	r0, #0
  408bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408bfa:	89ab      	ldrh	r3, [r5, #12]
  408bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408c00:	81ab      	strh	r3, [r5, #12]
  408c02:	f04f 30ff 	mov.w	r0, #4294967295
  408c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408c0a:	f8d8 4000 	ldr.w	r4, [r8]
  408c0e:	2c1d      	cmp	r4, #29
  408c10:	d8f3      	bhi.n	408bfa <__sflush_r+0xbe>
  408c12:	4b19      	ldr	r3, [pc, #100]	; (408c78 <__sflush_r+0x13c>)
  408c14:	40e3      	lsrs	r3, r4
  408c16:	43db      	mvns	r3, r3
  408c18:	f013 0301 	ands.w	r3, r3, #1
  408c1c:	d1ed      	bne.n	408bfa <__sflush_r+0xbe>
  408c1e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  408c22:	606b      	str	r3, [r5, #4]
  408c24:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  408c28:	6929      	ldr	r1, [r5, #16]
  408c2a:	81ab      	strh	r3, [r5, #12]
  408c2c:	04da      	lsls	r2, r3, #19
  408c2e:	6029      	str	r1, [r5, #0]
  408c30:	d5b9      	bpl.n	408ba6 <__sflush_r+0x6a>
  408c32:	2c00      	cmp	r4, #0
  408c34:	d1b7      	bne.n	408ba6 <__sflush_r+0x6a>
  408c36:	6528      	str	r0, [r5, #80]	; 0x50
  408c38:	e7b5      	b.n	408ba6 <__sflush_r+0x6a>
  408c3a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  408c3c:	2a00      	cmp	r2, #0
  408c3e:	dc8c      	bgt.n	408b5a <__sflush_r+0x1e>
  408c40:	e7d8      	b.n	408bf4 <__sflush_r+0xb8>
  408c42:	2301      	movs	r3, #1
  408c44:	69e9      	ldr	r1, [r5, #28]
  408c46:	4640      	mov	r0, r8
  408c48:	47a0      	blx	r4
  408c4a:	1c43      	adds	r3, r0, #1
  408c4c:	4602      	mov	r2, r0
  408c4e:	d002      	beq.n	408c56 <__sflush_r+0x11a>
  408c50:	89ab      	ldrh	r3, [r5, #12]
  408c52:	6aac      	ldr	r4, [r5, #40]	; 0x28
  408c54:	e78e      	b.n	408b74 <__sflush_r+0x38>
  408c56:	f8d8 3000 	ldr.w	r3, [r8]
  408c5a:	2b00      	cmp	r3, #0
  408c5c:	d0f8      	beq.n	408c50 <__sflush_r+0x114>
  408c5e:	2b1d      	cmp	r3, #29
  408c60:	d001      	beq.n	408c66 <__sflush_r+0x12a>
  408c62:	2b16      	cmp	r3, #22
  408c64:	d102      	bne.n	408c6c <__sflush_r+0x130>
  408c66:	f8c8 6000 	str.w	r6, [r8]
  408c6a:	e7c3      	b.n	408bf4 <__sflush_r+0xb8>
  408c6c:	89ab      	ldrh	r3, [r5, #12]
  408c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408c72:	81ab      	strh	r3, [r5, #12]
  408c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408c78:	20400001 	.word	0x20400001

00408c7c <_fflush_r>:
  408c7c:	b538      	push	{r3, r4, r5, lr}
  408c7e:	460d      	mov	r5, r1
  408c80:	4604      	mov	r4, r0
  408c82:	b108      	cbz	r0, 408c88 <_fflush_r+0xc>
  408c84:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408c86:	b1bb      	cbz	r3, 408cb8 <_fflush_r+0x3c>
  408c88:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  408c8c:	b188      	cbz	r0, 408cb2 <_fflush_r+0x36>
  408c8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  408c90:	07db      	lsls	r3, r3, #31
  408c92:	d401      	bmi.n	408c98 <_fflush_r+0x1c>
  408c94:	0581      	lsls	r1, r0, #22
  408c96:	d517      	bpl.n	408cc8 <_fflush_r+0x4c>
  408c98:	4620      	mov	r0, r4
  408c9a:	4629      	mov	r1, r5
  408c9c:	f7ff ff4e 	bl	408b3c <__sflush_r>
  408ca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  408ca2:	07da      	lsls	r2, r3, #31
  408ca4:	4604      	mov	r4, r0
  408ca6:	d402      	bmi.n	408cae <_fflush_r+0x32>
  408ca8:	89ab      	ldrh	r3, [r5, #12]
  408caa:	059b      	lsls	r3, r3, #22
  408cac:	d507      	bpl.n	408cbe <_fflush_r+0x42>
  408cae:	4620      	mov	r0, r4
  408cb0:	bd38      	pop	{r3, r4, r5, pc}
  408cb2:	4604      	mov	r4, r0
  408cb4:	4620      	mov	r0, r4
  408cb6:	bd38      	pop	{r3, r4, r5, pc}
  408cb8:	f000 f838 	bl	408d2c <__sinit>
  408cbc:	e7e4      	b.n	408c88 <_fflush_r+0xc>
  408cbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408cc0:	f000 fbf6 	bl	4094b0 <__retarget_lock_release_recursive>
  408cc4:	4620      	mov	r0, r4
  408cc6:	bd38      	pop	{r3, r4, r5, pc}
  408cc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408cca:	f000 fbef 	bl	4094ac <__retarget_lock_acquire_recursive>
  408cce:	e7e3      	b.n	408c98 <_fflush_r+0x1c>

00408cd0 <_cleanup_r>:
  408cd0:	4901      	ldr	r1, [pc, #4]	; (408cd8 <_cleanup_r+0x8>)
  408cd2:	f000 bbaf 	b.w	409434 <_fwalk_reent>
  408cd6:	bf00      	nop
  408cd8:	0040a2ed 	.word	0x0040a2ed

00408cdc <std.isra.0>:
  408cdc:	b510      	push	{r4, lr}
  408cde:	2300      	movs	r3, #0
  408ce0:	4604      	mov	r4, r0
  408ce2:	8181      	strh	r1, [r0, #12]
  408ce4:	81c2      	strh	r2, [r0, #14]
  408ce6:	6003      	str	r3, [r0, #0]
  408ce8:	6043      	str	r3, [r0, #4]
  408cea:	6083      	str	r3, [r0, #8]
  408cec:	6643      	str	r3, [r0, #100]	; 0x64
  408cee:	6103      	str	r3, [r0, #16]
  408cf0:	6143      	str	r3, [r0, #20]
  408cf2:	6183      	str	r3, [r0, #24]
  408cf4:	4619      	mov	r1, r3
  408cf6:	2208      	movs	r2, #8
  408cf8:	305c      	adds	r0, #92	; 0x5c
  408cfa:	f7fe fba3 	bl	407444 <memset>
  408cfe:	4807      	ldr	r0, [pc, #28]	; (408d1c <std.isra.0+0x40>)
  408d00:	4907      	ldr	r1, [pc, #28]	; (408d20 <std.isra.0+0x44>)
  408d02:	4a08      	ldr	r2, [pc, #32]	; (408d24 <std.isra.0+0x48>)
  408d04:	4b08      	ldr	r3, [pc, #32]	; (408d28 <std.isra.0+0x4c>)
  408d06:	6220      	str	r0, [r4, #32]
  408d08:	61e4      	str	r4, [r4, #28]
  408d0a:	6261      	str	r1, [r4, #36]	; 0x24
  408d0c:	62a2      	str	r2, [r4, #40]	; 0x28
  408d0e:	62e3      	str	r3, [r4, #44]	; 0x2c
  408d10:	f104 0058 	add.w	r0, r4, #88	; 0x58
  408d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408d18:	f000 bbc4 	b.w	4094a4 <__retarget_lock_init_recursive>
  408d1c:	0040a031 	.word	0x0040a031
  408d20:	0040a055 	.word	0x0040a055
  408d24:	0040a091 	.word	0x0040a091
  408d28:	0040a0b1 	.word	0x0040a0b1

00408d2c <__sinit>:
  408d2c:	b510      	push	{r4, lr}
  408d2e:	4604      	mov	r4, r0
  408d30:	4812      	ldr	r0, [pc, #72]	; (408d7c <__sinit+0x50>)
  408d32:	f000 fbbb 	bl	4094ac <__retarget_lock_acquire_recursive>
  408d36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  408d38:	b9d2      	cbnz	r2, 408d70 <__sinit+0x44>
  408d3a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  408d3e:	4810      	ldr	r0, [pc, #64]	; (408d80 <__sinit+0x54>)
  408d40:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  408d44:	2103      	movs	r1, #3
  408d46:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  408d4a:	63e0      	str	r0, [r4, #60]	; 0x3c
  408d4c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  408d50:	6860      	ldr	r0, [r4, #4]
  408d52:	2104      	movs	r1, #4
  408d54:	f7ff ffc2 	bl	408cdc <std.isra.0>
  408d58:	2201      	movs	r2, #1
  408d5a:	2109      	movs	r1, #9
  408d5c:	68a0      	ldr	r0, [r4, #8]
  408d5e:	f7ff ffbd 	bl	408cdc <std.isra.0>
  408d62:	2202      	movs	r2, #2
  408d64:	2112      	movs	r1, #18
  408d66:	68e0      	ldr	r0, [r4, #12]
  408d68:	f7ff ffb8 	bl	408cdc <std.isra.0>
  408d6c:	2301      	movs	r3, #1
  408d6e:	63a3      	str	r3, [r4, #56]	; 0x38
  408d70:	4802      	ldr	r0, [pc, #8]	; (408d7c <__sinit+0x50>)
  408d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408d76:	f000 bb9b 	b.w	4094b0 <__retarget_lock_release_recursive>
  408d7a:	bf00      	nop
  408d7c:	20404a2c 	.word	0x20404a2c
  408d80:	00408cd1 	.word	0x00408cd1

00408d84 <__sfp_lock_acquire>:
  408d84:	4801      	ldr	r0, [pc, #4]	; (408d8c <__sfp_lock_acquire+0x8>)
  408d86:	f000 bb91 	b.w	4094ac <__retarget_lock_acquire_recursive>
  408d8a:	bf00      	nop
  408d8c:	20404a40 	.word	0x20404a40

00408d90 <__sfp_lock_release>:
  408d90:	4801      	ldr	r0, [pc, #4]	; (408d98 <__sfp_lock_release+0x8>)
  408d92:	f000 bb8d 	b.w	4094b0 <__retarget_lock_release_recursive>
  408d96:	bf00      	nop
  408d98:	20404a40 	.word	0x20404a40

00408d9c <__libc_fini_array>:
  408d9c:	b538      	push	{r3, r4, r5, lr}
  408d9e:	4c0a      	ldr	r4, [pc, #40]	; (408dc8 <__libc_fini_array+0x2c>)
  408da0:	4d0a      	ldr	r5, [pc, #40]	; (408dcc <__libc_fini_array+0x30>)
  408da2:	1b64      	subs	r4, r4, r5
  408da4:	10a4      	asrs	r4, r4, #2
  408da6:	d00a      	beq.n	408dbe <__libc_fini_array+0x22>
  408da8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  408dac:	3b01      	subs	r3, #1
  408dae:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  408db2:	3c01      	subs	r4, #1
  408db4:	f855 3904 	ldr.w	r3, [r5], #-4
  408db8:	4798      	blx	r3
  408dba:	2c00      	cmp	r4, #0
  408dbc:	d1f9      	bne.n	408db2 <__libc_fini_array+0x16>
  408dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  408dc2:	f003 ba69 	b.w	40c298 <_fini>
  408dc6:	bf00      	nop
  408dc8:	0040c2a8 	.word	0x0040c2a8
  408dcc:	0040c2a4 	.word	0x0040c2a4

00408dd0 <__fputwc>:
  408dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408dd4:	b082      	sub	sp, #8
  408dd6:	4680      	mov	r8, r0
  408dd8:	4689      	mov	r9, r1
  408dda:	4614      	mov	r4, r2
  408ddc:	f000 fb54 	bl	409488 <__locale_mb_cur_max>
  408de0:	2801      	cmp	r0, #1
  408de2:	d036      	beq.n	408e52 <__fputwc+0x82>
  408de4:	464a      	mov	r2, r9
  408de6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  408dea:	a901      	add	r1, sp, #4
  408dec:	4640      	mov	r0, r8
  408dee:	f001 f9bb 	bl	40a168 <_wcrtomb_r>
  408df2:	1c42      	adds	r2, r0, #1
  408df4:	4606      	mov	r6, r0
  408df6:	d025      	beq.n	408e44 <__fputwc+0x74>
  408df8:	b3a8      	cbz	r0, 408e66 <__fputwc+0x96>
  408dfa:	f89d e004 	ldrb.w	lr, [sp, #4]
  408dfe:	2500      	movs	r5, #0
  408e00:	f10d 0a04 	add.w	sl, sp, #4
  408e04:	e009      	b.n	408e1a <__fputwc+0x4a>
  408e06:	6823      	ldr	r3, [r4, #0]
  408e08:	1c5a      	adds	r2, r3, #1
  408e0a:	6022      	str	r2, [r4, #0]
  408e0c:	f883 e000 	strb.w	lr, [r3]
  408e10:	3501      	adds	r5, #1
  408e12:	42b5      	cmp	r5, r6
  408e14:	d227      	bcs.n	408e66 <__fputwc+0x96>
  408e16:	f815 e00a 	ldrb.w	lr, [r5, sl]
  408e1a:	68a3      	ldr	r3, [r4, #8]
  408e1c:	3b01      	subs	r3, #1
  408e1e:	2b00      	cmp	r3, #0
  408e20:	60a3      	str	r3, [r4, #8]
  408e22:	daf0      	bge.n	408e06 <__fputwc+0x36>
  408e24:	69a7      	ldr	r7, [r4, #24]
  408e26:	42bb      	cmp	r3, r7
  408e28:	4671      	mov	r1, lr
  408e2a:	4622      	mov	r2, r4
  408e2c:	4640      	mov	r0, r8
  408e2e:	db02      	blt.n	408e36 <__fputwc+0x66>
  408e30:	f1be 0f0a 	cmp.w	lr, #10
  408e34:	d1e7      	bne.n	408e06 <__fputwc+0x36>
  408e36:	f001 f93f 	bl	40a0b8 <__swbuf_r>
  408e3a:	1c43      	adds	r3, r0, #1
  408e3c:	d1e8      	bne.n	408e10 <__fputwc+0x40>
  408e3e:	b002      	add	sp, #8
  408e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408e44:	89a3      	ldrh	r3, [r4, #12]
  408e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408e4a:	81a3      	strh	r3, [r4, #12]
  408e4c:	b002      	add	sp, #8
  408e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408e52:	f109 33ff 	add.w	r3, r9, #4294967295
  408e56:	2bfe      	cmp	r3, #254	; 0xfe
  408e58:	d8c4      	bhi.n	408de4 <__fputwc+0x14>
  408e5a:	fa5f fe89 	uxtb.w	lr, r9
  408e5e:	4606      	mov	r6, r0
  408e60:	f88d e004 	strb.w	lr, [sp, #4]
  408e64:	e7cb      	b.n	408dfe <__fputwc+0x2e>
  408e66:	4648      	mov	r0, r9
  408e68:	b002      	add	sp, #8
  408e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408e6e:	bf00      	nop

00408e70 <_fputwc_r>:
  408e70:	b530      	push	{r4, r5, lr}
  408e72:	6e53      	ldr	r3, [r2, #100]	; 0x64
  408e74:	f013 0f01 	tst.w	r3, #1
  408e78:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  408e7c:	4614      	mov	r4, r2
  408e7e:	b083      	sub	sp, #12
  408e80:	4605      	mov	r5, r0
  408e82:	b29a      	uxth	r2, r3
  408e84:	d101      	bne.n	408e8a <_fputwc_r+0x1a>
  408e86:	0590      	lsls	r0, r2, #22
  408e88:	d51c      	bpl.n	408ec4 <_fputwc_r+0x54>
  408e8a:	0490      	lsls	r0, r2, #18
  408e8c:	d406      	bmi.n	408e9c <_fputwc_r+0x2c>
  408e8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  408e90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  408e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408e98:	81a3      	strh	r3, [r4, #12]
  408e9a:	6662      	str	r2, [r4, #100]	; 0x64
  408e9c:	4628      	mov	r0, r5
  408e9e:	4622      	mov	r2, r4
  408ea0:	f7ff ff96 	bl	408dd0 <__fputwc>
  408ea4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408ea6:	07da      	lsls	r2, r3, #31
  408ea8:	4605      	mov	r5, r0
  408eaa:	d402      	bmi.n	408eb2 <_fputwc_r+0x42>
  408eac:	89a3      	ldrh	r3, [r4, #12]
  408eae:	059b      	lsls	r3, r3, #22
  408eb0:	d502      	bpl.n	408eb8 <_fputwc_r+0x48>
  408eb2:	4628      	mov	r0, r5
  408eb4:	b003      	add	sp, #12
  408eb6:	bd30      	pop	{r4, r5, pc}
  408eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408eba:	f000 faf9 	bl	4094b0 <__retarget_lock_release_recursive>
  408ebe:	4628      	mov	r0, r5
  408ec0:	b003      	add	sp, #12
  408ec2:	bd30      	pop	{r4, r5, pc}
  408ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408ec6:	9101      	str	r1, [sp, #4]
  408ec8:	f000 faf0 	bl	4094ac <__retarget_lock_acquire_recursive>
  408ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408ed0:	9901      	ldr	r1, [sp, #4]
  408ed2:	b29a      	uxth	r2, r3
  408ed4:	e7d9      	b.n	408e8a <_fputwc_r+0x1a>
  408ed6:	bf00      	nop

00408ed8 <_malloc_trim_r>:
  408ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408eda:	4f24      	ldr	r7, [pc, #144]	; (408f6c <_malloc_trim_r+0x94>)
  408edc:	460c      	mov	r4, r1
  408ede:	4606      	mov	r6, r0
  408ee0:	f000 fee2 	bl	409ca8 <__malloc_lock>
  408ee4:	68bb      	ldr	r3, [r7, #8]
  408ee6:	685d      	ldr	r5, [r3, #4]
  408ee8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  408eec:	310f      	adds	r1, #15
  408eee:	f025 0503 	bic.w	r5, r5, #3
  408ef2:	4429      	add	r1, r5
  408ef4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  408ef8:	f021 010f 	bic.w	r1, r1, #15
  408efc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  408f00:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  408f04:	db07      	blt.n	408f16 <_malloc_trim_r+0x3e>
  408f06:	2100      	movs	r1, #0
  408f08:	4630      	mov	r0, r6
  408f0a:	f001 f87f 	bl	40a00c <_sbrk_r>
  408f0e:	68bb      	ldr	r3, [r7, #8]
  408f10:	442b      	add	r3, r5
  408f12:	4298      	cmp	r0, r3
  408f14:	d004      	beq.n	408f20 <_malloc_trim_r+0x48>
  408f16:	4630      	mov	r0, r6
  408f18:	f000 fecc 	bl	409cb4 <__malloc_unlock>
  408f1c:	2000      	movs	r0, #0
  408f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408f20:	4261      	negs	r1, r4
  408f22:	4630      	mov	r0, r6
  408f24:	f001 f872 	bl	40a00c <_sbrk_r>
  408f28:	3001      	adds	r0, #1
  408f2a:	d00d      	beq.n	408f48 <_malloc_trim_r+0x70>
  408f2c:	4b10      	ldr	r3, [pc, #64]	; (408f70 <_malloc_trim_r+0x98>)
  408f2e:	68ba      	ldr	r2, [r7, #8]
  408f30:	6819      	ldr	r1, [r3, #0]
  408f32:	1b2d      	subs	r5, r5, r4
  408f34:	f045 0501 	orr.w	r5, r5, #1
  408f38:	4630      	mov	r0, r6
  408f3a:	1b09      	subs	r1, r1, r4
  408f3c:	6055      	str	r5, [r2, #4]
  408f3e:	6019      	str	r1, [r3, #0]
  408f40:	f000 feb8 	bl	409cb4 <__malloc_unlock>
  408f44:	2001      	movs	r0, #1
  408f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408f48:	2100      	movs	r1, #0
  408f4a:	4630      	mov	r0, r6
  408f4c:	f001 f85e 	bl	40a00c <_sbrk_r>
  408f50:	68ba      	ldr	r2, [r7, #8]
  408f52:	1a83      	subs	r3, r0, r2
  408f54:	2b0f      	cmp	r3, #15
  408f56:	ddde      	ble.n	408f16 <_malloc_trim_r+0x3e>
  408f58:	4c06      	ldr	r4, [pc, #24]	; (408f74 <_malloc_trim_r+0x9c>)
  408f5a:	4905      	ldr	r1, [pc, #20]	; (408f70 <_malloc_trim_r+0x98>)
  408f5c:	6824      	ldr	r4, [r4, #0]
  408f5e:	f043 0301 	orr.w	r3, r3, #1
  408f62:	1b00      	subs	r0, r0, r4
  408f64:	6053      	str	r3, [r2, #4]
  408f66:	6008      	str	r0, [r1, #0]
  408f68:	e7d5      	b.n	408f16 <_malloc_trim_r+0x3e>
  408f6a:	bf00      	nop
  408f6c:	204005d0 	.word	0x204005d0
  408f70:	20403958 	.word	0x20403958
  408f74:	204009d8 	.word	0x204009d8

00408f78 <_free_r>:
  408f78:	2900      	cmp	r1, #0
  408f7a:	d044      	beq.n	409006 <_free_r+0x8e>
  408f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408f80:	460d      	mov	r5, r1
  408f82:	4680      	mov	r8, r0
  408f84:	f000 fe90 	bl	409ca8 <__malloc_lock>
  408f88:	f855 7c04 	ldr.w	r7, [r5, #-4]
  408f8c:	4969      	ldr	r1, [pc, #420]	; (409134 <_free_r+0x1bc>)
  408f8e:	f027 0301 	bic.w	r3, r7, #1
  408f92:	f1a5 0408 	sub.w	r4, r5, #8
  408f96:	18e2      	adds	r2, r4, r3
  408f98:	688e      	ldr	r6, [r1, #8]
  408f9a:	6850      	ldr	r0, [r2, #4]
  408f9c:	42b2      	cmp	r2, r6
  408f9e:	f020 0003 	bic.w	r0, r0, #3
  408fa2:	d05e      	beq.n	409062 <_free_r+0xea>
  408fa4:	07fe      	lsls	r6, r7, #31
  408fa6:	6050      	str	r0, [r2, #4]
  408fa8:	d40b      	bmi.n	408fc2 <_free_r+0x4a>
  408faa:	f855 7c08 	ldr.w	r7, [r5, #-8]
  408fae:	1be4      	subs	r4, r4, r7
  408fb0:	f101 0e08 	add.w	lr, r1, #8
  408fb4:	68a5      	ldr	r5, [r4, #8]
  408fb6:	4575      	cmp	r5, lr
  408fb8:	443b      	add	r3, r7
  408fba:	d06d      	beq.n	409098 <_free_r+0x120>
  408fbc:	68e7      	ldr	r7, [r4, #12]
  408fbe:	60ef      	str	r7, [r5, #12]
  408fc0:	60bd      	str	r5, [r7, #8]
  408fc2:	1815      	adds	r5, r2, r0
  408fc4:	686d      	ldr	r5, [r5, #4]
  408fc6:	07ed      	lsls	r5, r5, #31
  408fc8:	d53e      	bpl.n	409048 <_free_r+0xd0>
  408fca:	f043 0201 	orr.w	r2, r3, #1
  408fce:	6062      	str	r2, [r4, #4]
  408fd0:	50e3      	str	r3, [r4, r3]
  408fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408fd6:	d217      	bcs.n	409008 <_free_r+0x90>
  408fd8:	08db      	lsrs	r3, r3, #3
  408fda:	1c58      	adds	r0, r3, #1
  408fdc:	109a      	asrs	r2, r3, #2
  408fde:	684d      	ldr	r5, [r1, #4]
  408fe0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  408fe4:	60a7      	str	r7, [r4, #8]
  408fe6:	2301      	movs	r3, #1
  408fe8:	4093      	lsls	r3, r2
  408fea:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  408fee:	432b      	orrs	r3, r5
  408ff0:	3a08      	subs	r2, #8
  408ff2:	60e2      	str	r2, [r4, #12]
  408ff4:	604b      	str	r3, [r1, #4]
  408ff6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  408ffa:	60fc      	str	r4, [r7, #12]
  408ffc:	4640      	mov	r0, r8
  408ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409002:	f000 be57 	b.w	409cb4 <__malloc_unlock>
  409006:	4770      	bx	lr
  409008:	0a5a      	lsrs	r2, r3, #9
  40900a:	2a04      	cmp	r2, #4
  40900c:	d852      	bhi.n	4090b4 <_free_r+0x13c>
  40900e:	099a      	lsrs	r2, r3, #6
  409010:	f102 0739 	add.w	r7, r2, #57	; 0x39
  409014:	00ff      	lsls	r7, r7, #3
  409016:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40901a:	19c8      	adds	r0, r1, r7
  40901c:	59ca      	ldr	r2, [r1, r7]
  40901e:	3808      	subs	r0, #8
  409020:	4290      	cmp	r0, r2
  409022:	d04f      	beq.n	4090c4 <_free_r+0x14c>
  409024:	6851      	ldr	r1, [r2, #4]
  409026:	f021 0103 	bic.w	r1, r1, #3
  40902a:	428b      	cmp	r3, r1
  40902c:	d232      	bcs.n	409094 <_free_r+0x11c>
  40902e:	6892      	ldr	r2, [r2, #8]
  409030:	4290      	cmp	r0, r2
  409032:	d1f7      	bne.n	409024 <_free_r+0xac>
  409034:	68c3      	ldr	r3, [r0, #12]
  409036:	60a0      	str	r0, [r4, #8]
  409038:	60e3      	str	r3, [r4, #12]
  40903a:	609c      	str	r4, [r3, #8]
  40903c:	60c4      	str	r4, [r0, #12]
  40903e:	4640      	mov	r0, r8
  409040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409044:	f000 be36 	b.w	409cb4 <__malloc_unlock>
  409048:	6895      	ldr	r5, [r2, #8]
  40904a:	4f3b      	ldr	r7, [pc, #236]	; (409138 <_free_r+0x1c0>)
  40904c:	42bd      	cmp	r5, r7
  40904e:	4403      	add	r3, r0
  409050:	d040      	beq.n	4090d4 <_free_r+0x15c>
  409052:	68d0      	ldr	r0, [r2, #12]
  409054:	60e8      	str	r0, [r5, #12]
  409056:	f043 0201 	orr.w	r2, r3, #1
  40905a:	6085      	str	r5, [r0, #8]
  40905c:	6062      	str	r2, [r4, #4]
  40905e:	50e3      	str	r3, [r4, r3]
  409060:	e7b7      	b.n	408fd2 <_free_r+0x5a>
  409062:	07ff      	lsls	r7, r7, #31
  409064:	4403      	add	r3, r0
  409066:	d407      	bmi.n	409078 <_free_r+0x100>
  409068:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40906c:	1aa4      	subs	r4, r4, r2
  40906e:	4413      	add	r3, r2
  409070:	68a0      	ldr	r0, [r4, #8]
  409072:	68e2      	ldr	r2, [r4, #12]
  409074:	60c2      	str	r2, [r0, #12]
  409076:	6090      	str	r0, [r2, #8]
  409078:	4a30      	ldr	r2, [pc, #192]	; (40913c <_free_r+0x1c4>)
  40907a:	6812      	ldr	r2, [r2, #0]
  40907c:	f043 0001 	orr.w	r0, r3, #1
  409080:	4293      	cmp	r3, r2
  409082:	6060      	str	r0, [r4, #4]
  409084:	608c      	str	r4, [r1, #8]
  409086:	d3b9      	bcc.n	408ffc <_free_r+0x84>
  409088:	4b2d      	ldr	r3, [pc, #180]	; (409140 <_free_r+0x1c8>)
  40908a:	4640      	mov	r0, r8
  40908c:	6819      	ldr	r1, [r3, #0]
  40908e:	f7ff ff23 	bl	408ed8 <_malloc_trim_r>
  409092:	e7b3      	b.n	408ffc <_free_r+0x84>
  409094:	4610      	mov	r0, r2
  409096:	e7cd      	b.n	409034 <_free_r+0xbc>
  409098:	1811      	adds	r1, r2, r0
  40909a:	6849      	ldr	r1, [r1, #4]
  40909c:	07c9      	lsls	r1, r1, #31
  40909e:	d444      	bmi.n	40912a <_free_r+0x1b2>
  4090a0:	6891      	ldr	r1, [r2, #8]
  4090a2:	68d2      	ldr	r2, [r2, #12]
  4090a4:	60ca      	str	r2, [r1, #12]
  4090a6:	4403      	add	r3, r0
  4090a8:	f043 0001 	orr.w	r0, r3, #1
  4090ac:	6091      	str	r1, [r2, #8]
  4090ae:	6060      	str	r0, [r4, #4]
  4090b0:	50e3      	str	r3, [r4, r3]
  4090b2:	e7a3      	b.n	408ffc <_free_r+0x84>
  4090b4:	2a14      	cmp	r2, #20
  4090b6:	d816      	bhi.n	4090e6 <_free_r+0x16e>
  4090b8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4090bc:	00ff      	lsls	r7, r7, #3
  4090be:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4090c2:	e7aa      	b.n	40901a <_free_r+0xa2>
  4090c4:	10aa      	asrs	r2, r5, #2
  4090c6:	2301      	movs	r3, #1
  4090c8:	684d      	ldr	r5, [r1, #4]
  4090ca:	4093      	lsls	r3, r2
  4090cc:	432b      	orrs	r3, r5
  4090ce:	604b      	str	r3, [r1, #4]
  4090d0:	4603      	mov	r3, r0
  4090d2:	e7b0      	b.n	409036 <_free_r+0xbe>
  4090d4:	f043 0201 	orr.w	r2, r3, #1
  4090d8:	614c      	str	r4, [r1, #20]
  4090da:	610c      	str	r4, [r1, #16]
  4090dc:	60e5      	str	r5, [r4, #12]
  4090de:	60a5      	str	r5, [r4, #8]
  4090e0:	6062      	str	r2, [r4, #4]
  4090e2:	50e3      	str	r3, [r4, r3]
  4090e4:	e78a      	b.n	408ffc <_free_r+0x84>
  4090e6:	2a54      	cmp	r2, #84	; 0x54
  4090e8:	d806      	bhi.n	4090f8 <_free_r+0x180>
  4090ea:	0b1a      	lsrs	r2, r3, #12
  4090ec:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4090f0:	00ff      	lsls	r7, r7, #3
  4090f2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4090f6:	e790      	b.n	40901a <_free_r+0xa2>
  4090f8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4090fc:	d806      	bhi.n	40910c <_free_r+0x194>
  4090fe:	0bda      	lsrs	r2, r3, #15
  409100:	f102 0778 	add.w	r7, r2, #120	; 0x78
  409104:	00ff      	lsls	r7, r7, #3
  409106:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40910a:	e786      	b.n	40901a <_free_r+0xa2>
  40910c:	f240 5054 	movw	r0, #1364	; 0x554
  409110:	4282      	cmp	r2, r0
  409112:	d806      	bhi.n	409122 <_free_r+0x1aa>
  409114:	0c9a      	lsrs	r2, r3, #18
  409116:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40911a:	00ff      	lsls	r7, r7, #3
  40911c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  409120:	e77b      	b.n	40901a <_free_r+0xa2>
  409122:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  409126:	257e      	movs	r5, #126	; 0x7e
  409128:	e777      	b.n	40901a <_free_r+0xa2>
  40912a:	f043 0101 	orr.w	r1, r3, #1
  40912e:	6061      	str	r1, [r4, #4]
  409130:	6013      	str	r3, [r2, #0]
  409132:	e763      	b.n	408ffc <_free_r+0x84>
  409134:	204005d0 	.word	0x204005d0
  409138:	204005d8 	.word	0x204005d8
  40913c:	204009dc 	.word	0x204009dc
  409140:	20403988 	.word	0x20403988

00409144 <__sfvwrite_r>:
  409144:	6893      	ldr	r3, [r2, #8]
  409146:	2b00      	cmp	r3, #0
  409148:	d073      	beq.n	409232 <__sfvwrite_r+0xee>
  40914a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40914e:	898b      	ldrh	r3, [r1, #12]
  409150:	b083      	sub	sp, #12
  409152:	460c      	mov	r4, r1
  409154:	0719      	lsls	r1, r3, #28
  409156:	9000      	str	r0, [sp, #0]
  409158:	4616      	mov	r6, r2
  40915a:	d526      	bpl.n	4091aa <__sfvwrite_r+0x66>
  40915c:	6922      	ldr	r2, [r4, #16]
  40915e:	b322      	cbz	r2, 4091aa <__sfvwrite_r+0x66>
  409160:	f013 0002 	ands.w	r0, r3, #2
  409164:	6835      	ldr	r5, [r6, #0]
  409166:	d02c      	beq.n	4091c2 <__sfvwrite_r+0x7e>
  409168:	f04f 0900 	mov.w	r9, #0
  40916c:	4fb0      	ldr	r7, [pc, #704]	; (409430 <__sfvwrite_r+0x2ec>)
  40916e:	46c8      	mov	r8, r9
  409170:	46b2      	mov	sl, r6
  409172:	45b8      	cmp	r8, r7
  409174:	4643      	mov	r3, r8
  409176:	464a      	mov	r2, r9
  409178:	bf28      	it	cs
  40917a:	463b      	movcs	r3, r7
  40917c:	9800      	ldr	r0, [sp, #0]
  40917e:	f1b8 0f00 	cmp.w	r8, #0
  409182:	d050      	beq.n	409226 <__sfvwrite_r+0xe2>
  409184:	69e1      	ldr	r1, [r4, #28]
  409186:	6a66      	ldr	r6, [r4, #36]	; 0x24
  409188:	47b0      	blx	r6
  40918a:	2800      	cmp	r0, #0
  40918c:	dd58      	ble.n	409240 <__sfvwrite_r+0xfc>
  40918e:	f8da 3008 	ldr.w	r3, [sl, #8]
  409192:	1a1b      	subs	r3, r3, r0
  409194:	4481      	add	r9, r0
  409196:	eba8 0800 	sub.w	r8, r8, r0
  40919a:	f8ca 3008 	str.w	r3, [sl, #8]
  40919e:	2b00      	cmp	r3, #0
  4091a0:	d1e7      	bne.n	409172 <__sfvwrite_r+0x2e>
  4091a2:	2000      	movs	r0, #0
  4091a4:	b003      	add	sp, #12
  4091a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4091aa:	4621      	mov	r1, r4
  4091ac:	9800      	ldr	r0, [sp, #0]
  4091ae:	f7ff fc51 	bl	408a54 <__swsetup_r>
  4091b2:	2800      	cmp	r0, #0
  4091b4:	f040 8133 	bne.w	40941e <__sfvwrite_r+0x2da>
  4091b8:	89a3      	ldrh	r3, [r4, #12]
  4091ba:	6835      	ldr	r5, [r6, #0]
  4091bc:	f013 0002 	ands.w	r0, r3, #2
  4091c0:	d1d2      	bne.n	409168 <__sfvwrite_r+0x24>
  4091c2:	f013 0901 	ands.w	r9, r3, #1
  4091c6:	d145      	bne.n	409254 <__sfvwrite_r+0x110>
  4091c8:	464f      	mov	r7, r9
  4091ca:	9601      	str	r6, [sp, #4]
  4091cc:	b337      	cbz	r7, 40921c <__sfvwrite_r+0xd8>
  4091ce:	059a      	lsls	r2, r3, #22
  4091d0:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4091d4:	f140 8083 	bpl.w	4092de <__sfvwrite_r+0x19a>
  4091d8:	4547      	cmp	r7, r8
  4091da:	46c3      	mov	fp, r8
  4091dc:	f0c0 80ab 	bcc.w	409336 <__sfvwrite_r+0x1f2>
  4091e0:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4091e4:	f040 80ac 	bne.w	409340 <__sfvwrite_r+0x1fc>
  4091e8:	6820      	ldr	r0, [r4, #0]
  4091ea:	46ba      	mov	sl, r7
  4091ec:	465a      	mov	r2, fp
  4091ee:	4649      	mov	r1, r9
  4091f0:	f000 fcf6 	bl	409be0 <memmove>
  4091f4:	68a2      	ldr	r2, [r4, #8]
  4091f6:	6823      	ldr	r3, [r4, #0]
  4091f8:	eba2 0208 	sub.w	r2, r2, r8
  4091fc:	445b      	add	r3, fp
  4091fe:	60a2      	str	r2, [r4, #8]
  409200:	6023      	str	r3, [r4, #0]
  409202:	9a01      	ldr	r2, [sp, #4]
  409204:	6893      	ldr	r3, [r2, #8]
  409206:	eba3 030a 	sub.w	r3, r3, sl
  40920a:	44d1      	add	r9, sl
  40920c:	eba7 070a 	sub.w	r7, r7, sl
  409210:	6093      	str	r3, [r2, #8]
  409212:	2b00      	cmp	r3, #0
  409214:	d0c5      	beq.n	4091a2 <__sfvwrite_r+0x5e>
  409216:	89a3      	ldrh	r3, [r4, #12]
  409218:	2f00      	cmp	r7, #0
  40921a:	d1d8      	bne.n	4091ce <__sfvwrite_r+0x8a>
  40921c:	f8d5 9000 	ldr.w	r9, [r5]
  409220:	686f      	ldr	r7, [r5, #4]
  409222:	3508      	adds	r5, #8
  409224:	e7d2      	b.n	4091cc <__sfvwrite_r+0x88>
  409226:	f8d5 9000 	ldr.w	r9, [r5]
  40922a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40922e:	3508      	adds	r5, #8
  409230:	e79f      	b.n	409172 <__sfvwrite_r+0x2e>
  409232:	2000      	movs	r0, #0
  409234:	4770      	bx	lr
  409236:	4621      	mov	r1, r4
  409238:	9800      	ldr	r0, [sp, #0]
  40923a:	f7ff fd1f 	bl	408c7c <_fflush_r>
  40923e:	b370      	cbz	r0, 40929e <__sfvwrite_r+0x15a>
  409240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409248:	f04f 30ff 	mov.w	r0, #4294967295
  40924c:	81a3      	strh	r3, [r4, #12]
  40924e:	b003      	add	sp, #12
  409250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409254:	4681      	mov	r9, r0
  409256:	4633      	mov	r3, r6
  409258:	464e      	mov	r6, r9
  40925a:	46a8      	mov	r8, r5
  40925c:	469a      	mov	sl, r3
  40925e:	464d      	mov	r5, r9
  409260:	b34e      	cbz	r6, 4092b6 <__sfvwrite_r+0x172>
  409262:	b380      	cbz	r0, 4092c6 <__sfvwrite_r+0x182>
  409264:	6820      	ldr	r0, [r4, #0]
  409266:	6923      	ldr	r3, [r4, #16]
  409268:	6962      	ldr	r2, [r4, #20]
  40926a:	45b1      	cmp	r9, r6
  40926c:	46cb      	mov	fp, r9
  40926e:	bf28      	it	cs
  409270:	46b3      	movcs	fp, r6
  409272:	4298      	cmp	r0, r3
  409274:	465f      	mov	r7, fp
  409276:	d904      	bls.n	409282 <__sfvwrite_r+0x13e>
  409278:	68a3      	ldr	r3, [r4, #8]
  40927a:	4413      	add	r3, r2
  40927c:	459b      	cmp	fp, r3
  40927e:	f300 80a6 	bgt.w	4093ce <__sfvwrite_r+0x28a>
  409282:	4593      	cmp	fp, r2
  409284:	db4b      	blt.n	40931e <__sfvwrite_r+0x1da>
  409286:	4613      	mov	r3, r2
  409288:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40928a:	69e1      	ldr	r1, [r4, #28]
  40928c:	9800      	ldr	r0, [sp, #0]
  40928e:	462a      	mov	r2, r5
  409290:	47b8      	blx	r7
  409292:	1e07      	subs	r7, r0, #0
  409294:	ddd4      	ble.n	409240 <__sfvwrite_r+0xfc>
  409296:	ebb9 0907 	subs.w	r9, r9, r7
  40929a:	d0cc      	beq.n	409236 <__sfvwrite_r+0xf2>
  40929c:	2001      	movs	r0, #1
  40929e:	f8da 3008 	ldr.w	r3, [sl, #8]
  4092a2:	1bdb      	subs	r3, r3, r7
  4092a4:	443d      	add	r5, r7
  4092a6:	1bf6      	subs	r6, r6, r7
  4092a8:	f8ca 3008 	str.w	r3, [sl, #8]
  4092ac:	2b00      	cmp	r3, #0
  4092ae:	f43f af78 	beq.w	4091a2 <__sfvwrite_r+0x5e>
  4092b2:	2e00      	cmp	r6, #0
  4092b4:	d1d5      	bne.n	409262 <__sfvwrite_r+0x11e>
  4092b6:	f108 0308 	add.w	r3, r8, #8
  4092ba:	e913 0060 	ldmdb	r3, {r5, r6}
  4092be:	4698      	mov	r8, r3
  4092c0:	3308      	adds	r3, #8
  4092c2:	2e00      	cmp	r6, #0
  4092c4:	d0f9      	beq.n	4092ba <__sfvwrite_r+0x176>
  4092c6:	4632      	mov	r2, r6
  4092c8:	210a      	movs	r1, #10
  4092ca:	4628      	mov	r0, r5
  4092cc:	f000 fc38 	bl	409b40 <memchr>
  4092d0:	2800      	cmp	r0, #0
  4092d2:	f000 80a1 	beq.w	409418 <__sfvwrite_r+0x2d4>
  4092d6:	3001      	adds	r0, #1
  4092d8:	eba0 0905 	sub.w	r9, r0, r5
  4092dc:	e7c2      	b.n	409264 <__sfvwrite_r+0x120>
  4092de:	6820      	ldr	r0, [r4, #0]
  4092e0:	6923      	ldr	r3, [r4, #16]
  4092e2:	4298      	cmp	r0, r3
  4092e4:	d802      	bhi.n	4092ec <__sfvwrite_r+0x1a8>
  4092e6:	6963      	ldr	r3, [r4, #20]
  4092e8:	429f      	cmp	r7, r3
  4092ea:	d25d      	bcs.n	4093a8 <__sfvwrite_r+0x264>
  4092ec:	45b8      	cmp	r8, r7
  4092ee:	bf28      	it	cs
  4092f0:	46b8      	movcs	r8, r7
  4092f2:	4642      	mov	r2, r8
  4092f4:	4649      	mov	r1, r9
  4092f6:	f000 fc73 	bl	409be0 <memmove>
  4092fa:	68a3      	ldr	r3, [r4, #8]
  4092fc:	6822      	ldr	r2, [r4, #0]
  4092fe:	eba3 0308 	sub.w	r3, r3, r8
  409302:	4442      	add	r2, r8
  409304:	60a3      	str	r3, [r4, #8]
  409306:	6022      	str	r2, [r4, #0]
  409308:	b10b      	cbz	r3, 40930e <__sfvwrite_r+0x1ca>
  40930a:	46c2      	mov	sl, r8
  40930c:	e779      	b.n	409202 <__sfvwrite_r+0xbe>
  40930e:	4621      	mov	r1, r4
  409310:	9800      	ldr	r0, [sp, #0]
  409312:	f7ff fcb3 	bl	408c7c <_fflush_r>
  409316:	2800      	cmp	r0, #0
  409318:	d192      	bne.n	409240 <__sfvwrite_r+0xfc>
  40931a:	46c2      	mov	sl, r8
  40931c:	e771      	b.n	409202 <__sfvwrite_r+0xbe>
  40931e:	465a      	mov	r2, fp
  409320:	4629      	mov	r1, r5
  409322:	f000 fc5d 	bl	409be0 <memmove>
  409326:	68a2      	ldr	r2, [r4, #8]
  409328:	6823      	ldr	r3, [r4, #0]
  40932a:	eba2 020b 	sub.w	r2, r2, fp
  40932e:	445b      	add	r3, fp
  409330:	60a2      	str	r2, [r4, #8]
  409332:	6023      	str	r3, [r4, #0]
  409334:	e7af      	b.n	409296 <__sfvwrite_r+0x152>
  409336:	6820      	ldr	r0, [r4, #0]
  409338:	46b8      	mov	r8, r7
  40933a:	46ba      	mov	sl, r7
  40933c:	46bb      	mov	fp, r7
  40933e:	e755      	b.n	4091ec <__sfvwrite_r+0xa8>
  409340:	6962      	ldr	r2, [r4, #20]
  409342:	6820      	ldr	r0, [r4, #0]
  409344:	6921      	ldr	r1, [r4, #16]
  409346:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40934a:	eba0 0a01 	sub.w	sl, r0, r1
  40934e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  409352:	f10a 0001 	add.w	r0, sl, #1
  409356:	ea4f 0868 	mov.w	r8, r8, asr #1
  40935a:	4438      	add	r0, r7
  40935c:	4540      	cmp	r0, r8
  40935e:	4642      	mov	r2, r8
  409360:	bf84      	itt	hi
  409362:	4680      	movhi	r8, r0
  409364:	4642      	movhi	r2, r8
  409366:	055b      	lsls	r3, r3, #21
  409368:	d544      	bpl.n	4093f4 <__sfvwrite_r+0x2b0>
  40936a:	4611      	mov	r1, r2
  40936c:	9800      	ldr	r0, [sp, #0]
  40936e:	f000 f921 	bl	4095b4 <_malloc_r>
  409372:	4683      	mov	fp, r0
  409374:	2800      	cmp	r0, #0
  409376:	d055      	beq.n	409424 <__sfvwrite_r+0x2e0>
  409378:	4652      	mov	r2, sl
  40937a:	6921      	ldr	r1, [r4, #16]
  40937c:	f7fd ffc8 	bl	407310 <memcpy>
  409380:	89a3      	ldrh	r3, [r4, #12]
  409382:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  409386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40938a:	81a3      	strh	r3, [r4, #12]
  40938c:	eb0b 000a 	add.w	r0, fp, sl
  409390:	eba8 030a 	sub.w	r3, r8, sl
  409394:	f8c4 b010 	str.w	fp, [r4, #16]
  409398:	f8c4 8014 	str.w	r8, [r4, #20]
  40939c:	6020      	str	r0, [r4, #0]
  40939e:	60a3      	str	r3, [r4, #8]
  4093a0:	46b8      	mov	r8, r7
  4093a2:	46ba      	mov	sl, r7
  4093a4:	46bb      	mov	fp, r7
  4093a6:	e721      	b.n	4091ec <__sfvwrite_r+0xa8>
  4093a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4093ac:	42b9      	cmp	r1, r7
  4093ae:	bf28      	it	cs
  4093b0:	4639      	movcs	r1, r7
  4093b2:	464a      	mov	r2, r9
  4093b4:	fb91 f1f3 	sdiv	r1, r1, r3
  4093b8:	9800      	ldr	r0, [sp, #0]
  4093ba:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4093bc:	fb03 f301 	mul.w	r3, r3, r1
  4093c0:	69e1      	ldr	r1, [r4, #28]
  4093c2:	47b0      	blx	r6
  4093c4:	f1b0 0a00 	subs.w	sl, r0, #0
  4093c8:	f73f af1b 	bgt.w	409202 <__sfvwrite_r+0xbe>
  4093cc:	e738      	b.n	409240 <__sfvwrite_r+0xfc>
  4093ce:	461a      	mov	r2, r3
  4093d0:	4629      	mov	r1, r5
  4093d2:	9301      	str	r3, [sp, #4]
  4093d4:	f000 fc04 	bl	409be0 <memmove>
  4093d8:	6822      	ldr	r2, [r4, #0]
  4093da:	9b01      	ldr	r3, [sp, #4]
  4093dc:	9800      	ldr	r0, [sp, #0]
  4093de:	441a      	add	r2, r3
  4093e0:	6022      	str	r2, [r4, #0]
  4093e2:	4621      	mov	r1, r4
  4093e4:	f7ff fc4a 	bl	408c7c <_fflush_r>
  4093e8:	9b01      	ldr	r3, [sp, #4]
  4093ea:	2800      	cmp	r0, #0
  4093ec:	f47f af28 	bne.w	409240 <__sfvwrite_r+0xfc>
  4093f0:	461f      	mov	r7, r3
  4093f2:	e750      	b.n	409296 <__sfvwrite_r+0x152>
  4093f4:	9800      	ldr	r0, [sp, #0]
  4093f6:	f000 fc63 	bl	409cc0 <_realloc_r>
  4093fa:	4683      	mov	fp, r0
  4093fc:	2800      	cmp	r0, #0
  4093fe:	d1c5      	bne.n	40938c <__sfvwrite_r+0x248>
  409400:	9d00      	ldr	r5, [sp, #0]
  409402:	6921      	ldr	r1, [r4, #16]
  409404:	4628      	mov	r0, r5
  409406:	f7ff fdb7 	bl	408f78 <_free_r>
  40940a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40940e:	220c      	movs	r2, #12
  409410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  409414:	602a      	str	r2, [r5, #0]
  409416:	e715      	b.n	409244 <__sfvwrite_r+0x100>
  409418:	f106 0901 	add.w	r9, r6, #1
  40941c:	e722      	b.n	409264 <__sfvwrite_r+0x120>
  40941e:	f04f 30ff 	mov.w	r0, #4294967295
  409422:	e6bf      	b.n	4091a4 <__sfvwrite_r+0x60>
  409424:	9a00      	ldr	r2, [sp, #0]
  409426:	230c      	movs	r3, #12
  409428:	6013      	str	r3, [r2, #0]
  40942a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40942e:	e709      	b.n	409244 <__sfvwrite_r+0x100>
  409430:	7ffffc00 	.word	0x7ffffc00

00409434 <_fwalk_reent>:
  409434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409438:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40943c:	d01f      	beq.n	40947e <_fwalk_reent+0x4a>
  40943e:	4688      	mov	r8, r1
  409440:	4606      	mov	r6, r0
  409442:	f04f 0900 	mov.w	r9, #0
  409446:	687d      	ldr	r5, [r7, #4]
  409448:	68bc      	ldr	r4, [r7, #8]
  40944a:	3d01      	subs	r5, #1
  40944c:	d411      	bmi.n	409472 <_fwalk_reent+0x3e>
  40944e:	89a3      	ldrh	r3, [r4, #12]
  409450:	2b01      	cmp	r3, #1
  409452:	f105 35ff 	add.w	r5, r5, #4294967295
  409456:	d908      	bls.n	40946a <_fwalk_reent+0x36>
  409458:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40945c:	3301      	adds	r3, #1
  40945e:	4621      	mov	r1, r4
  409460:	4630      	mov	r0, r6
  409462:	d002      	beq.n	40946a <_fwalk_reent+0x36>
  409464:	47c0      	blx	r8
  409466:	ea49 0900 	orr.w	r9, r9, r0
  40946a:	1c6b      	adds	r3, r5, #1
  40946c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  409470:	d1ed      	bne.n	40944e <_fwalk_reent+0x1a>
  409472:	683f      	ldr	r7, [r7, #0]
  409474:	2f00      	cmp	r7, #0
  409476:	d1e6      	bne.n	409446 <_fwalk_reent+0x12>
  409478:	4648      	mov	r0, r9
  40947a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40947e:	46b9      	mov	r9, r7
  409480:	4648      	mov	r0, r9
  409482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409486:	bf00      	nop

00409488 <__locale_mb_cur_max>:
  409488:	4b04      	ldr	r3, [pc, #16]	; (40949c <__locale_mb_cur_max+0x14>)
  40948a:	4a05      	ldr	r2, [pc, #20]	; (4094a0 <__locale_mb_cur_max+0x18>)
  40948c:	681b      	ldr	r3, [r3, #0]
  40948e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  409490:	2b00      	cmp	r3, #0
  409492:	bf08      	it	eq
  409494:	4613      	moveq	r3, r2
  409496:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40949a:	4770      	bx	lr
  40949c:	20400034 	.word	0x20400034
  4094a0:	20400464 	.word	0x20400464

004094a4 <__retarget_lock_init_recursive>:
  4094a4:	4770      	bx	lr
  4094a6:	bf00      	nop

004094a8 <__retarget_lock_close_recursive>:
  4094a8:	4770      	bx	lr
  4094aa:	bf00      	nop

004094ac <__retarget_lock_acquire_recursive>:
  4094ac:	4770      	bx	lr
  4094ae:	bf00      	nop

004094b0 <__retarget_lock_release_recursive>:
  4094b0:	4770      	bx	lr
  4094b2:	bf00      	nop

004094b4 <__swhatbuf_r>:
  4094b4:	b570      	push	{r4, r5, r6, lr}
  4094b6:	460c      	mov	r4, r1
  4094b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4094bc:	2900      	cmp	r1, #0
  4094be:	b090      	sub	sp, #64	; 0x40
  4094c0:	4615      	mov	r5, r2
  4094c2:	461e      	mov	r6, r3
  4094c4:	db14      	blt.n	4094f0 <__swhatbuf_r+0x3c>
  4094c6:	aa01      	add	r2, sp, #4
  4094c8:	f000 ff72 	bl	40a3b0 <_fstat_r>
  4094cc:	2800      	cmp	r0, #0
  4094ce:	db0f      	blt.n	4094f0 <__swhatbuf_r+0x3c>
  4094d0:	9a02      	ldr	r2, [sp, #8]
  4094d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4094d6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4094da:	fab2 f282 	clz	r2, r2
  4094de:	0952      	lsrs	r2, r2, #5
  4094e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4094e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4094e8:	6032      	str	r2, [r6, #0]
  4094ea:	602b      	str	r3, [r5, #0]
  4094ec:	b010      	add	sp, #64	; 0x40
  4094ee:	bd70      	pop	{r4, r5, r6, pc}
  4094f0:	89a2      	ldrh	r2, [r4, #12]
  4094f2:	2300      	movs	r3, #0
  4094f4:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4094f8:	6033      	str	r3, [r6, #0]
  4094fa:	d004      	beq.n	409506 <__swhatbuf_r+0x52>
  4094fc:	2240      	movs	r2, #64	; 0x40
  4094fe:	4618      	mov	r0, r3
  409500:	602a      	str	r2, [r5, #0]
  409502:	b010      	add	sp, #64	; 0x40
  409504:	bd70      	pop	{r4, r5, r6, pc}
  409506:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40950a:	602b      	str	r3, [r5, #0]
  40950c:	b010      	add	sp, #64	; 0x40
  40950e:	bd70      	pop	{r4, r5, r6, pc}

00409510 <__smakebuf_r>:
  409510:	898a      	ldrh	r2, [r1, #12]
  409512:	0792      	lsls	r2, r2, #30
  409514:	460b      	mov	r3, r1
  409516:	d506      	bpl.n	409526 <__smakebuf_r+0x16>
  409518:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40951c:	2101      	movs	r1, #1
  40951e:	601a      	str	r2, [r3, #0]
  409520:	611a      	str	r2, [r3, #16]
  409522:	6159      	str	r1, [r3, #20]
  409524:	4770      	bx	lr
  409526:	b5f0      	push	{r4, r5, r6, r7, lr}
  409528:	b083      	sub	sp, #12
  40952a:	ab01      	add	r3, sp, #4
  40952c:	466a      	mov	r2, sp
  40952e:	460c      	mov	r4, r1
  409530:	4606      	mov	r6, r0
  409532:	f7ff ffbf 	bl	4094b4 <__swhatbuf_r>
  409536:	9900      	ldr	r1, [sp, #0]
  409538:	4605      	mov	r5, r0
  40953a:	4630      	mov	r0, r6
  40953c:	f000 f83a 	bl	4095b4 <_malloc_r>
  409540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409544:	b1d8      	cbz	r0, 40957e <__smakebuf_r+0x6e>
  409546:	9a01      	ldr	r2, [sp, #4]
  409548:	4f15      	ldr	r7, [pc, #84]	; (4095a0 <__smakebuf_r+0x90>)
  40954a:	9900      	ldr	r1, [sp, #0]
  40954c:	63f7      	str	r7, [r6, #60]	; 0x3c
  40954e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  409552:	81a3      	strh	r3, [r4, #12]
  409554:	6020      	str	r0, [r4, #0]
  409556:	6120      	str	r0, [r4, #16]
  409558:	6161      	str	r1, [r4, #20]
  40955a:	b91a      	cbnz	r2, 409564 <__smakebuf_r+0x54>
  40955c:	432b      	orrs	r3, r5
  40955e:	81a3      	strh	r3, [r4, #12]
  409560:	b003      	add	sp, #12
  409562:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409564:	4630      	mov	r0, r6
  409566:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40956a:	f000 ff35 	bl	40a3d8 <_isatty_r>
  40956e:	b1a0      	cbz	r0, 40959a <__smakebuf_r+0x8a>
  409570:	89a3      	ldrh	r3, [r4, #12]
  409572:	f023 0303 	bic.w	r3, r3, #3
  409576:	f043 0301 	orr.w	r3, r3, #1
  40957a:	b21b      	sxth	r3, r3
  40957c:	e7ee      	b.n	40955c <__smakebuf_r+0x4c>
  40957e:	059a      	lsls	r2, r3, #22
  409580:	d4ee      	bmi.n	409560 <__smakebuf_r+0x50>
  409582:	f023 0303 	bic.w	r3, r3, #3
  409586:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40958a:	f043 0302 	orr.w	r3, r3, #2
  40958e:	2101      	movs	r1, #1
  409590:	81a3      	strh	r3, [r4, #12]
  409592:	6022      	str	r2, [r4, #0]
  409594:	6122      	str	r2, [r4, #16]
  409596:	6161      	str	r1, [r4, #20]
  409598:	e7e2      	b.n	409560 <__smakebuf_r+0x50>
  40959a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40959e:	e7dd      	b.n	40955c <__smakebuf_r+0x4c>
  4095a0:	00408cd1 	.word	0x00408cd1

004095a4 <malloc>:
  4095a4:	4b02      	ldr	r3, [pc, #8]	; (4095b0 <malloc+0xc>)
  4095a6:	4601      	mov	r1, r0
  4095a8:	6818      	ldr	r0, [r3, #0]
  4095aa:	f000 b803 	b.w	4095b4 <_malloc_r>
  4095ae:	bf00      	nop
  4095b0:	20400034 	.word	0x20400034

004095b4 <_malloc_r>:
  4095b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4095b8:	f101 060b 	add.w	r6, r1, #11
  4095bc:	2e16      	cmp	r6, #22
  4095be:	b083      	sub	sp, #12
  4095c0:	4605      	mov	r5, r0
  4095c2:	f240 809e 	bls.w	409702 <_malloc_r+0x14e>
  4095c6:	f036 0607 	bics.w	r6, r6, #7
  4095ca:	f100 80bd 	bmi.w	409748 <_malloc_r+0x194>
  4095ce:	42b1      	cmp	r1, r6
  4095d0:	f200 80ba 	bhi.w	409748 <_malloc_r+0x194>
  4095d4:	f000 fb68 	bl	409ca8 <__malloc_lock>
  4095d8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4095dc:	f0c0 8293 	bcc.w	409b06 <_malloc_r+0x552>
  4095e0:	0a73      	lsrs	r3, r6, #9
  4095e2:	f000 80b8 	beq.w	409756 <_malloc_r+0x1a2>
  4095e6:	2b04      	cmp	r3, #4
  4095e8:	f200 8179 	bhi.w	4098de <_malloc_r+0x32a>
  4095ec:	09b3      	lsrs	r3, r6, #6
  4095ee:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4095f2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4095f6:	00c3      	lsls	r3, r0, #3
  4095f8:	4fbf      	ldr	r7, [pc, #764]	; (4098f8 <_malloc_r+0x344>)
  4095fa:	443b      	add	r3, r7
  4095fc:	f1a3 0108 	sub.w	r1, r3, #8
  409600:	685c      	ldr	r4, [r3, #4]
  409602:	42a1      	cmp	r1, r4
  409604:	d106      	bne.n	409614 <_malloc_r+0x60>
  409606:	e00c      	b.n	409622 <_malloc_r+0x6e>
  409608:	2a00      	cmp	r2, #0
  40960a:	f280 80aa 	bge.w	409762 <_malloc_r+0x1ae>
  40960e:	68e4      	ldr	r4, [r4, #12]
  409610:	42a1      	cmp	r1, r4
  409612:	d006      	beq.n	409622 <_malloc_r+0x6e>
  409614:	6863      	ldr	r3, [r4, #4]
  409616:	f023 0303 	bic.w	r3, r3, #3
  40961a:	1b9a      	subs	r2, r3, r6
  40961c:	2a0f      	cmp	r2, #15
  40961e:	ddf3      	ble.n	409608 <_malloc_r+0x54>
  409620:	4670      	mov	r0, lr
  409622:	693c      	ldr	r4, [r7, #16]
  409624:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40990c <_malloc_r+0x358>
  409628:	4574      	cmp	r4, lr
  40962a:	f000 81ab 	beq.w	409984 <_malloc_r+0x3d0>
  40962e:	6863      	ldr	r3, [r4, #4]
  409630:	f023 0303 	bic.w	r3, r3, #3
  409634:	1b9a      	subs	r2, r3, r6
  409636:	2a0f      	cmp	r2, #15
  409638:	f300 8190 	bgt.w	40995c <_malloc_r+0x3a8>
  40963c:	2a00      	cmp	r2, #0
  40963e:	f8c7 e014 	str.w	lr, [r7, #20]
  409642:	f8c7 e010 	str.w	lr, [r7, #16]
  409646:	f280 809d 	bge.w	409784 <_malloc_r+0x1d0>
  40964a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40964e:	f080 8161 	bcs.w	409914 <_malloc_r+0x360>
  409652:	08db      	lsrs	r3, r3, #3
  409654:	f103 0c01 	add.w	ip, r3, #1
  409658:	1099      	asrs	r1, r3, #2
  40965a:	687a      	ldr	r2, [r7, #4]
  40965c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  409660:	f8c4 8008 	str.w	r8, [r4, #8]
  409664:	2301      	movs	r3, #1
  409666:	408b      	lsls	r3, r1
  409668:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40966c:	4313      	orrs	r3, r2
  40966e:	3908      	subs	r1, #8
  409670:	60e1      	str	r1, [r4, #12]
  409672:	607b      	str	r3, [r7, #4]
  409674:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  409678:	f8c8 400c 	str.w	r4, [r8, #12]
  40967c:	1082      	asrs	r2, r0, #2
  40967e:	2401      	movs	r4, #1
  409680:	4094      	lsls	r4, r2
  409682:	429c      	cmp	r4, r3
  409684:	f200 808b 	bhi.w	40979e <_malloc_r+0x1ea>
  409688:	421c      	tst	r4, r3
  40968a:	d106      	bne.n	40969a <_malloc_r+0xe6>
  40968c:	f020 0003 	bic.w	r0, r0, #3
  409690:	0064      	lsls	r4, r4, #1
  409692:	421c      	tst	r4, r3
  409694:	f100 0004 	add.w	r0, r0, #4
  409698:	d0fa      	beq.n	409690 <_malloc_r+0xdc>
  40969a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40969e:	46cc      	mov	ip, r9
  4096a0:	4680      	mov	r8, r0
  4096a2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4096a6:	459c      	cmp	ip, r3
  4096a8:	d107      	bne.n	4096ba <_malloc_r+0x106>
  4096aa:	e16d      	b.n	409988 <_malloc_r+0x3d4>
  4096ac:	2a00      	cmp	r2, #0
  4096ae:	f280 817b 	bge.w	4099a8 <_malloc_r+0x3f4>
  4096b2:	68db      	ldr	r3, [r3, #12]
  4096b4:	459c      	cmp	ip, r3
  4096b6:	f000 8167 	beq.w	409988 <_malloc_r+0x3d4>
  4096ba:	6859      	ldr	r1, [r3, #4]
  4096bc:	f021 0103 	bic.w	r1, r1, #3
  4096c0:	1b8a      	subs	r2, r1, r6
  4096c2:	2a0f      	cmp	r2, #15
  4096c4:	ddf2      	ble.n	4096ac <_malloc_r+0xf8>
  4096c6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4096ca:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4096ce:	9300      	str	r3, [sp, #0]
  4096d0:	199c      	adds	r4, r3, r6
  4096d2:	4628      	mov	r0, r5
  4096d4:	f046 0601 	orr.w	r6, r6, #1
  4096d8:	f042 0501 	orr.w	r5, r2, #1
  4096dc:	605e      	str	r6, [r3, #4]
  4096de:	f8c8 c00c 	str.w	ip, [r8, #12]
  4096e2:	f8cc 8008 	str.w	r8, [ip, #8]
  4096e6:	617c      	str	r4, [r7, #20]
  4096e8:	613c      	str	r4, [r7, #16]
  4096ea:	f8c4 e00c 	str.w	lr, [r4, #12]
  4096ee:	f8c4 e008 	str.w	lr, [r4, #8]
  4096f2:	6065      	str	r5, [r4, #4]
  4096f4:	505a      	str	r2, [r3, r1]
  4096f6:	f000 fadd 	bl	409cb4 <__malloc_unlock>
  4096fa:	9b00      	ldr	r3, [sp, #0]
  4096fc:	f103 0408 	add.w	r4, r3, #8
  409700:	e01e      	b.n	409740 <_malloc_r+0x18c>
  409702:	2910      	cmp	r1, #16
  409704:	d820      	bhi.n	409748 <_malloc_r+0x194>
  409706:	f000 facf 	bl	409ca8 <__malloc_lock>
  40970a:	2610      	movs	r6, #16
  40970c:	2318      	movs	r3, #24
  40970e:	2002      	movs	r0, #2
  409710:	4f79      	ldr	r7, [pc, #484]	; (4098f8 <_malloc_r+0x344>)
  409712:	443b      	add	r3, r7
  409714:	f1a3 0208 	sub.w	r2, r3, #8
  409718:	685c      	ldr	r4, [r3, #4]
  40971a:	4294      	cmp	r4, r2
  40971c:	f000 813d 	beq.w	40999a <_malloc_r+0x3e6>
  409720:	6863      	ldr	r3, [r4, #4]
  409722:	68e1      	ldr	r1, [r4, #12]
  409724:	68a6      	ldr	r6, [r4, #8]
  409726:	f023 0303 	bic.w	r3, r3, #3
  40972a:	4423      	add	r3, r4
  40972c:	4628      	mov	r0, r5
  40972e:	685a      	ldr	r2, [r3, #4]
  409730:	60f1      	str	r1, [r6, #12]
  409732:	f042 0201 	orr.w	r2, r2, #1
  409736:	608e      	str	r6, [r1, #8]
  409738:	605a      	str	r2, [r3, #4]
  40973a:	f000 fabb 	bl	409cb4 <__malloc_unlock>
  40973e:	3408      	adds	r4, #8
  409740:	4620      	mov	r0, r4
  409742:	b003      	add	sp, #12
  409744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409748:	2400      	movs	r4, #0
  40974a:	230c      	movs	r3, #12
  40974c:	4620      	mov	r0, r4
  40974e:	602b      	str	r3, [r5, #0]
  409750:	b003      	add	sp, #12
  409752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409756:	2040      	movs	r0, #64	; 0x40
  409758:	f44f 7300 	mov.w	r3, #512	; 0x200
  40975c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  409760:	e74a      	b.n	4095f8 <_malloc_r+0x44>
  409762:	4423      	add	r3, r4
  409764:	68e1      	ldr	r1, [r4, #12]
  409766:	685a      	ldr	r2, [r3, #4]
  409768:	68a6      	ldr	r6, [r4, #8]
  40976a:	f042 0201 	orr.w	r2, r2, #1
  40976e:	60f1      	str	r1, [r6, #12]
  409770:	4628      	mov	r0, r5
  409772:	608e      	str	r6, [r1, #8]
  409774:	605a      	str	r2, [r3, #4]
  409776:	f000 fa9d 	bl	409cb4 <__malloc_unlock>
  40977a:	3408      	adds	r4, #8
  40977c:	4620      	mov	r0, r4
  40977e:	b003      	add	sp, #12
  409780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409784:	4423      	add	r3, r4
  409786:	4628      	mov	r0, r5
  409788:	685a      	ldr	r2, [r3, #4]
  40978a:	f042 0201 	orr.w	r2, r2, #1
  40978e:	605a      	str	r2, [r3, #4]
  409790:	f000 fa90 	bl	409cb4 <__malloc_unlock>
  409794:	3408      	adds	r4, #8
  409796:	4620      	mov	r0, r4
  409798:	b003      	add	sp, #12
  40979a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40979e:	68bc      	ldr	r4, [r7, #8]
  4097a0:	6863      	ldr	r3, [r4, #4]
  4097a2:	f023 0803 	bic.w	r8, r3, #3
  4097a6:	45b0      	cmp	r8, r6
  4097a8:	d304      	bcc.n	4097b4 <_malloc_r+0x200>
  4097aa:	eba8 0306 	sub.w	r3, r8, r6
  4097ae:	2b0f      	cmp	r3, #15
  4097b0:	f300 8085 	bgt.w	4098be <_malloc_r+0x30a>
  4097b4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 409910 <_malloc_r+0x35c>
  4097b8:	4b50      	ldr	r3, [pc, #320]	; (4098fc <_malloc_r+0x348>)
  4097ba:	f8d9 2000 	ldr.w	r2, [r9]
  4097be:	681b      	ldr	r3, [r3, #0]
  4097c0:	3201      	adds	r2, #1
  4097c2:	4433      	add	r3, r6
  4097c4:	eb04 0a08 	add.w	sl, r4, r8
  4097c8:	f000 8155 	beq.w	409a76 <_malloc_r+0x4c2>
  4097cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4097d0:	330f      	adds	r3, #15
  4097d2:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4097d6:	f02b 0b0f 	bic.w	fp, fp, #15
  4097da:	4659      	mov	r1, fp
  4097dc:	4628      	mov	r0, r5
  4097de:	f000 fc15 	bl	40a00c <_sbrk_r>
  4097e2:	1c41      	adds	r1, r0, #1
  4097e4:	4602      	mov	r2, r0
  4097e6:	f000 80fc 	beq.w	4099e2 <_malloc_r+0x42e>
  4097ea:	4582      	cmp	sl, r0
  4097ec:	f200 80f7 	bhi.w	4099de <_malloc_r+0x42a>
  4097f0:	4b43      	ldr	r3, [pc, #268]	; (409900 <_malloc_r+0x34c>)
  4097f2:	6819      	ldr	r1, [r3, #0]
  4097f4:	4459      	add	r1, fp
  4097f6:	6019      	str	r1, [r3, #0]
  4097f8:	f000 814d 	beq.w	409a96 <_malloc_r+0x4e2>
  4097fc:	f8d9 0000 	ldr.w	r0, [r9]
  409800:	3001      	adds	r0, #1
  409802:	bf1b      	ittet	ne
  409804:	eba2 0a0a 	subne.w	sl, r2, sl
  409808:	4451      	addne	r1, sl
  40980a:	f8c9 2000 	streq.w	r2, [r9]
  40980e:	6019      	strne	r1, [r3, #0]
  409810:	f012 0107 	ands.w	r1, r2, #7
  409814:	f000 8115 	beq.w	409a42 <_malloc_r+0x48e>
  409818:	f1c1 0008 	rsb	r0, r1, #8
  40981c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  409820:	4402      	add	r2, r0
  409822:	3108      	adds	r1, #8
  409824:	eb02 090b 	add.w	r9, r2, fp
  409828:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40982c:	eba1 0909 	sub.w	r9, r1, r9
  409830:	4649      	mov	r1, r9
  409832:	4628      	mov	r0, r5
  409834:	9301      	str	r3, [sp, #4]
  409836:	9200      	str	r2, [sp, #0]
  409838:	f000 fbe8 	bl	40a00c <_sbrk_r>
  40983c:	1c43      	adds	r3, r0, #1
  40983e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  409842:	f000 8143 	beq.w	409acc <_malloc_r+0x518>
  409846:	1a80      	subs	r0, r0, r2
  409848:	4448      	add	r0, r9
  40984a:	f040 0001 	orr.w	r0, r0, #1
  40984e:	6819      	ldr	r1, [r3, #0]
  409850:	60ba      	str	r2, [r7, #8]
  409852:	4449      	add	r1, r9
  409854:	42bc      	cmp	r4, r7
  409856:	6050      	str	r0, [r2, #4]
  409858:	6019      	str	r1, [r3, #0]
  40985a:	d017      	beq.n	40988c <_malloc_r+0x2d8>
  40985c:	f1b8 0f0f 	cmp.w	r8, #15
  409860:	f240 80fb 	bls.w	409a5a <_malloc_r+0x4a6>
  409864:	6860      	ldr	r0, [r4, #4]
  409866:	f1a8 020c 	sub.w	r2, r8, #12
  40986a:	f022 0207 	bic.w	r2, r2, #7
  40986e:	eb04 0e02 	add.w	lr, r4, r2
  409872:	f000 0001 	and.w	r0, r0, #1
  409876:	f04f 0c05 	mov.w	ip, #5
  40987a:	4310      	orrs	r0, r2
  40987c:	2a0f      	cmp	r2, #15
  40987e:	6060      	str	r0, [r4, #4]
  409880:	f8ce c004 	str.w	ip, [lr, #4]
  409884:	f8ce c008 	str.w	ip, [lr, #8]
  409888:	f200 8117 	bhi.w	409aba <_malloc_r+0x506>
  40988c:	4b1d      	ldr	r3, [pc, #116]	; (409904 <_malloc_r+0x350>)
  40988e:	68bc      	ldr	r4, [r7, #8]
  409890:	681a      	ldr	r2, [r3, #0]
  409892:	4291      	cmp	r1, r2
  409894:	bf88      	it	hi
  409896:	6019      	strhi	r1, [r3, #0]
  409898:	4b1b      	ldr	r3, [pc, #108]	; (409908 <_malloc_r+0x354>)
  40989a:	681a      	ldr	r2, [r3, #0]
  40989c:	4291      	cmp	r1, r2
  40989e:	6862      	ldr	r2, [r4, #4]
  4098a0:	bf88      	it	hi
  4098a2:	6019      	strhi	r1, [r3, #0]
  4098a4:	f022 0203 	bic.w	r2, r2, #3
  4098a8:	4296      	cmp	r6, r2
  4098aa:	eba2 0306 	sub.w	r3, r2, r6
  4098ae:	d801      	bhi.n	4098b4 <_malloc_r+0x300>
  4098b0:	2b0f      	cmp	r3, #15
  4098b2:	dc04      	bgt.n	4098be <_malloc_r+0x30a>
  4098b4:	4628      	mov	r0, r5
  4098b6:	f000 f9fd 	bl	409cb4 <__malloc_unlock>
  4098ba:	2400      	movs	r4, #0
  4098bc:	e740      	b.n	409740 <_malloc_r+0x18c>
  4098be:	19a2      	adds	r2, r4, r6
  4098c0:	f043 0301 	orr.w	r3, r3, #1
  4098c4:	f046 0601 	orr.w	r6, r6, #1
  4098c8:	6066      	str	r6, [r4, #4]
  4098ca:	4628      	mov	r0, r5
  4098cc:	60ba      	str	r2, [r7, #8]
  4098ce:	6053      	str	r3, [r2, #4]
  4098d0:	f000 f9f0 	bl	409cb4 <__malloc_unlock>
  4098d4:	3408      	adds	r4, #8
  4098d6:	4620      	mov	r0, r4
  4098d8:	b003      	add	sp, #12
  4098da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4098de:	2b14      	cmp	r3, #20
  4098e0:	d971      	bls.n	4099c6 <_malloc_r+0x412>
  4098e2:	2b54      	cmp	r3, #84	; 0x54
  4098e4:	f200 80a3 	bhi.w	409a2e <_malloc_r+0x47a>
  4098e8:	0b33      	lsrs	r3, r6, #12
  4098ea:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4098ee:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4098f2:	00c3      	lsls	r3, r0, #3
  4098f4:	e680      	b.n	4095f8 <_malloc_r+0x44>
  4098f6:	bf00      	nop
  4098f8:	204005d0 	.word	0x204005d0
  4098fc:	20403988 	.word	0x20403988
  409900:	20403958 	.word	0x20403958
  409904:	20403980 	.word	0x20403980
  409908:	20403984 	.word	0x20403984
  40990c:	204005d8 	.word	0x204005d8
  409910:	204009d8 	.word	0x204009d8
  409914:	0a5a      	lsrs	r2, r3, #9
  409916:	2a04      	cmp	r2, #4
  409918:	d95b      	bls.n	4099d2 <_malloc_r+0x41e>
  40991a:	2a14      	cmp	r2, #20
  40991c:	f200 80ae 	bhi.w	409a7c <_malloc_r+0x4c8>
  409920:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  409924:	00c9      	lsls	r1, r1, #3
  409926:	325b      	adds	r2, #91	; 0x5b
  409928:	eb07 0c01 	add.w	ip, r7, r1
  40992c:	5879      	ldr	r1, [r7, r1]
  40992e:	f1ac 0c08 	sub.w	ip, ip, #8
  409932:	458c      	cmp	ip, r1
  409934:	f000 8088 	beq.w	409a48 <_malloc_r+0x494>
  409938:	684a      	ldr	r2, [r1, #4]
  40993a:	f022 0203 	bic.w	r2, r2, #3
  40993e:	4293      	cmp	r3, r2
  409940:	d273      	bcs.n	409a2a <_malloc_r+0x476>
  409942:	6889      	ldr	r1, [r1, #8]
  409944:	458c      	cmp	ip, r1
  409946:	d1f7      	bne.n	409938 <_malloc_r+0x384>
  409948:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40994c:	687b      	ldr	r3, [r7, #4]
  40994e:	60e2      	str	r2, [r4, #12]
  409950:	f8c4 c008 	str.w	ip, [r4, #8]
  409954:	6094      	str	r4, [r2, #8]
  409956:	f8cc 400c 	str.w	r4, [ip, #12]
  40995a:	e68f      	b.n	40967c <_malloc_r+0xc8>
  40995c:	19a1      	adds	r1, r4, r6
  40995e:	f046 0c01 	orr.w	ip, r6, #1
  409962:	f042 0601 	orr.w	r6, r2, #1
  409966:	f8c4 c004 	str.w	ip, [r4, #4]
  40996a:	4628      	mov	r0, r5
  40996c:	6179      	str	r1, [r7, #20]
  40996e:	6139      	str	r1, [r7, #16]
  409970:	f8c1 e00c 	str.w	lr, [r1, #12]
  409974:	f8c1 e008 	str.w	lr, [r1, #8]
  409978:	604e      	str	r6, [r1, #4]
  40997a:	50e2      	str	r2, [r4, r3]
  40997c:	f000 f99a 	bl	409cb4 <__malloc_unlock>
  409980:	3408      	adds	r4, #8
  409982:	e6dd      	b.n	409740 <_malloc_r+0x18c>
  409984:	687b      	ldr	r3, [r7, #4]
  409986:	e679      	b.n	40967c <_malloc_r+0xc8>
  409988:	f108 0801 	add.w	r8, r8, #1
  40998c:	f018 0f03 	tst.w	r8, #3
  409990:	f10c 0c08 	add.w	ip, ip, #8
  409994:	f47f ae85 	bne.w	4096a2 <_malloc_r+0xee>
  409998:	e02d      	b.n	4099f6 <_malloc_r+0x442>
  40999a:	68dc      	ldr	r4, [r3, #12]
  40999c:	42a3      	cmp	r3, r4
  40999e:	bf08      	it	eq
  4099a0:	3002      	addeq	r0, #2
  4099a2:	f43f ae3e 	beq.w	409622 <_malloc_r+0x6e>
  4099a6:	e6bb      	b.n	409720 <_malloc_r+0x16c>
  4099a8:	4419      	add	r1, r3
  4099aa:	461c      	mov	r4, r3
  4099ac:	684a      	ldr	r2, [r1, #4]
  4099ae:	68db      	ldr	r3, [r3, #12]
  4099b0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4099b4:	f042 0201 	orr.w	r2, r2, #1
  4099b8:	604a      	str	r2, [r1, #4]
  4099ba:	4628      	mov	r0, r5
  4099bc:	60f3      	str	r3, [r6, #12]
  4099be:	609e      	str	r6, [r3, #8]
  4099c0:	f000 f978 	bl	409cb4 <__malloc_unlock>
  4099c4:	e6bc      	b.n	409740 <_malloc_r+0x18c>
  4099c6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4099ca:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4099ce:	00c3      	lsls	r3, r0, #3
  4099d0:	e612      	b.n	4095f8 <_malloc_r+0x44>
  4099d2:	099a      	lsrs	r2, r3, #6
  4099d4:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4099d8:	00c9      	lsls	r1, r1, #3
  4099da:	3238      	adds	r2, #56	; 0x38
  4099dc:	e7a4      	b.n	409928 <_malloc_r+0x374>
  4099de:	42bc      	cmp	r4, r7
  4099e0:	d054      	beq.n	409a8c <_malloc_r+0x4d8>
  4099e2:	68bc      	ldr	r4, [r7, #8]
  4099e4:	6862      	ldr	r2, [r4, #4]
  4099e6:	f022 0203 	bic.w	r2, r2, #3
  4099ea:	e75d      	b.n	4098a8 <_malloc_r+0x2f4>
  4099ec:	f859 3908 	ldr.w	r3, [r9], #-8
  4099f0:	4599      	cmp	r9, r3
  4099f2:	f040 8086 	bne.w	409b02 <_malloc_r+0x54e>
  4099f6:	f010 0f03 	tst.w	r0, #3
  4099fa:	f100 30ff 	add.w	r0, r0, #4294967295
  4099fe:	d1f5      	bne.n	4099ec <_malloc_r+0x438>
  409a00:	687b      	ldr	r3, [r7, #4]
  409a02:	ea23 0304 	bic.w	r3, r3, r4
  409a06:	607b      	str	r3, [r7, #4]
  409a08:	0064      	lsls	r4, r4, #1
  409a0a:	429c      	cmp	r4, r3
  409a0c:	f63f aec7 	bhi.w	40979e <_malloc_r+0x1ea>
  409a10:	2c00      	cmp	r4, #0
  409a12:	f43f aec4 	beq.w	40979e <_malloc_r+0x1ea>
  409a16:	421c      	tst	r4, r3
  409a18:	4640      	mov	r0, r8
  409a1a:	f47f ae3e 	bne.w	40969a <_malloc_r+0xe6>
  409a1e:	0064      	lsls	r4, r4, #1
  409a20:	421c      	tst	r4, r3
  409a22:	f100 0004 	add.w	r0, r0, #4
  409a26:	d0fa      	beq.n	409a1e <_malloc_r+0x46a>
  409a28:	e637      	b.n	40969a <_malloc_r+0xe6>
  409a2a:	468c      	mov	ip, r1
  409a2c:	e78c      	b.n	409948 <_malloc_r+0x394>
  409a2e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  409a32:	d815      	bhi.n	409a60 <_malloc_r+0x4ac>
  409a34:	0bf3      	lsrs	r3, r6, #15
  409a36:	f103 0078 	add.w	r0, r3, #120	; 0x78
  409a3a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  409a3e:	00c3      	lsls	r3, r0, #3
  409a40:	e5da      	b.n	4095f8 <_malloc_r+0x44>
  409a42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  409a46:	e6ed      	b.n	409824 <_malloc_r+0x270>
  409a48:	687b      	ldr	r3, [r7, #4]
  409a4a:	1092      	asrs	r2, r2, #2
  409a4c:	2101      	movs	r1, #1
  409a4e:	fa01 f202 	lsl.w	r2, r1, r2
  409a52:	4313      	orrs	r3, r2
  409a54:	607b      	str	r3, [r7, #4]
  409a56:	4662      	mov	r2, ip
  409a58:	e779      	b.n	40994e <_malloc_r+0x39a>
  409a5a:	2301      	movs	r3, #1
  409a5c:	6053      	str	r3, [r2, #4]
  409a5e:	e729      	b.n	4098b4 <_malloc_r+0x300>
  409a60:	f240 5254 	movw	r2, #1364	; 0x554
  409a64:	4293      	cmp	r3, r2
  409a66:	d822      	bhi.n	409aae <_malloc_r+0x4fa>
  409a68:	0cb3      	lsrs	r3, r6, #18
  409a6a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  409a6e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  409a72:	00c3      	lsls	r3, r0, #3
  409a74:	e5c0      	b.n	4095f8 <_malloc_r+0x44>
  409a76:	f103 0b10 	add.w	fp, r3, #16
  409a7a:	e6ae      	b.n	4097da <_malloc_r+0x226>
  409a7c:	2a54      	cmp	r2, #84	; 0x54
  409a7e:	d829      	bhi.n	409ad4 <_malloc_r+0x520>
  409a80:	0b1a      	lsrs	r2, r3, #12
  409a82:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  409a86:	00c9      	lsls	r1, r1, #3
  409a88:	326e      	adds	r2, #110	; 0x6e
  409a8a:	e74d      	b.n	409928 <_malloc_r+0x374>
  409a8c:	4b20      	ldr	r3, [pc, #128]	; (409b10 <_malloc_r+0x55c>)
  409a8e:	6819      	ldr	r1, [r3, #0]
  409a90:	4459      	add	r1, fp
  409a92:	6019      	str	r1, [r3, #0]
  409a94:	e6b2      	b.n	4097fc <_malloc_r+0x248>
  409a96:	f3ca 000b 	ubfx	r0, sl, #0, #12
  409a9a:	2800      	cmp	r0, #0
  409a9c:	f47f aeae 	bne.w	4097fc <_malloc_r+0x248>
  409aa0:	eb08 030b 	add.w	r3, r8, fp
  409aa4:	68ba      	ldr	r2, [r7, #8]
  409aa6:	f043 0301 	orr.w	r3, r3, #1
  409aaa:	6053      	str	r3, [r2, #4]
  409aac:	e6ee      	b.n	40988c <_malloc_r+0x2d8>
  409aae:	207f      	movs	r0, #127	; 0x7f
  409ab0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  409ab4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  409ab8:	e59e      	b.n	4095f8 <_malloc_r+0x44>
  409aba:	f104 0108 	add.w	r1, r4, #8
  409abe:	4628      	mov	r0, r5
  409ac0:	9300      	str	r3, [sp, #0]
  409ac2:	f7ff fa59 	bl	408f78 <_free_r>
  409ac6:	9b00      	ldr	r3, [sp, #0]
  409ac8:	6819      	ldr	r1, [r3, #0]
  409aca:	e6df      	b.n	40988c <_malloc_r+0x2d8>
  409acc:	2001      	movs	r0, #1
  409ace:	f04f 0900 	mov.w	r9, #0
  409ad2:	e6bc      	b.n	40984e <_malloc_r+0x29a>
  409ad4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  409ad8:	d805      	bhi.n	409ae6 <_malloc_r+0x532>
  409ada:	0bda      	lsrs	r2, r3, #15
  409adc:	f102 0178 	add.w	r1, r2, #120	; 0x78
  409ae0:	00c9      	lsls	r1, r1, #3
  409ae2:	3277      	adds	r2, #119	; 0x77
  409ae4:	e720      	b.n	409928 <_malloc_r+0x374>
  409ae6:	f240 5154 	movw	r1, #1364	; 0x554
  409aea:	428a      	cmp	r2, r1
  409aec:	d805      	bhi.n	409afa <_malloc_r+0x546>
  409aee:	0c9a      	lsrs	r2, r3, #18
  409af0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  409af4:	00c9      	lsls	r1, r1, #3
  409af6:	327c      	adds	r2, #124	; 0x7c
  409af8:	e716      	b.n	409928 <_malloc_r+0x374>
  409afa:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  409afe:	227e      	movs	r2, #126	; 0x7e
  409b00:	e712      	b.n	409928 <_malloc_r+0x374>
  409b02:	687b      	ldr	r3, [r7, #4]
  409b04:	e780      	b.n	409a08 <_malloc_r+0x454>
  409b06:	08f0      	lsrs	r0, r6, #3
  409b08:	f106 0308 	add.w	r3, r6, #8
  409b0c:	e600      	b.n	409710 <_malloc_r+0x15c>
  409b0e:	bf00      	nop
  409b10:	20403958 	.word	0x20403958

00409b14 <__ascii_mbtowc>:
  409b14:	b082      	sub	sp, #8
  409b16:	b149      	cbz	r1, 409b2c <__ascii_mbtowc+0x18>
  409b18:	b15a      	cbz	r2, 409b32 <__ascii_mbtowc+0x1e>
  409b1a:	b16b      	cbz	r3, 409b38 <__ascii_mbtowc+0x24>
  409b1c:	7813      	ldrb	r3, [r2, #0]
  409b1e:	600b      	str	r3, [r1, #0]
  409b20:	7812      	ldrb	r2, [r2, #0]
  409b22:	1c10      	adds	r0, r2, #0
  409b24:	bf18      	it	ne
  409b26:	2001      	movne	r0, #1
  409b28:	b002      	add	sp, #8
  409b2a:	4770      	bx	lr
  409b2c:	a901      	add	r1, sp, #4
  409b2e:	2a00      	cmp	r2, #0
  409b30:	d1f3      	bne.n	409b1a <__ascii_mbtowc+0x6>
  409b32:	4610      	mov	r0, r2
  409b34:	b002      	add	sp, #8
  409b36:	4770      	bx	lr
  409b38:	f06f 0001 	mvn.w	r0, #1
  409b3c:	e7f4      	b.n	409b28 <__ascii_mbtowc+0x14>
  409b3e:	bf00      	nop

00409b40 <memchr>:
  409b40:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  409b44:	2a10      	cmp	r2, #16
  409b46:	db2b      	blt.n	409ba0 <memchr+0x60>
  409b48:	f010 0f07 	tst.w	r0, #7
  409b4c:	d008      	beq.n	409b60 <memchr+0x20>
  409b4e:	f810 3b01 	ldrb.w	r3, [r0], #1
  409b52:	3a01      	subs	r2, #1
  409b54:	428b      	cmp	r3, r1
  409b56:	d02d      	beq.n	409bb4 <memchr+0x74>
  409b58:	f010 0f07 	tst.w	r0, #7
  409b5c:	b342      	cbz	r2, 409bb0 <memchr+0x70>
  409b5e:	d1f6      	bne.n	409b4e <memchr+0xe>
  409b60:	b4f0      	push	{r4, r5, r6, r7}
  409b62:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  409b66:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  409b6a:	f022 0407 	bic.w	r4, r2, #7
  409b6e:	f07f 0700 	mvns.w	r7, #0
  409b72:	2300      	movs	r3, #0
  409b74:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  409b78:	3c08      	subs	r4, #8
  409b7a:	ea85 0501 	eor.w	r5, r5, r1
  409b7e:	ea86 0601 	eor.w	r6, r6, r1
  409b82:	fa85 f547 	uadd8	r5, r5, r7
  409b86:	faa3 f587 	sel	r5, r3, r7
  409b8a:	fa86 f647 	uadd8	r6, r6, r7
  409b8e:	faa5 f687 	sel	r6, r5, r7
  409b92:	b98e      	cbnz	r6, 409bb8 <memchr+0x78>
  409b94:	d1ee      	bne.n	409b74 <memchr+0x34>
  409b96:	bcf0      	pop	{r4, r5, r6, r7}
  409b98:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  409b9c:	f002 0207 	and.w	r2, r2, #7
  409ba0:	b132      	cbz	r2, 409bb0 <memchr+0x70>
  409ba2:	f810 3b01 	ldrb.w	r3, [r0], #1
  409ba6:	3a01      	subs	r2, #1
  409ba8:	ea83 0301 	eor.w	r3, r3, r1
  409bac:	b113      	cbz	r3, 409bb4 <memchr+0x74>
  409bae:	d1f8      	bne.n	409ba2 <memchr+0x62>
  409bb0:	2000      	movs	r0, #0
  409bb2:	4770      	bx	lr
  409bb4:	3801      	subs	r0, #1
  409bb6:	4770      	bx	lr
  409bb8:	2d00      	cmp	r5, #0
  409bba:	bf06      	itte	eq
  409bbc:	4635      	moveq	r5, r6
  409bbe:	3803      	subeq	r0, #3
  409bc0:	3807      	subne	r0, #7
  409bc2:	f015 0f01 	tst.w	r5, #1
  409bc6:	d107      	bne.n	409bd8 <memchr+0x98>
  409bc8:	3001      	adds	r0, #1
  409bca:	f415 7f80 	tst.w	r5, #256	; 0x100
  409bce:	bf02      	ittt	eq
  409bd0:	3001      	addeq	r0, #1
  409bd2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  409bd6:	3001      	addeq	r0, #1
  409bd8:	bcf0      	pop	{r4, r5, r6, r7}
  409bda:	3801      	subs	r0, #1
  409bdc:	4770      	bx	lr
  409bde:	bf00      	nop

00409be0 <memmove>:
  409be0:	4288      	cmp	r0, r1
  409be2:	b5f0      	push	{r4, r5, r6, r7, lr}
  409be4:	d90d      	bls.n	409c02 <memmove+0x22>
  409be6:	188b      	adds	r3, r1, r2
  409be8:	4298      	cmp	r0, r3
  409bea:	d20a      	bcs.n	409c02 <memmove+0x22>
  409bec:	1884      	adds	r4, r0, r2
  409bee:	2a00      	cmp	r2, #0
  409bf0:	d051      	beq.n	409c96 <memmove+0xb6>
  409bf2:	4622      	mov	r2, r4
  409bf4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  409bf8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  409bfc:	4299      	cmp	r1, r3
  409bfe:	d1f9      	bne.n	409bf4 <memmove+0x14>
  409c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409c02:	2a0f      	cmp	r2, #15
  409c04:	d948      	bls.n	409c98 <memmove+0xb8>
  409c06:	ea41 0300 	orr.w	r3, r1, r0
  409c0a:	079b      	lsls	r3, r3, #30
  409c0c:	d146      	bne.n	409c9c <memmove+0xbc>
  409c0e:	f100 0410 	add.w	r4, r0, #16
  409c12:	f101 0310 	add.w	r3, r1, #16
  409c16:	4615      	mov	r5, r2
  409c18:	f853 6c10 	ldr.w	r6, [r3, #-16]
  409c1c:	f844 6c10 	str.w	r6, [r4, #-16]
  409c20:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  409c24:	f844 6c0c 	str.w	r6, [r4, #-12]
  409c28:	f853 6c08 	ldr.w	r6, [r3, #-8]
  409c2c:	f844 6c08 	str.w	r6, [r4, #-8]
  409c30:	3d10      	subs	r5, #16
  409c32:	f853 6c04 	ldr.w	r6, [r3, #-4]
  409c36:	f844 6c04 	str.w	r6, [r4, #-4]
  409c3a:	2d0f      	cmp	r5, #15
  409c3c:	f103 0310 	add.w	r3, r3, #16
  409c40:	f104 0410 	add.w	r4, r4, #16
  409c44:	d8e8      	bhi.n	409c18 <memmove+0x38>
  409c46:	f1a2 0310 	sub.w	r3, r2, #16
  409c4a:	f023 030f 	bic.w	r3, r3, #15
  409c4e:	f002 0e0f 	and.w	lr, r2, #15
  409c52:	3310      	adds	r3, #16
  409c54:	f1be 0f03 	cmp.w	lr, #3
  409c58:	4419      	add	r1, r3
  409c5a:	4403      	add	r3, r0
  409c5c:	d921      	bls.n	409ca2 <memmove+0xc2>
  409c5e:	1f1e      	subs	r6, r3, #4
  409c60:	460d      	mov	r5, r1
  409c62:	4674      	mov	r4, lr
  409c64:	3c04      	subs	r4, #4
  409c66:	f855 7b04 	ldr.w	r7, [r5], #4
  409c6a:	f846 7f04 	str.w	r7, [r6, #4]!
  409c6e:	2c03      	cmp	r4, #3
  409c70:	d8f8      	bhi.n	409c64 <memmove+0x84>
  409c72:	f1ae 0404 	sub.w	r4, lr, #4
  409c76:	f024 0403 	bic.w	r4, r4, #3
  409c7a:	3404      	adds	r4, #4
  409c7c:	4421      	add	r1, r4
  409c7e:	4423      	add	r3, r4
  409c80:	f002 0203 	and.w	r2, r2, #3
  409c84:	b162      	cbz	r2, 409ca0 <memmove+0xc0>
  409c86:	3b01      	subs	r3, #1
  409c88:	440a      	add	r2, r1
  409c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
  409c8e:	f803 4f01 	strb.w	r4, [r3, #1]!
  409c92:	428a      	cmp	r2, r1
  409c94:	d1f9      	bne.n	409c8a <memmove+0xaa>
  409c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409c98:	4603      	mov	r3, r0
  409c9a:	e7f3      	b.n	409c84 <memmove+0xa4>
  409c9c:	4603      	mov	r3, r0
  409c9e:	e7f2      	b.n	409c86 <memmove+0xa6>
  409ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409ca2:	4672      	mov	r2, lr
  409ca4:	e7ee      	b.n	409c84 <memmove+0xa4>
  409ca6:	bf00      	nop

00409ca8 <__malloc_lock>:
  409ca8:	4801      	ldr	r0, [pc, #4]	; (409cb0 <__malloc_lock+0x8>)
  409caa:	f7ff bbff 	b.w	4094ac <__retarget_lock_acquire_recursive>
  409cae:	bf00      	nop
  409cb0:	20404a30 	.word	0x20404a30

00409cb4 <__malloc_unlock>:
  409cb4:	4801      	ldr	r0, [pc, #4]	; (409cbc <__malloc_unlock+0x8>)
  409cb6:	f7ff bbfb 	b.w	4094b0 <__retarget_lock_release_recursive>
  409cba:	bf00      	nop
  409cbc:	20404a30 	.word	0x20404a30

00409cc0 <_realloc_r>:
  409cc0:	2900      	cmp	r1, #0
  409cc2:	f000 8095 	beq.w	409df0 <_realloc_r+0x130>
  409cc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409cca:	460d      	mov	r5, r1
  409ccc:	4616      	mov	r6, r2
  409cce:	b083      	sub	sp, #12
  409cd0:	4680      	mov	r8, r0
  409cd2:	f106 070b 	add.w	r7, r6, #11
  409cd6:	f7ff ffe7 	bl	409ca8 <__malloc_lock>
  409cda:	f855 ec04 	ldr.w	lr, [r5, #-4]
  409cde:	2f16      	cmp	r7, #22
  409ce0:	f02e 0403 	bic.w	r4, lr, #3
  409ce4:	f1a5 0908 	sub.w	r9, r5, #8
  409ce8:	d83c      	bhi.n	409d64 <_realloc_r+0xa4>
  409cea:	2210      	movs	r2, #16
  409cec:	4617      	mov	r7, r2
  409cee:	42be      	cmp	r6, r7
  409cf0:	d83d      	bhi.n	409d6e <_realloc_r+0xae>
  409cf2:	4294      	cmp	r4, r2
  409cf4:	da43      	bge.n	409d7e <_realloc_r+0xbe>
  409cf6:	4bc4      	ldr	r3, [pc, #784]	; (40a008 <_realloc_r+0x348>)
  409cf8:	6899      	ldr	r1, [r3, #8]
  409cfa:	eb09 0004 	add.w	r0, r9, r4
  409cfe:	4288      	cmp	r0, r1
  409d00:	f000 80b4 	beq.w	409e6c <_realloc_r+0x1ac>
  409d04:	6843      	ldr	r3, [r0, #4]
  409d06:	f023 0101 	bic.w	r1, r3, #1
  409d0a:	4401      	add	r1, r0
  409d0c:	6849      	ldr	r1, [r1, #4]
  409d0e:	07c9      	lsls	r1, r1, #31
  409d10:	d54c      	bpl.n	409dac <_realloc_r+0xec>
  409d12:	f01e 0f01 	tst.w	lr, #1
  409d16:	f000 809b 	beq.w	409e50 <_realloc_r+0x190>
  409d1a:	4631      	mov	r1, r6
  409d1c:	4640      	mov	r0, r8
  409d1e:	f7ff fc49 	bl	4095b4 <_malloc_r>
  409d22:	4606      	mov	r6, r0
  409d24:	2800      	cmp	r0, #0
  409d26:	d03a      	beq.n	409d9e <_realloc_r+0xde>
  409d28:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409d2c:	f023 0301 	bic.w	r3, r3, #1
  409d30:	444b      	add	r3, r9
  409d32:	f1a0 0208 	sub.w	r2, r0, #8
  409d36:	429a      	cmp	r2, r3
  409d38:	f000 8121 	beq.w	409f7e <_realloc_r+0x2be>
  409d3c:	1f22      	subs	r2, r4, #4
  409d3e:	2a24      	cmp	r2, #36	; 0x24
  409d40:	f200 8107 	bhi.w	409f52 <_realloc_r+0x292>
  409d44:	2a13      	cmp	r2, #19
  409d46:	f200 80db 	bhi.w	409f00 <_realloc_r+0x240>
  409d4a:	4603      	mov	r3, r0
  409d4c:	462a      	mov	r2, r5
  409d4e:	6811      	ldr	r1, [r2, #0]
  409d50:	6019      	str	r1, [r3, #0]
  409d52:	6851      	ldr	r1, [r2, #4]
  409d54:	6059      	str	r1, [r3, #4]
  409d56:	6892      	ldr	r2, [r2, #8]
  409d58:	609a      	str	r2, [r3, #8]
  409d5a:	4629      	mov	r1, r5
  409d5c:	4640      	mov	r0, r8
  409d5e:	f7ff f90b 	bl	408f78 <_free_r>
  409d62:	e01c      	b.n	409d9e <_realloc_r+0xde>
  409d64:	f027 0707 	bic.w	r7, r7, #7
  409d68:	2f00      	cmp	r7, #0
  409d6a:	463a      	mov	r2, r7
  409d6c:	dabf      	bge.n	409cee <_realloc_r+0x2e>
  409d6e:	2600      	movs	r6, #0
  409d70:	230c      	movs	r3, #12
  409d72:	4630      	mov	r0, r6
  409d74:	f8c8 3000 	str.w	r3, [r8]
  409d78:	b003      	add	sp, #12
  409d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409d7e:	462e      	mov	r6, r5
  409d80:	1be3      	subs	r3, r4, r7
  409d82:	2b0f      	cmp	r3, #15
  409d84:	d81e      	bhi.n	409dc4 <_realloc_r+0x104>
  409d86:	f8d9 3004 	ldr.w	r3, [r9, #4]
  409d8a:	f003 0301 	and.w	r3, r3, #1
  409d8e:	4323      	orrs	r3, r4
  409d90:	444c      	add	r4, r9
  409d92:	f8c9 3004 	str.w	r3, [r9, #4]
  409d96:	6863      	ldr	r3, [r4, #4]
  409d98:	f043 0301 	orr.w	r3, r3, #1
  409d9c:	6063      	str	r3, [r4, #4]
  409d9e:	4640      	mov	r0, r8
  409da0:	f7ff ff88 	bl	409cb4 <__malloc_unlock>
  409da4:	4630      	mov	r0, r6
  409da6:	b003      	add	sp, #12
  409da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409dac:	f023 0303 	bic.w	r3, r3, #3
  409db0:	18e1      	adds	r1, r4, r3
  409db2:	4291      	cmp	r1, r2
  409db4:	db1f      	blt.n	409df6 <_realloc_r+0x136>
  409db6:	68c3      	ldr	r3, [r0, #12]
  409db8:	6882      	ldr	r2, [r0, #8]
  409dba:	462e      	mov	r6, r5
  409dbc:	60d3      	str	r3, [r2, #12]
  409dbe:	460c      	mov	r4, r1
  409dc0:	609a      	str	r2, [r3, #8]
  409dc2:	e7dd      	b.n	409d80 <_realloc_r+0xc0>
  409dc4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  409dc8:	eb09 0107 	add.w	r1, r9, r7
  409dcc:	f002 0201 	and.w	r2, r2, #1
  409dd0:	444c      	add	r4, r9
  409dd2:	f043 0301 	orr.w	r3, r3, #1
  409dd6:	4317      	orrs	r7, r2
  409dd8:	f8c9 7004 	str.w	r7, [r9, #4]
  409ddc:	604b      	str	r3, [r1, #4]
  409dde:	6863      	ldr	r3, [r4, #4]
  409de0:	f043 0301 	orr.w	r3, r3, #1
  409de4:	3108      	adds	r1, #8
  409de6:	6063      	str	r3, [r4, #4]
  409de8:	4640      	mov	r0, r8
  409dea:	f7ff f8c5 	bl	408f78 <_free_r>
  409dee:	e7d6      	b.n	409d9e <_realloc_r+0xde>
  409df0:	4611      	mov	r1, r2
  409df2:	f7ff bbdf 	b.w	4095b4 <_malloc_r>
  409df6:	f01e 0f01 	tst.w	lr, #1
  409dfa:	d18e      	bne.n	409d1a <_realloc_r+0x5a>
  409dfc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409e00:	eba9 0a01 	sub.w	sl, r9, r1
  409e04:	f8da 1004 	ldr.w	r1, [sl, #4]
  409e08:	f021 0103 	bic.w	r1, r1, #3
  409e0c:	440b      	add	r3, r1
  409e0e:	4423      	add	r3, r4
  409e10:	4293      	cmp	r3, r2
  409e12:	db25      	blt.n	409e60 <_realloc_r+0x1a0>
  409e14:	68c2      	ldr	r2, [r0, #12]
  409e16:	6881      	ldr	r1, [r0, #8]
  409e18:	4656      	mov	r6, sl
  409e1a:	60ca      	str	r2, [r1, #12]
  409e1c:	6091      	str	r1, [r2, #8]
  409e1e:	f8da 100c 	ldr.w	r1, [sl, #12]
  409e22:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409e26:	1f22      	subs	r2, r4, #4
  409e28:	2a24      	cmp	r2, #36	; 0x24
  409e2a:	60c1      	str	r1, [r0, #12]
  409e2c:	6088      	str	r0, [r1, #8]
  409e2e:	f200 8094 	bhi.w	409f5a <_realloc_r+0x29a>
  409e32:	2a13      	cmp	r2, #19
  409e34:	d96f      	bls.n	409f16 <_realloc_r+0x256>
  409e36:	6829      	ldr	r1, [r5, #0]
  409e38:	f8ca 1008 	str.w	r1, [sl, #8]
  409e3c:	6869      	ldr	r1, [r5, #4]
  409e3e:	f8ca 100c 	str.w	r1, [sl, #12]
  409e42:	2a1b      	cmp	r2, #27
  409e44:	f200 80a2 	bhi.w	409f8c <_realloc_r+0x2cc>
  409e48:	3508      	adds	r5, #8
  409e4a:	f10a 0210 	add.w	r2, sl, #16
  409e4e:	e063      	b.n	409f18 <_realloc_r+0x258>
  409e50:	f855 3c08 	ldr.w	r3, [r5, #-8]
  409e54:	eba9 0a03 	sub.w	sl, r9, r3
  409e58:	f8da 1004 	ldr.w	r1, [sl, #4]
  409e5c:	f021 0103 	bic.w	r1, r1, #3
  409e60:	1863      	adds	r3, r4, r1
  409e62:	4293      	cmp	r3, r2
  409e64:	f6ff af59 	blt.w	409d1a <_realloc_r+0x5a>
  409e68:	4656      	mov	r6, sl
  409e6a:	e7d8      	b.n	409e1e <_realloc_r+0x15e>
  409e6c:	6841      	ldr	r1, [r0, #4]
  409e6e:	f021 0b03 	bic.w	fp, r1, #3
  409e72:	44a3      	add	fp, r4
  409e74:	f107 0010 	add.w	r0, r7, #16
  409e78:	4583      	cmp	fp, r0
  409e7a:	da56      	bge.n	409f2a <_realloc_r+0x26a>
  409e7c:	f01e 0f01 	tst.w	lr, #1
  409e80:	f47f af4b 	bne.w	409d1a <_realloc_r+0x5a>
  409e84:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409e88:	eba9 0a01 	sub.w	sl, r9, r1
  409e8c:	f8da 1004 	ldr.w	r1, [sl, #4]
  409e90:	f021 0103 	bic.w	r1, r1, #3
  409e94:	448b      	add	fp, r1
  409e96:	4558      	cmp	r0, fp
  409e98:	dce2      	bgt.n	409e60 <_realloc_r+0x1a0>
  409e9a:	4656      	mov	r6, sl
  409e9c:	f8da 100c 	ldr.w	r1, [sl, #12]
  409ea0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409ea4:	1f22      	subs	r2, r4, #4
  409ea6:	2a24      	cmp	r2, #36	; 0x24
  409ea8:	60c1      	str	r1, [r0, #12]
  409eaa:	6088      	str	r0, [r1, #8]
  409eac:	f200 808f 	bhi.w	409fce <_realloc_r+0x30e>
  409eb0:	2a13      	cmp	r2, #19
  409eb2:	f240 808a 	bls.w	409fca <_realloc_r+0x30a>
  409eb6:	6829      	ldr	r1, [r5, #0]
  409eb8:	f8ca 1008 	str.w	r1, [sl, #8]
  409ebc:	6869      	ldr	r1, [r5, #4]
  409ebe:	f8ca 100c 	str.w	r1, [sl, #12]
  409ec2:	2a1b      	cmp	r2, #27
  409ec4:	f200 808a 	bhi.w	409fdc <_realloc_r+0x31c>
  409ec8:	3508      	adds	r5, #8
  409eca:	f10a 0210 	add.w	r2, sl, #16
  409ece:	6829      	ldr	r1, [r5, #0]
  409ed0:	6011      	str	r1, [r2, #0]
  409ed2:	6869      	ldr	r1, [r5, #4]
  409ed4:	6051      	str	r1, [r2, #4]
  409ed6:	68a9      	ldr	r1, [r5, #8]
  409ed8:	6091      	str	r1, [r2, #8]
  409eda:	eb0a 0107 	add.w	r1, sl, r7
  409ede:	ebab 0207 	sub.w	r2, fp, r7
  409ee2:	f042 0201 	orr.w	r2, r2, #1
  409ee6:	6099      	str	r1, [r3, #8]
  409ee8:	604a      	str	r2, [r1, #4]
  409eea:	f8da 3004 	ldr.w	r3, [sl, #4]
  409eee:	f003 0301 	and.w	r3, r3, #1
  409ef2:	431f      	orrs	r7, r3
  409ef4:	4640      	mov	r0, r8
  409ef6:	f8ca 7004 	str.w	r7, [sl, #4]
  409efa:	f7ff fedb 	bl	409cb4 <__malloc_unlock>
  409efe:	e751      	b.n	409da4 <_realloc_r+0xe4>
  409f00:	682b      	ldr	r3, [r5, #0]
  409f02:	6003      	str	r3, [r0, #0]
  409f04:	686b      	ldr	r3, [r5, #4]
  409f06:	6043      	str	r3, [r0, #4]
  409f08:	2a1b      	cmp	r2, #27
  409f0a:	d82d      	bhi.n	409f68 <_realloc_r+0x2a8>
  409f0c:	f100 0308 	add.w	r3, r0, #8
  409f10:	f105 0208 	add.w	r2, r5, #8
  409f14:	e71b      	b.n	409d4e <_realloc_r+0x8e>
  409f16:	4632      	mov	r2, r6
  409f18:	6829      	ldr	r1, [r5, #0]
  409f1a:	6011      	str	r1, [r2, #0]
  409f1c:	6869      	ldr	r1, [r5, #4]
  409f1e:	6051      	str	r1, [r2, #4]
  409f20:	68a9      	ldr	r1, [r5, #8]
  409f22:	6091      	str	r1, [r2, #8]
  409f24:	461c      	mov	r4, r3
  409f26:	46d1      	mov	r9, sl
  409f28:	e72a      	b.n	409d80 <_realloc_r+0xc0>
  409f2a:	eb09 0107 	add.w	r1, r9, r7
  409f2e:	ebab 0b07 	sub.w	fp, fp, r7
  409f32:	f04b 0201 	orr.w	r2, fp, #1
  409f36:	6099      	str	r1, [r3, #8]
  409f38:	604a      	str	r2, [r1, #4]
  409f3a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409f3e:	f003 0301 	and.w	r3, r3, #1
  409f42:	431f      	orrs	r7, r3
  409f44:	4640      	mov	r0, r8
  409f46:	f845 7c04 	str.w	r7, [r5, #-4]
  409f4a:	f7ff feb3 	bl	409cb4 <__malloc_unlock>
  409f4e:	462e      	mov	r6, r5
  409f50:	e728      	b.n	409da4 <_realloc_r+0xe4>
  409f52:	4629      	mov	r1, r5
  409f54:	f7ff fe44 	bl	409be0 <memmove>
  409f58:	e6ff      	b.n	409d5a <_realloc_r+0x9a>
  409f5a:	4629      	mov	r1, r5
  409f5c:	4630      	mov	r0, r6
  409f5e:	461c      	mov	r4, r3
  409f60:	46d1      	mov	r9, sl
  409f62:	f7ff fe3d 	bl	409be0 <memmove>
  409f66:	e70b      	b.n	409d80 <_realloc_r+0xc0>
  409f68:	68ab      	ldr	r3, [r5, #8]
  409f6a:	6083      	str	r3, [r0, #8]
  409f6c:	68eb      	ldr	r3, [r5, #12]
  409f6e:	60c3      	str	r3, [r0, #12]
  409f70:	2a24      	cmp	r2, #36	; 0x24
  409f72:	d017      	beq.n	409fa4 <_realloc_r+0x2e4>
  409f74:	f100 0310 	add.w	r3, r0, #16
  409f78:	f105 0210 	add.w	r2, r5, #16
  409f7c:	e6e7      	b.n	409d4e <_realloc_r+0x8e>
  409f7e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  409f82:	f023 0303 	bic.w	r3, r3, #3
  409f86:	441c      	add	r4, r3
  409f88:	462e      	mov	r6, r5
  409f8a:	e6f9      	b.n	409d80 <_realloc_r+0xc0>
  409f8c:	68a9      	ldr	r1, [r5, #8]
  409f8e:	f8ca 1010 	str.w	r1, [sl, #16]
  409f92:	68e9      	ldr	r1, [r5, #12]
  409f94:	f8ca 1014 	str.w	r1, [sl, #20]
  409f98:	2a24      	cmp	r2, #36	; 0x24
  409f9a:	d00c      	beq.n	409fb6 <_realloc_r+0x2f6>
  409f9c:	3510      	adds	r5, #16
  409f9e:	f10a 0218 	add.w	r2, sl, #24
  409fa2:	e7b9      	b.n	409f18 <_realloc_r+0x258>
  409fa4:	692b      	ldr	r3, [r5, #16]
  409fa6:	6103      	str	r3, [r0, #16]
  409fa8:	696b      	ldr	r3, [r5, #20]
  409faa:	6143      	str	r3, [r0, #20]
  409fac:	f105 0218 	add.w	r2, r5, #24
  409fb0:	f100 0318 	add.w	r3, r0, #24
  409fb4:	e6cb      	b.n	409d4e <_realloc_r+0x8e>
  409fb6:	692a      	ldr	r2, [r5, #16]
  409fb8:	f8ca 2018 	str.w	r2, [sl, #24]
  409fbc:	696a      	ldr	r2, [r5, #20]
  409fbe:	f8ca 201c 	str.w	r2, [sl, #28]
  409fc2:	3518      	adds	r5, #24
  409fc4:	f10a 0220 	add.w	r2, sl, #32
  409fc8:	e7a6      	b.n	409f18 <_realloc_r+0x258>
  409fca:	4632      	mov	r2, r6
  409fcc:	e77f      	b.n	409ece <_realloc_r+0x20e>
  409fce:	4629      	mov	r1, r5
  409fd0:	4630      	mov	r0, r6
  409fd2:	9301      	str	r3, [sp, #4]
  409fd4:	f7ff fe04 	bl	409be0 <memmove>
  409fd8:	9b01      	ldr	r3, [sp, #4]
  409fda:	e77e      	b.n	409eda <_realloc_r+0x21a>
  409fdc:	68a9      	ldr	r1, [r5, #8]
  409fde:	f8ca 1010 	str.w	r1, [sl, #16]
  409fe2:	68e9      	ldr	r1, [r5, #12]
  409fe4:	f8ca 1014 	str.w	r1, [sl, #20]
  409fe8:	2a24      	cmp	r2, #36	; 0x24
  409fea:	d003      	beq.n	409ff4 <_realloc_r+0x334>
  409fec:	3510      	adds	r5, #16
  409fee:	f10a 0218 	add.w	r2, sl, #24
  409ff2:	e76c      	b.n	409ece <_realloc_r+0x20e>
  409ff4:	692a      	ldr	r2, [r5, #16]
  409ff6:	f8ca 2018 	str.w	r2, [sl, #24]
  409ffa:	696a      	ldr	r2, [r5, #20]
  409ffc:	f8ca 201c 	str.w	r2, [sl, #28]
  40a000:	3518      	adds	r5, #24
  40a002:	f10a 0220 	add.w	r2, sl, #32
  40a006:	e762      	b.n	409ece <_realloc_r+0x20e>
  40a008:	204005d0 	.word	0x204005d0

0040a00c <_sbrk_r>:
  40a00c:	b538      	push	{r3, r4, r5, lr}
  40a00e:	4c07      	ldr	r4, [pc, #28]	; (40a02c <_sbrk_r+0x20>)
  40a010:	2300      	movs	r3, #0
  40a012:	4605      	mov	r5, r0
  40a014:	4608      	mov	r0, r1
  40a016:	6023      	str	r3, [r4, #0]
  40a018:	f7f7 f988 	bl	40132c <_sbrk>
  40a01c:	1c43      	adds	r3, r0, #1
  40a01e:	d000      	beq.n	40a022 <_sbrk_r+0x16>
  40a020:	bd38      	pop	{r3, r4, r5, pc}
  40a022:	6823      	ldr	r3, [r4, #0]
  40a024:	2b00      	cmp	r3, #0
  40a026:	d0fb      	beq.n	40a020 <_sbrk_r+0x14>
  40a028:	602b      	str	r3, [r5, #0]
  40a02a:	bd38      	pop	{r3, r4, r5, pc}
  40a02c:	20404a44 	.word	0x20404a44

0040a030 <__sread>:
  40a030:	b510      	push	{r4, lr}
  40a032:	460c      	mov	r4, r1
  40a034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a038:	f000 f9f6 	bl	40a428 <_read_r>
  40a03c:	2800      	cmp	r0, #0
  40a03e:	db03      	blt.n	40a048 <__sread+0x18>
  40a040:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40a042:	4403      	add	r3, r0
  40a044:	6523      	str	r3, [r4, #80]	; 0x50
  40a046:	bd10      	pop	{r4, pc}
  40a048:	89a3      	ldrh	r3, [r4, #12]
  40a04a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40a04e:	81a3      	strh	r3, [r4, #12]
  40a050:	bd10      	pop	{r4, pc}
  40a052:	bf00      	nop

0040a054 <__swrite>:
  40a054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a058:	4616      	mov	r6, r2
  40a05a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40a05e:	461f      	mov	r7, r3
  40a060:	05d3      	lsls	r3, r2, #23
  40a062:	460c      	mov	r4, r1
  40a064:	4605      	mov	r5, r0
  40a066:	d507      	bpl.n	40a078 <__swrite+0x24>
  40a068:	2200      	movs	r2, #0
  40a06a:	2302      	movs	r3, #2
  40a06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a070:	f000 f9c4 	bl	40a3fc <_lseek_r>
  40a074:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a07c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40a080:	81a2      	strh	r2, [r4, #12]
  40a082:	463b      	mov	r3, r7
  40a084:	4632      	mov	r2, r6
  40a086:	4628      	mov	r0, r5
  40a088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a08c:	f000 b8a4 	b.w	40a1d8 <_write_r>

0040a090 <__sseek>:
  40a090:	b510      	push	{r4, lr}
  40a092:	460c      	mov	r4, r1
  40a094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a098:	f000 f9b0 	bl	40a3fc <_lseek_r>
  40a09c:	89a3      	ldrh	r3, [r4, #12]
  40a09e:	1c42      	adds	r2, r0, #1
  40a0a0:	bf0e      	itee	eq
  40a0a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40a0a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40a0aa:	6520      	strne	r0, [r4, #80]	; 0x50
  40a0ac:	81a3      	strh	r3, [r4, #12]
  40a0ae:	bd10      	pop	{r4, pc}

0040a0b0 <__sclose>:
  40a0b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a0b4:	f000 b908 	b.w	40a2c8 <_close_r>

0040a0b8 <__swbuf_r>:
  40a0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a0ba:	460d      	mov	r5, r1
  40a0bc:	4614      	mov	r4, r2
  40a0be:	4606      	mov	r6, r0
  40a0c0:	b110      	cbz	r0, 40a0c8 <__swbuf_r+0x10>
  40a0c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a0c4:	2b00      	cmp	r3, #0
  40a0c6:	d04b      	beq.n	40a160 <__swbuf_r+0xa8>
  40a0c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a0cc:	69a3      	ldr	r3, [r4, #24]
  40a0ce:	60a3      	str	r3, [r4, #8]
  40a0d0:	b291      	uxth	r1, r2
  40a0d2:	0708      	lsls	r0, r1, #28
  40a0d4:	d539      	bpl.n	40a14a <__swbuf_r+0x92>
  40a0d6:	6923      	ldr	r3, [r4, #16]
  40a0d8:	2b00      	cmp	r3, #0
  40a0da:	d036      	beq.n	40a14a <__swbuf_r+0x92>
  40a0dc:	b2ed      	uxtb	r5, r5
  40a0de:	0489      	lsls	r1, r1, #18
  40a0e0:	462f      	mov	r7, r5
  40a0e2:	d515      	bpl.n	40a110 <__swbuf_r+0x58>
  40a0e4:	6822      	ldr	r2, [r4, #0]
  40a0e6:	6961      	ldr	r1, [r4, #20]
  40a0e8:	1ad3      	subs	r3, r2, r3
  40a0ea:	428b      	cmp	r3, r1
  40a0ec:	da1c      	bge.n	40a128 <__swbuf_r+0x70>
  40a0ee:	3301      	adds	r3, #1
  40a0f0:	68a1      	ldr	r1, [r4, #8]
  40a0f2:	1c50      	adds	r0, r2, #1
  40a0f4:	3901      	subs	r1, #1
  40a0f6:	60a1      	str	r1, [r4, #8]
  40a0f8:	6020      	str	r0, [r4, #0]
  40a0fa:	7015      	strb	r5, [r2, #0]
  40a0fc:	6962      	ldr	r2, [r4, #20]
  40a0fe:	429a      	cmp	r2, r3
  40a100:	d01a      	beq.n	40a138 <__swbuf_r+0x80>
  40a102:	89a3      	ldrh	r3, [r4, #12]
  40a104:	07db      	lsls	r3, r3, #31
  40a106:	d501      	bpl.n	40a10c <__swbuf_r+0x54>
  40a108:	2d0a      	cmp	r5, #10
  40a10a:	d015      	beq.n	40a138 <__swbuf_r+0x80>
  40a10c:	4638      	mov	r0, r7
  40a10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a110:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40a112:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40a116:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40a11a:	81a2      	strh	r2, [r4, #12]
  40a11c:	6822      	ldr	r2, [r4, #0]
  40a11e:	6661      	str	r1, [r4, #100]	; 0x64
  40a120:	6961      	ldr	r1, [r4, #20]
  40a122:	1ad3      	subs	r3, r2, r3
  40a124:	428b      	cmp	r3, r1
  40a126:	dbe2      	blt.n	40a0ee <__swbuf_r+0x36>
  40a128:	4621      	mov	r1, r4
  40a12a:	4630      	mov	r0, r6
  40a12c:	f7fe fda6 	bl	408c7c <_fflush_r>
  40a130:	b940      	cbnz	r0, 40a144 <__swbuf_r+0x8c>
  40a132:	6822      	ldr	r2, [r4, #0]
  40a134:	2301      	movs	r3, #1
  40a136:	e7db      	b.n	40a0f0 <__swbuf_r+0x38>
  40a138:	4621      	mov	r1, r4
  40a13a:	4630      	mov	r0, r6
  40a13c:	f7fe fd9e 	bl	408c7c <_fflush_r>
  40a140:	2800      	cmp	r0, #0
  40a142:	d0e3      	beq.n	40a10c <__swbuf_r+0x54>
  40a144:	f04f 37ff 	mov.w	r7, #4294967295
  40a148:	e7e0      	b.n	40a10c <__swbuf_r+0x54>
  40a14a:	4621      	mov	r1, r4
  40a14c:	4630      	mov	r0, r6
  40a14e:	f7fe fc81 	bl	408a54 <__swsetup_r>
  40a152:	2800      	cmp	r0, #0
  40a154:	d1f6      	bne.n	40a144 <__swbuf_r+0x8c>
  40a156:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a15a:	6923      	ldr	r3, [r4, #16]
  40a15c:	b291      	uxth	r1, r2
  40a15e:	e7bd      	b.n	40a0dc <__swbuf_r+0x24>
  40a160:	f7fe fde4 	bl	408d2c <__sinit>
  40a164:	e7b0      	b.n	40a0c8 <__swbuf_r+0x10>
  40a166:	bf00      	nop

0040a168 <_wcrtomb_r>:
  40a168:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a16a:	4606      	mov	r6, r0
  40a16c:	b085      	sub	sp, #20
  40a16e:	461f      	mov	r7, r3
  40a170:	b189      	cbz	r1, 40a196 <_wcrtomb_r+0x2e>
  40a172:	4c10      	ldr	r4, [pc, #64]	; (40a1b4 <_wcrtomb_r+0x4c>)
  40a174:	4d10      	ldr	r5, [pc, #64]	; (40a1b8 <_wcrtomb_r+0x50>)
  40a176:	6824      	ldr	r4, [r4, #0]
  40a178:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40a17a:	2c00      	cmp	r4, #0
  40a17c:	bf08      	it	eq
  40a17e:	462c      	moveq	r4, r5
  40a180:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40a184:	47a0      	blx	r4
  40a186:	1c43      	adds	r3, r0, #1
  40a188:	d103      	bne.n	40a192 <_wcrtomb_r+0x2a>
  40a18a:	2200      	movs	r2, #0
  40a18c:	238a      	movs	r3, #138	; 0x8a
  40a18e:	603a      	str	r2, [r7, #0]
  40a190:	6033      	str	r3, [r6, #0]
  40a192:	b005      	add	sp, #20
  40a194:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a196:	460c      	mov	r4, r1
  40a198:	4906      	ldr	r1, [pc, #24]	; (40a1b4 <_wcrtomb_r+0x4c>)
  40a19a:	4a07      	ldr	r2, [pc, #28]	; (40a1b8 <_wcrtomb_r+0x50>)
  40a19c:	6809      	ldr	r1, [r1, #0]
  40a19e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40a1a0:	2900      	cmp	r1, #0
  40a1a2:	bf08      	it	eq
  40a1a4:	4611      	moveq	r1, r2
  40a1a6:	4622      	mov	r2, r4
  40a1a8:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40a1ac:	a901      	add	r1, sp, #4
  40a1ae:	47a0      	blx	r4
  40a1b0:	e7e9      	b.n	40a186 <_wcrtomb_r+0x1e>
  40a1b2:	bf00      	nop
  40a1b4:	20400034 	.word	0x20400034
  40a1b8:	20400464 	.word	0x20400464

0040a1bc <__ascii_wctomb>:
  40a1bc:	b121      	cbz	r1, 40a1c8 <__ascii_wctomb+0xc>
  40a1be:	2aff      	cmp	r2, #255	; 0xff
  40a1c0:	d804      	bhi.n	40a1cc <__ascii_wctomb+0x10>
  40a1c2:	700a      	strb	r2, [r1, #0]
  40a1c4:	2001      	movs	r0, #1
  40a1c6:	4770      	bx	lr
  40a1c8:	4608      	mov	r0, r1
  40a1ca:	4770      	bx	lr
  40a1cc:	238a      	movs	r3, #138	; 0x8a
  40a1ce:	6003      	str	r3, [r0, #0]
  40a1d0:	f04f 30ff 	mov.w	r0, #4294967295
  40a1d4:	4770      	bx	lr
  40a1d6:	bf00      	nop

0040a1d8 <_write_r>:
  40a1d8:	b570      	push	{r4, r5, r6, lr}
  40a1da:	460d      	mov	r5, r1
  40a1dc:	4c08      	ldr	r4, [pc, #32]	; (40a200 <_write_r+0x28>)
  40a1de:	4611      	mov	r1, r2
  40a1e0:	4606      	mov	r6, r0
  40a1e2:	461a      	mov	r2, r3
  40a1e4:	4628      	mov	r0, r5
  40a1e6:	2300      	movs	r3, #0
  40a1e8:	6023      	str	r3, [r4, #0]
  40a1ea:	f7f6 f9cd 	bl	400588 <_write>
  40a1ee:	1c43      	adds	r3, r0, #1
  40a1f0:	d000      	beq.n	40a1f4 <_write_r+0x1c>
  40a1f2:	bd70      	pop	{r4, r5, r6, pc}
  40a1f4:	6823      	ldr	r3, [r4, #0]
  40a1f6:	2b00      	cmp	r3, #0
  40a1f8:	d0fb      	beq.n	40a1f2 <_write_r+0x1a>
  40a1fa:	6033      	str	r3, [r6, #0]
  40a1fc:	bd70      	pop	{r4, r5, r6, pc}
  40a1fe:	bf00      	nop
  40a200:	20404a44 	.word	0x20404a44

0040a204 <__register_exitproc>:
  40a204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a208:	4d2c      	ldr	r5, [pc, #176]	; (40a2bc <__register_exitproc+0xb8>)
  40a20a:	4606      	mov	r6, r0
  40a20c:	6828      	ldr	r0, [r5, #0]
  40a20e:	4698      	mov	r8, r3
  40a210:	460f      	mov	r7, r1
  40a212:	4691      	mov	r9, r2
  40a214:	f7ff f94a 	bl	4094ac <__retarget_lock_acquire_recursive>
  40a218:	4b29      	ldr	r3, [pc, #164]	; (40a2c0 <__register_exitproc+0xbc>)
  40a21a:	681c      	ldr	r4, [r3, #0]
  40a21c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40a220:	2b00      	cmp	r3, #0
  40a222:	d03e      	beq.n	40a2a2 <__register_exitproc+0x9e>
  40a224:	685a      	ldr	r2, [r3, #4]
  40a226:	2a1f      	cmp	r2, #31
  40a228:	dc1c      	bgt.n	40a264 <__register_exitproc+0x60>
  40a22a:	f102 0e01 	add.w	lr, r2, #1
  40a22e:	b176      	cbz	r6, 40a24e <__register_exitproc+0x4a>
  40a230:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40a234:	2401      	movs	r4, #1
  40a236:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40a23a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40a23e:	4094      	lsls	r4, r2
  40a240:	4320      	orrs	r0, r4
  40a242:	2e02      	cmp	r6, #2
  40a244:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40a248:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40a24c:	d023      	beq.n	40a296 <__register_exitproc+0x92>
  40a24e:	3202      	adds	r2, #2
  40a250:	f8c3 e004 	str.w	lr, [r3, #4]
  40a254:	6828      	ldr	r0, [r5, #0]
  40a256:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40a25a:	f7ff f929 	bl	4094b0 <__retarget_lock_release_recursive>
  40a25e:	2000      	movs	r0, #0
  40a260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a264:	4b17      	ldr	r3, [pc, #92]	; (40a2c4 <__register_exitproc+0xc0>)
  40a266:	b30b      	cbz	r3, 40a2ac <__register_exitproc+0xa8>
  40a268:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40a26c:	f7ff f99a 	bl	4095a4 <malloc>
  40a270:	4603      	mov	r3, r0
  40a272:	b1d8      	cbz	r0, 40a2ac <__register_exitproc+0xa8>
  40a274:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40a278:	6002      	str	r2, [r0, #0]
  40a27a:	2100      	movs	r1, #0
  40a27c:	6041      	str	r1, [r0, #4]
  40a27e:	460a      	mov	r2, r1
  40a280:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40a284:	f04f 0e01 	mov.w	lr, #1
  40a288:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40a28c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40a290:	2e00      	cmp	r6, #0
  40a292:	d0dc      	beq.n	40a24e <__register_exitproc+0x4a>
  40a294:	e7cc      	b.n	40a230 <__register_exitproc+0x2c>
  40a296:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40a29a:	430c      	orrs	r4, r1
  40a29c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40a2a0:	e7d5      	b.n	40a24e <__register_exitproc+0x4a>
  40a2a2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40a2a6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40a2aa:	e7bb      	b.n	40a224 <__register_exitproc+0x20>
  40a2ac:	6828      	ldr	r0, [r5, #0]
  40a2ae:	f7ff f8ff 	bl	4094b0 <__retarget_lock_release_recursive>
  40a2b2:	f04f 30ff 	mov.w	r0, #4294967295
  40a2b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a2ba:	bf00      	nop
  40a2bc:	20400460 	.word	0x20400460
  40a2c0:	0040c11c 	.word	0x0040c11c
  40a2c4:	004095a5 	.word	0x004095a5

0040a2c8 <_close_r>:
  40a2c8:	b538      	push	{r3, r4, r5, lr}
  40a2ca:	4c07      	ldr	r4, [pc, #28]	; (40a2e8 <_close_r+0x20>)
  40a2cc:	2300      	movs	r3, #0
  40a2ce:	4605      	mov	r5, r0
  40a2d0:	4608      	mov	r0, r1
  40a2d2:	6023      	str	r3, [r4, #0]
  40a2d4:	f7f7 f846 	bl	401364 <_close>
  40a2d8:	1c43      	adds	r3, r0, #1
  40a2da:	d000      	beq.n	40a2de <_close_r+0x16>
  40a2dc:	bd38      	pop	{r3, r4, r5, pc}
  40a2de:	6823      	ldr	r3, [r4, #0]
  40a2e0:	2b00      	cmp	r3, #0
  40a2e2:	d0fb      	beq.n	40a2dc <_close_r+0x14>
  40a2e4:	602b      	str	r3, [r5, #0]
  40a2e6:	bd38      	pop	{r3, r4, r5, pc}
  40a2e8:	20404a44 	.word	0x20404a44

0040a2ec <_fclose_r>:
  40a2ec:	b570      	push	{r4, r5, r6, lr}
  40a2ee:	b159      	cbz	r1, 40a308 <_fclose_r+0x1c>
  40a2f0:	4605      	mov	r5, r0
  40a2f2:	460c      	mov	r4, r1
  40a2f4:	b110      	cbz	r0, 40a2fc <_fclose_r+0x10>
  40a2f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a2f8:	2b00      	cmp	r3, #0
  40a2fa:	d03c      	beq.n	40a376 <_fclose_r+0x8a>
  40a2fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a2fe:	07d8      	lsls	r0, r3, #31
  40a300:	d505      	bpl.n	40a30e <_fclose_r+0x22>
  40a302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a306:	b92b      	cbnz	r3, 40a314 <_fclose_r+0x28>
  40a308:	2600      	movs	r6, #0
  40a30a:	4630      	mov	r0, r6
  40a30c:	bd70      	pop	{r4, r5, r6, pc}
  40a30e:	89a3      	ldrh	r3, [r4, #12]
  40a310:	0599      	lsls	r1, r3, #22
  40a312:	d53c      	bpl.n	40a38e <_fclose_r+0xa2>
  40a314:	4621      	mov	r1, r4
  40a316:	4628      	mov	r0, r5
  40a318:	f7fe fc10 	bl	408b3c <__sflush_r>
  40a31c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40a31e:	4606      	mov	r6, r0
  40a320:	b133      	cbz	r3, 40a330 <_fclose_r+0x44>
  40a322:	69e1      	ldr	r1, [r4, #28]
  40a324:	4628      	mov	r0, r5
  40a326:	4798      	blx	r3
  40a328:	2800      	cmp	r0, #0
  40a32a:	bfb8      	it	lt
  40a32c:	f04f 36ff 	movlt.w	r6, #4294967295
  40a330:	89a3      	ldrh	r3, [r4, #12]
  40a332:	061a      	lsls	r2, r3, #24
  40a334:	d422      	bmi.n	40a37c <_fclose_r+0x90>
  40a336:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40a338:	b141      	cbz	r1, 40a34c <_fclose_r+0x60>
  40a33a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40a33e:	4299      	cmp	r1, r3
  40a340:	d002      	beq.n	40a348 <_fclose_r+0x5c>
  40a342:	4628      	mov	r0, r5
  40a344:	f7fe fe18 	bl	408f78 <_free_r>
  40a348:	2300      	movs	r3, #0
  40a34a:	6323      	str	r3, [r4, #48]	; 0x30
  40a34c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40a34e:	b121      	cbz	r1, 40a35a <_fclose_r+0x6e>
  40a350:	4628      	mov	r0, r5
  40a352:	f7fe fe11 	bl	408f78 <_free_r>
  40a356:	2300      	movs	r3, #0
  40a358:	6463      	str	r3, [r4, #68]	; 0x44
  40a35a:	f7fe fd13 	bl	408d84 <__sfp_lock_acquire>
  40a35e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a360:	2200      	movs	r2, #0
  40a362:	07db      	lsls	r3, r3, #31
  40a364:	81a2      	strh	r2, [r4, #12]
  40a366:	d50e      	bpl.n	40a386 <_fclose_r+0x9a>
  40a368:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a36a:	f7ff f89d 	bl	4094a8 <__retarget_lock_close_recursive>
  40a36e:	f7fe fd0f 	bl	408d90 <__sfp_lock_release>
  40a372:	4630      	mov	r0, r6
  40a374:	bd70      	pop	{r4, r5, r6, pc}
  40a376:	f7fe fcd9 	bl	408d2c <__sinit>
  40a37a:	e7bf      	b.n	40a2fc <_fclose_r+0x10>
  40a37c:	6921      	ldr	r1, [r4, #16]
  40a37e:	4628      	mov	r0, r5
  40a380:	f7fe fdfa 	bl	408f78 <_free_r>
  40a384:	e7d7      	b.n	40a336 <_fclose_r+0x4a>
  40a386:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a388:	f7ff f892 	bl	4094b0 <__retarget_lock_release_recursive>
  40a38c:	e7ec      	b.n	40a368 <_fclose_r+0x7c>
  40a38e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a390:	f7ff f88c 	bl	4094ac <__retarget_lock_acquire_recursive>
  40a394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a398:	2b00      	cmp	r3, #0
  40a39a:	d1bb      	bne.n	40a314 <_fclose_r+0x28>
  40a39c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40a39e:	f016 0601 	ands.w	r6, r6, #1
  40a3a2:	d1b1      	bne.n	40a308 <_fclose_r+0x1c>
  40a3a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a3a6:	f7ff f883 	bl	4094b0 <__retarget_lock_release_recursive>
  40a3aa:	4630      	mov	r0, r6
  40a3ac:	bd70      	pop	{r4, r5, r6, pc}
  40a3ae:	bf00      	nop

0040a3b0 <_fstat_r>:
  40a3b0:	b538      	push	{r3, r4, r5, lr}
  40a3b2:	460b      	mov	r3, r1
  40a3b4:	4c07      	ldr	r4, [pc, #28]	; (40a3d4 <_fstat_r+0x24>)
  40a3b6:	4605      	mov	r5, r0
  40a3b8:	4611      	mov	r1, r2
  40a3ba:	4618      	mov	r0, r3
  40a3bc:	2300      	movs	r3, #0
  40a3be:	6023      	str	r3, [r4, #0]
  40a3c0:	f7f6 ffd3 	bl	40136a <_fstat>
  40a3c4:	1c43      	adds	r3, r0, #1
  40a3c6:	d000      	beq.n	40a3ca <_fstat_r+0x1a>
  40a3c8:	bd38      	pop	{r3, r4, r5, pc}
  40a3ca:	6823      	ldr	r3, [r4, #0]
  40a3cc:	2b00      	cmp	r3, #0
  40a3ce:	d0fb      	beq.n	40a3c8 <_fstat_r+0x18>
  40a3d0:	602b      	str	r3, [r5, #0]
  40a3d2:	bd38      	pop	{r3, r4, r5, pc}
  40a3d4:	20404a44 	.word	0x20404a44

0040a3d8 <_isatty_r>:
  40a3d8:	b538      	push	{r3, r4, r5, lr}
  40a3da:	4c07      	ldr	r4, [pc, #28]	; (40a3f8 <_isatty_r+0x20>)
  40a3dc:	2300      	movs	r3, #0
  40a3de:	4605      	mov	r5, r0
  40a3e0:	4608      	mov	r0, r1
  40a3e2:	6023      	str	r3, [r4, #0]
  40a3e4:	f7f6 ffc6 	bl	401374 <_isatty>
  40a3e8:	1c43      	adds	r3, r0, #1
  40a3ea:	d000      	beq.n	40a3ee <_isatty_r+0x16>
  40a3ec:	bd38      	pop	{r3, r4, r5, pc}
  40a3ee:	6823      	ldr	r3, [r4, #0]
  40a3f0:	2b00      	cmp	r3, #0
  40a3f2:	d0fb      	beq.n	40a3ec <_isatty_r+0x14>
  40a3f4:	602b      	str	r3, [r5, #0]
  40a3f6:	bd38      	pop	{r3, r4, r5, pc}
  40a3f8:	20404a44 	.word	0x20404a44

0040a3fc <_lseek_r>:
  40a3fc:	b570      	push	{r4, r5, r6, lr}
  40a3fe:	460d      	mov	r5, r1
  40a400:	4c08      	ldr	r4, [pc, #32]	; (40a424 <_lseek_r+0x28>)
  40a402:	4611      	mov	r1, r2
  40a404:	4606      	mov	r6, r0
  40a406:	461a      	mov	r2, r3
  40a408:	4628      	mov	r0, r5
  40a40a:	2300      	movs	r3, #0
  40a40c:	6023      	str	r3, [r4, #0]
  40a40e:	f7f6 ffb3 	bl	401378 <_lseek>
  40a412:	1c43      	adds	r3, r0, #1
  40a414:	d000      	beq.n	40a418 <_lseek_r+0x1c>
  40a416:	bd70      	pop	{r4, r5, r6, pc}
  40a418:	6823      	ldr	r3, [r4, #0]
  40a41a:	2b00      	cmp	r3, #0
  40a41c:	d0fb      	beq.n	40a416 <_lseek_r+0x1a>
  40a41e:	6033      	str	r3, [r6, #0]
  40a420:	bd70      	pop	{r4, r5, r6, pc}
  40a422:	bf00      	nop
  40a424:	20404a44 	.word	0x20404a44

0040a428 <_read_r>:
  40a428:	b570      	push	{r4, r5, r6, lr}
  40a42a:	460d      	mov	r5, r1
  40a42c:	4c08      	ldr	r4, [pc, #32]	; (40a450 <_read_r+0x28>)
  40a42e:	4611      	mov	r1, r2
  40a430:	4606      	mov	r6, r0
  40a432:	461a      	mov	r2, r3
  40a434:	4628      	mov	r0, r5
  40a436:	2300      	movs	r3, #0
  40a438:	6023      	str	r3, [r4, #0]
  40a43a:	f7f6 f887 	bl	40054c <_read>
  40a43e:	1c43      	adds	r3, r0, #1
  40a440:	d000      	beq.n	40a444 <_read_r+0x1c>
  40a442:	bd70      	pop	{r4, r5, r6, pc}
  40a444:	6823      	ldr	r3, [r4, #0]
  40a446:	2b00      	cmp	r3, #0
  40a448:	d0fb      	beq.n	40a442 <_read_r+0x1a>
  40a44a:	6033      	str	r3, [r6, #0]
  40a44c:	bd70      	pop	{r4, r5, r6, pc}
  40a44e:	bf00      	nop
  40a450:	20404a44 	.word	0x20404a44

0040a454 <__aeabi_uldivmod>:
  40a454:	b953      	cbnz	r3, 40a46c <__aeabi_uldivmod+0x18>
  40a456:	b94a      	cbnz	r2, 40a46c <__aeabi_uldivmod+0x18>
  40a458:	2900      	cmp	r1, #0
  40a45a:	bf08      	it	eq
  40a45c:	2800      	cmpeq	r0, #0
  40a45e:	bf1c      	itt	ne
  40a460:	f04f 31ff 	movne.w	r1, #4294967295
  40a464:	f04f 30ff 	movne.w	r0, #4294967295
  40a468:	f000 b97a 	b.w	40a760 <__aeabi_idiv0>
  40a46c:	f1ad 0c08 	sub.w	ip, sp, #8
  40a470:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40a474:	f000 f806 	bl	40a484 <__udivmoddi4>
  40a478:	f8dd e004 	ldr.w	lr, [sp, #4]
  40a47c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40a480:	b004      	add	sp, #16
  40a482:	4770      	bx	lr

0040a484 <__udivmoddi4>:
  40a484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a488:	468c      	mov	ip, r1
  40a48a:	460d      	mov	r5, r1
  40a48c:	4604      	mov	r4, r0
  40a48e:	9e08      	ldr	r6, [sp, #32]
  40a490:	2b00      	cmp	r3, #0
  40a492:	d151      	bne.n	40a538 <__udivmoddi4+0xb4>
  40a494:	428a      	cmp	r2, r1
  40a496:	4617      	mov	r7, r2
  40a498:	d96d      	bls.n	40a576 <__udivmoddi4+0xf2>
  40a49a:	fab2 fe82 	clz	lr, r2
  40a49e:	f1be 0f00 	cmp.w	lr, #0
  40a4a2:	d00b      	beq.n	40a4bc <__udivmoddi4+0x38>
  40a4a4:	f1ce 0c20 	rsb	ip, lr, #32
  40a4a8:	fa01 f50e 	lsl.w	r5, r1, lr
  40a4ac:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a4b0:	fa02 f70e 	lsl.w	r7, r2, lr
  40a4b4:	ea4c 0c05 	orr.w	ip, ip, r5
  40a4b8:	fa00 f40e 	lsl.w	r4, r0, lr
  40a4bc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40a4c0:	0c25      	lsrs	r5, r4, #16
  40a4c2:	fbbc f8fa 	udiv	r8, ip, sl
  40a4c6:	fa1f f987 	uxth.w	r9, r7
  40a4ca:	fb0a cc18 	mls	ip, sl, r8, ip
  40a4ce:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40a4d2:	fb08 f309 	mul.w	r3, r8, r9
  40a4d6:	42ab      	cmp	r3, r5
  40a4d8:	d90a      	bls.n	40a4f0 <__udivmoddi4+0x6c>
  40a4da:	19ed      	adds	r5, r5, r7
  40a4dc:	f108 32ff 	add.w	r2, r8, #4294967295
  40a4e0:	f080 8123 	bcs.w	40a72a <__udivmoddi4+0x2a6>
  40a4e4:	42ab      	cmp	r3, r5
  40a4e6:	f240 8120 	bls.w	40a72a <__udivmoddi4+0x2a6>
  40a4ea:	f1a8 0802 	sub.w	r8, r8, #2
  40a4ee:	443d      	add	r5, r7
  40a4f0:	1aed      	subs	r5, r5, r3
  40a4f2:	b2a4      	uxth	r4, r4
  40a4f4:	fbb5 f0fa 	udiv	r0, r5, sl
  40a4f8:	fb0a 5510 	mls	r5, sl, r0, r5
  40a4fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40a500:	fb00 f909 	mul.w	r9, r0, r9
  40a504:	45a1      	cmp	r9, r4
  40a506:	d909      	bls.n	40a51c <__udivmoddi4+0x98>
  40a508:	19e4      	adds	r4, r4, r7
  40a50a:	f100 33ff 	add.w	r3, r0, #4294967295
  40a50e:	f080 810a 	bcs.w	40a726 <__udivmoddi4+0x2a2>
  40a512:	45a1      	cmp	r9, r4
  40a514:	f240 8107 	bls.w	40a726 <__udivmoddi4+0x2a2>
  40a518:	3802      	subs	r0, #2
  40a51a:	443c      	add	r4, r7
  40a51c:	eba4 0409 	sub.w	r4, r4, r9
  40a520:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40a524:	2100      	movs	r1, #0
  40a526:	2e00      	cmp	r6, #0
  40a528:	d061      	beq.n	40a5ee <__udivmoddi4+0x16a>
  40a52a:	fa24 f40e 	lsr.w	r4, r4, lr
  40a52e:	2300      	movs	r3, #0
  40a530:	6034      	str	r4, [r6, #0]
  40a532:	6073      	str	r3, [r6, #4]
  40a534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a538:	428b      	cmp	r3, r1
  40a53a:	d907      	bls.n	40a54c <__udivmoddi4+0xc8>
  40a53c:	2e00      	cmp	r6, #0
  40a53e:	d054      	beq.n	40a5ea <__udivmoddi4+0x166>
  40a540:	2100      	movs	r1, #0
  40a542:	e886 0021 	stmia.w	r6, {r0, r5}
  40a546:	4608      	mov	r0, r1
  40a548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a54c:	fab3 f183 	clz	r1, r3
  40a550:	2900      	cmp	r1, #0
  40a552:	f040 808e 	bne.w	40a672 <__udivmoddi4+0x1ee>
  40a556:	42ab      	cmp	r3, r5
  40a558:	d302      	bcc.n	40a560 <__udivmoddi4+0xdc>
  40a55a:	4282      	cmp	r2, r0
  40a55c:	f200 80fa 	bhi.w	40a754 <__udivmoddi4+0x2d0>
  40a560:	1a84      	subs	r4, r0, r2
  40a562:	eb65 0503 	sbc.w	r5, r5, r3
  40a566:	2001      	movs	r0, #1
  40a568:	46ac      	mov	ip, r5
  40a56a:	2e00      	cmp	r6, #0
  40a56c:	d03f      	beq.n	40a5ee <__udivmoddi4+0x16a>
  40a56e:	e886 1010 	stmia.w	r6, {r4, ip}
  40a572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a576:	b912      	cbnz	r2, 40a57e <__udivmoddi4+0xfa>
  40a578:	2701      	movs	r7, #1
  40a57a:	fbb7 f7f2 	udiv	r7, r7, r2
  40a57e:	fab7 fe87 	clz	lr, r7
  40a582:	f1be 0f00 	cmp.w	lr, #0
  40a586:	d134      	bne.n	40a5f2 <__udivmoddi4+0x16e>
  40a588:	1beb      	subs	r3, r5, r7
  40a58a:	0c3a      	lsrs	r2, r7, #16
  40a58c:	fa1f fc87 	uxth.w	ip, r7
  40a590:	2101      	movs	r1, #1
  40a592:	fbb3 f8f2 	udiv	r8, r3, r2
  40a596:	0c25      	lsrs	r5, r4, #16
  40a598:	fb02 3318 	mls	r3, r2, r8, r3
  40a59c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40a5a0:	fb0c f308 	mul.w	r3, ip, r8
  40a5a4:	42ab      	cmp	r3, r5
  40a5a6:	d907      	bls.n	40a5b8 <__udivmoddi4+0x134>
  40a5a8:	19ed      	adds	r5, r5, r7
  40a5aa:	f108 30ff 	add.w	r0, r8, #4294967295
  40a5ae:	d202      	bcs.n	40a5b6 <__udivmoddi4+0x132>
  40a5b0:	42ab      	cmp	r3, r5
  40a5b2:	f200 80d1 	bhi.w	40a758 <__udivmoddi4+0x2d4>
  40a5b6:	4680      	mov	r8, r0
  40a5b8:	1aed      	subs	r5, r5, r3
  40a5ba:	b2a3      	uxth	r3, r4
  40a5bc:	fbb5 f0f2 	udiv	r0, r5, r2
  40a5c0:	fb02 5510 	mls	r5, r2, r0, r5
  40a5c4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40a5c8:	fb0c fc00 	mul.w	ip, ip, r0
  40a5cc:	45a4      	cmp	ip, r4
  40a5ce:	d907      	bls.n	40a5e0 <__udivmoddi4+0x15c>
  40a5d0:	19e4      	adds	r4, r4, r7
  40a5d2:	f100 33ff 	add.w	r3, r0, #4294967295
  40a5d6:	d202      	bcs.n	40a5de <__udivmoddi4+0x15a>
  40a5d8:	45a4      	cmp	ip, r4
  40a5da:	f200 80b8 	bhi.w	40a74e <__udivmoddi4+0x2ca>
  40a5de:	4618      	mov	r0, r3
  40a5e0:	eba4 040c 	sub.w	r4, r4, ip
  40a5e4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40a5e8:	e79d      	b.n	40a526 <__udivmoddi4+0xa2>
  40a5ea:	4631      	mov	r1, r6
  40a5ec:	4630      	mov	r0, r6
  40a5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a5f2:	f1ce 0420 	rsb	r4, lr, #32
  40a5f6:	fa05 f30e 	lsl.w	r3, r5, lr
  40a5fa:	fa07 f70e 	lsl.w	r7, r7, lr
  40a5fe:	fa20 f804 	lsr.w	r8, r0, r4
  40a602:	0c3a      	lsrs	r2, r7, #16
  40a604:	fa25 f404 	lsr.w	r4, r5, r4
  40a608:	ea48 0803 	orr.w	r8, r8, r3
  40a60c:	fbb4 f1f2 	udiv	r1, r4, r2
  40a610:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40a614:	fb02 4411 	mls	r4, r2, r1, r4
  40a618:	fa1f fc87 	uxth.w	ip, r7
  40a61c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40a620:	fb01 f30c 	mul.w	r3, r1, ip
  40a624:	42ab      	cmp	r3, r5
  40a626:	fa00 f40e 	lsl.w	r4, r0, lr
  40a62a:	d909      	bls.n	40a640 <__udivmoddi4+0x1bc>
  40a62c:	19ed      	adds	r5, r5, r7
  40a62e:	f101 30ff 	add.w	r0, r1, #4294967295
  40a632:	f080 808a 	bcs.w	40a74a <__udivmoddi4+0x2c6>
  40a636:	42ab      	cmp	r3, r5
  40a638:	f240 8087 	bls.w	40a74a <__udivmoddi4+0x2c6>
  40a63c:	3902      	subs	r1, #2
  40a63e:	443d      	add	r5, r7
  40a640:	1aeb      	subs	r3, r5, r3
  40a642:	fa1f f588 	uxth.w	r5, r8
  40a646:	fbb3 f0f2 	udiv	r0, r3, r2
  40a64a:	fb02 3310 	mls	r3, r2, r0, r3
  40a64e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40a652:	fb00 f30c 	mul.w	r3, r0, ip
  40a656:	42ab      	cmp	r3, r5
  40a658:	d907      	bls.n	40a66a <__udivmoddi4+0x1e6>
  40a65a:	19ed      	adds	r5, r5, r7
  40a65c:	f100 38ff 	add.w	r8, r0, #4294967295
  40a660:	d26f      	bcs.n	40a742 <__udivmoddi4+0x2be>
  40a662:	42ab      	cmp	r3, r5
  40a664:	d96d      	bls.n	40a742 <__udivmoddi4+0x2be>
  40a666:	3802      	subs	r0, #2
  40a668:	443d      	add	r5, r7
  40a66a:	1aeb      	subs	r3, r5, r3
  40a66c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40a670:	e78f      	b.n	40a592 <__udivmoddi4+0x10e>
  40a672:	f1c1 0720 	rsb	r7, r1, #32
  40a676:	fa22 f807 	lsr.w	r8, r2, r7
  40a67a:	408b      	lsls	r3, r1
  40a67c:	fa05 f401 	lsl.w	r4, r5, r1
  40a680:	ea48 0303 	orr.w	r3, r8, r3
  40a684:	fa20 fe07 	lsr.w	lr, r0, r7
  40a688:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40a68c:	40fd      	lsrs	r5, r7
  40a68e:	ea4e 0e04 	orr.w	lr, lr, r4
  40a692:	fbb5 f9fc 	udiv	r9, r5, ip
  40a696:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40a69a:	fb0c 5519 	mls	r5, ip, r9, r5
  40a69e:	fa1f f883 	uxth.w	r8, r3
  40a6a2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40a6a6:	fb09 f408 	mul.w	r4, r9, r8
  40a6aa:	42ac      	cmp	r4, r5
  40a6ac:	fa02 f201 	lsl.w	r2, r2, r1
  40a6b0:	fa00 fa01 	lsl.w	sl, r0, r1
  40a6b4:	d908      	bls.n	40a6c8 <__udivmoddi4+0x244>
  40a6b6:	18ed      	adds	r5, r5, r3
  40a6b8:	f109 30ff 	add.w	r0, r9, #4294967295
  40a6bc:	d243      	bcs.n	40a746 <__udivmoddi4+0x2c2>
  40a6be:	42ac      	cmp	r4, r5
  40a6c0:	d941      	bls.n	40a746 <__udivmoddi4+0x2c2>
  40a6c2:	f1a9 0902 	sub.w	r9, r9, #2
  40a6c6:	441d      	add	r5, r3
  40a6c8:	1b2d      	subs	r5, r5, r4
  40a6ca:	fa1f fe8e 	uxth.w	lr, lr
  40a6ce:	fbb5 f0fc 	udiv	r0, r5, ip
  40a6d2:	fb0c 5510 	mls	r5, ip, r0, r5
  40a6d6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40a6da:	fb00 f808 	mul.w	r8, r0, r8
  40a6de:	45a0      	cmp	r8, r4
  40a6e0:	d907      	bls.n	40a6f2 <__udivmoddi4+0x26e>
  40a6e2:	18e4      	adds	r4, r4, r3
  40a6e4:	f100 35ff 	add.w	r5, r0, #4294967295
  40a6e8:	d229      	bcs.n	40a73e <__udivmoddi4+0x2ba>
  40a6ea:	45a0      	cmp	r8, r4
  40a6ec:	d927      	bls.n	40a73e <__udivmoddi4+0x2ba>
  40a6ee:	3802      	subs	r0, #2
  40a6f0:	441c      	add	r4, r3
  40a6f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40a6f6:	eba4 0408 	sub.w	r4, r4, r8
  40a6fa:	fba0 8902 	umull	r8, r9, r0, r2
  40a6fe:	454c      	cmp	r4, r9
  40a700:	46c6      	mov	lr, r8
  40a702:	464d      	mov	r5, r9
  40a704:	d315      	bcc.n	40a732 <__udivmoddi4+0x2ae>
  40a706:	d012      	beq.n	40a72e <__udivmoddi4+0x2aa>
  40a708:	b156      	cbz	r6, 40a720 <__udivmoddi4+0x29c>
  40a70a:	ebba 030e 	subs.w	r3, sl, lr
  40a70e:	eb64 0405 	sbc.w	r4, r4, r5
  40a712:	fa04 f707 	lsl.w	r7, r4, r7
  40a716:	40cb      	lsrs	r3, r1
  40a718:	431f      	orrs	r7, r3
  40a71a:	40cc      	lsrs	r4, r1
  40a71c:	6037      	str	r7, [r6, #0]
  40a71e:	6074      	str	r4, [r6, #4]
  40a720:	2100      	movs	r1, #0
  40a722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a726:	4618      	mov	r0, r3
  40a728:	e6f8      	b.n	40a51c <__udivmoddi4+0x98>
  40a72a:	4690      	mov	r8, r2
  40a72c:	e6e0      	b.n	40a4f0 <__udivmoddi4+0x6c>
  40a72e:	45c2      	cmp	sl, r8
  40a730:	d2ea      	bcs.n	40a708 <__udivmoddi4+0x284>
  40a732:	ebb8 0e02 	subs.w	lr, r8, r2
  40a736:	eb69 0503 	sbc.w	r5, r9, r3
  40a73a:	3801      	subs	r0, #1
  40a73c:	e7e4      	b.n	40a708 <__udivmoddi4+0x284>
  40a73e:	4628      	mov	r0, r5
  40a740:	e7d7      	b.n	40a6f2 <__udivmoddi4+0x26e>
  40a742:	4640      	mov	r0, r8
  40a744:	e791      	b.n	40a66a <__udivmoddi4+0x1e6>
  40a746:	4681      	mov	r9, r0
  40a748:	e7be      	b.n	40a6c8 <__udivmoddi4+0x244>
  40a74a:	4601      	mov	r1, r0
  40a74c:	e778      	b.n	40a640 <__udivmoddi4+0x1bc>
  40a74e:	3802      	subs	r0, #2
  40a750:	443c      	add	r4, r7
  40a752:	e745      	b.n	40a5e0 <__udivmoddi4+0x15c>
  40a754:	4608      	mov	r0, r1
  40a756:	e708      	b.n	40a56a <__udivmoddi4+0xe6>
  40a758:	f1a8 0802 	sub.w	r8, r8, #2
  40a75c:	443d      	add	r5, r7
  40a75e:	e72b      	b.n	40a5b8 <__udivmoddi4+0x134>

0040a760 <__aeabi_idiv0>:
  40a760:	4770      	bx	lr
  40a762:	bf00      	nop

0040a764 <ip_addr_any>:
  40a764:	0000 0000 2e2e 732f 6372 412f 4653 742f     ....../src/ASF/t
  40a774:	6968 6472 6170 7472 2f79 776c 7069 6c2f     hirdparty/lwip/l
  40a784:	6977 2d70 2e31 2e34 2f31 7273 2f63 6f63     wip-1.4.1/src/co
  40a794:	6572 6d2f 6d65 2e70 0063 0000 656d 706d     re/memp.c...memp
  40a7a4:	6d5f 6c61 6f6c 3a63 7420 7079 2065 203c     _malloc: type < 
  40a7b4:	454d 504d 4d5f 5841 0000 0000 7341 6573     MEMP_MAX....Asse
  40a7c4:	7472 6f69 206e 2522 2273 6620 6961 656c     rtion "%s" faile
  40a7d4:	2064 7461 6c20 6e69 2065 6425 6920 206e     d at line %d in 
  40a7e4:	7325 000a                                   %s..

0040a7e8 <memp_num>:
  40a7e8:	0004 0001 0002 0001 0008 0002 0003 0002     ................
  40a7f8:	0004 0000                                   ....

0040a7fc <memp_sizes>:
  40a7fc:	001c 0020 0098 001c 0014 0020 0010 0010     .. ....... .....
  40a80c:	0610 0000 6828 2120 203d 554e 4c4c 2029     ....(h != NULL) 
  40a81c:	2626 2820 2074 3d21 4e20 4c55 294c 2820     && (t != NULL) (
  40a82c:	7270 676f 6172 6d6d 7265 7620 6f69 616c     programmer viola
  40a83c:	6574 2073 5041 2949 0000 0000 6270 6675     tes API)....pbuf
  40a84c:	635f 706f 3a79 7420 7261 6567 2074 6f6e     _copy: target no
  40a85c:	2074 6962 2067 6e65 756f 6867 7420 206f     t big enough to 
  40a86c:	6f68 646c 7320 756f 6372 0065 5f70 6f74     hold source.p_to
  40a87c:	2120 203d 554e 4c4c 0000 0000 6270 6675      != NULL....pbuf
  40a88c:	635f 706f 2879 2029 6f64 7365 6e20 746f     _copy() does not
  40a89c:	6120 6c6c 776f 7020 6361 656b 2074 7571      allow packet qu
  40a8ac:	7565 7365 0a21 0000 6270 6675 635f 706f     eues!...pbuf_cop
  40a8bc:	5f79 6170 7472 6169 3a6c 6920 766e 6c61     y_partial: inval
  40a8cc:	6469 6220 6675 0000 6270 6675 635f 706f     id buf..pbuf_cop
  40a8dc:	5f79 6170 7472 6169 3a6c 6920 766e 6c61     y_partial: inval
  40a8ec:	6469 6420 7461 7061 7274 0000 2e2e 732f     id dataptr..../s
  40a8fc:	6372 412f 4653 742f 6968 6472 6170 7472     rc/ASF/thirdpart
  40a90c:	2f79 776c 7069 6c2f 6977 2d70 2e31 2e34     y/lwip/lwip-1.4.
  40a91c:	2f31 7273 2f63 6f63 6572 702f 7562 2e66     1/src/core/pbuf.
  40a92c:	0063 0000 6e69 7263 6d65 6e65 5f74 616d     c...increment_ma
  40a93c:	6e67 7469 6475 2065 3d3c 7020 3e2d 656c     gnitude <= p->le
  40a94c:	006e 0000 4c43 534f 4445 0000 494c 5453     n...CLOSED..LIST
  40a95c:	4e45 0000 5953 5f4e 4553 544e 0000 0000     EN..SYN_SENT....
  40a96c:	5953 5f4e 4352 4456 0000 0000 5345 4154     SYN_RCVD....ESTA
  40a97c:	4c42 5349 4548 0044 4946 5f4e 4157 5449     BLISHED.FIN_WAIT
  40a98c:	315f 0000 4946 5f4e 4157 5449 325f 0000     _1..FIN_WAIT_2..
  40a99c:	4c43 534f 5f45 4157 5449 0000 4c43 534f     CLOSE_WAIT..CLOS
  40a9ac:	4e49 0047 414c 5453 415f 4b43 0000 0000     ING.LAST_ACK....
  40a9bc:	4954 454d 575f 4941 0054 0000 6374 5f70     TIME_WAIT...tcp_
  40a9cc:	6c61 6f6c 3a63 6b20 6c69 696c 676e 6f20     alloc: killing o
  40a9dc:	6666 6f20 646c 7365 2074 4954 454d 572d     ff oldest TIME-W
  40a9ec:	4941 2054 6f63 6e6e 6365 6974 6e6f 000a     AIT connection..
  40a9fc:	6374 5f70 696b 6c6c 745f 6d69 7765 6961     tcp_kill_timewai
  40aa0c:	3a74 6b20 6c69 696c 676e 6f20 646c 7365     t: killing oldes
  40aa1c:	2074 4954 454d 572d 4941 2054 4350 2042     t TIME-WAIT PCB 
  40aa2c:	7025 2820 6425 0a29 0000 0000 6374 5f70     %p (%d).....tcp_
  40aa3c:	6c61 6f6c 3a63 6b20 6c69 696c 676e 6320     alloc: killing c
  40aa4c:	6e6f 656e 7463 6f69 206e 6977 6874 7020     onnection with p
  40aa5c:	6972 206f 6f6c 6577 2072 6874 6e61 2520     rio lower than %
  40aa6c:	0a64 0000 6374 5f70 696b 6c6c 705f 6972     d...tcp_kill_pri
  40aa7c:	3a6f 6b20 6c69 696c 676e 6f20 646c 7365     o: killing oldes
  40aa8c:	2074 4350 2042 7025 2820 6425 0a29 0000     t PCB %p (%d)...

0040aa9c <tcp_backoff>:
  40aa9c:	0201 0403 0605 0707 0707 0707 0007 0000     ................
  40aaac:	2e2e 732f 6372 412f 4653 742f 6968 6472     ../src/ASF/third
  40aabc:	6170 7472 2f79 776c 7069 6c2f 6977 2d70     party/lwip/lwip-
  40aacc:	2e31 2e34 2f31 7273 2f63 6f63 6572 742f     1.4.1/src/core/t
  40aadc:	7063 632e 0000 0000 6374 5f70 6962 646e     cp.c....tcp_bind
  40aaec:	203a 6163 206e 6e6f 796c 6220 6e69 2064     : can only bind 
  40aafc:	6e69 7320 6174 6574 4320 4f4c 4553 0044     in state CLOSED.
  40ab0c:	6374 5f70 6962 646e 203a 6962 646e 7420     tcp_bind: bind t
  40ab1c:	206f 6f70 7472 2520 7568 000a 6374 5f70     o port %hu..tcp_
  40ab2c:	6c63 736f 3a65 6320 6f6c 6973 676e 6920     close: closing i
  40ab3c:	206e 0000 4354 2050 6568 6461 7265 0a3a     n ..TCP header:.
  40ab4c:	0000 0000 2d2b 2d2d 2d2d 2d2d 2d2d 2d2d     ....+-----------
  40ab5c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
  40ab6c:	2d2d 2d2d 0a2b 0000 207c 2020 2520 6835     ----+...|    %5h
  40ab7c:	2075 2020 2020 7c20 2020 2020 3525 7568     u      |    %5hu
  40ab8c:	2020 2020 2020 207c 7328 6372 7020 726f           | (src por
  40ab9c:	2c74 6420 7365 2074 6f70 7472 0a29 0000     t, dest port)...
  40abac:	207c 2020 2020 2020 2020 2020 3025 3031     |           %010
  40abbc:	2075 2020 2020 2020 2020 7c20 2820 6573     u          | (se
  40abcc:	2071 6f6e 0a29 0000 207c 2020 2020 2020     q no)...|       
  40abdc:	2020 2020 3025 3031 2075 2020 2020 2020         %010u       
  40abec:	2020 7c20 2820 6361 206b 6f6e 0a29 0000        | (ack no)...
  40abfc:	207c 3225 7568 7c20 2020 7c20 6825 2575     | %2hu |   |%hu%
  40ac0c:	7568 6825 2575 7568 6825 2575 7568 207c     hu%hu%hu%hu%hu| 
  40ac1c:	2020 2020 3525 7568 2020 2020 7c20 2820         %5hu     | (
  40ac2c:	6468 6c72 6e65 202c 6c66 6761 2073 0028     hdrlen, flags (.
  40ac3c:	2c29 7720 6e69 0a29 0000 0000 207c 2020     ), win).....|   
  40ac4c:	3020 2578 3430 7868 2020 2020 7c20 2020      0x%04hx     |  
  40ac5c:	2020 2520 6835 2075 2020 2020 207c 6328        %5hu     | (c
  40ac6c:	6b68 7573 2c6d 7520 6772 2970 000a 0000     hksum, urgp)....
  40ac7c:	4946 204e 0000 0000 5953 204e 0000 0000     FIN ....SYN ....
  40ac8c:	5352 2054 0000 0000 5350 2048 0000 0000     RST ....PSH ....
  40ac9c:	4341 204b 0000 0000 5255 2047 0000 0000     ACK ....URG ....
  40acac:	4345 2045 0000 0000 5743 2052 0000 0000     ECE ....CWR ....
  40acbc:	7453 7461 3a65 2520 0a73 0000 6374 5f70     State: %s...tcp_
  40accc:	6166 7473 6d74 3a72 6420 6c65 7961 6465     fasttmr: delayed
  40acdc:	4120 4b43 000a 0000 6374 5f70 696c 7473      ACK....tcp_list
  40acec:	6e65 203a 6370 2062 6c61 6572 6461 2079     en: pcb already 
  40acfc:	6f63 6e6e 6365 6574 0064 0000               connected...

0040ad08 <tcp_pcb_lists>:
  40ad08:	49d4 2040 49dc 2040 49cc 2040 49e0 2040     .I@ .I@ .I@ .I@ 
  40ad18:	6374 5f70 6370 5f62 7570 6772 0a65 0000     tcp_pcb_purge...
  40ad28:	6374 5f70 6370 5f62 7570 6772 3a65 6420     tcp_pcb_purge: d
  40ad38:	7461 2061 656c 7466 6f20 206e 3e2d 6572     ata left on ->re
  40ad48:	7566 6573 5f64 6164 6174 000a 6374 5f70     fused_data..tcp_
  40ad58:	6370 5f62 7570 6772 3a65 6e20 746f 6120     pcb_purge: not a
  40ad68:	6c6c 6420 7461 2061 6573 746e 000a 0000     ll data sent....
  40ad78:	6374 5f70 6370 5f62 7570 6772 3a65 6420     tcp_pcb_purge: d
  40ad88:	7461 2061 656c 7466 6f20 206e 3e2d 6e75     ata left on ->un
  40ad98:	6361 656b 0a64 0000 6374 5f70 6370 5f62     acked...tcp_pcb_
  40ada8:	7570 6772 3a65 6420 7461 2061 656c 7466     purge: data left
  40adb8:	6f20 206e 3e2d 6f6f 6573 0a71 0000 0000      on ->ooseq.....

0040adc8 <tcp_persist_backoff>:
  40adc8:	0603 180c 6030 0078 6374 5f70 6572 7663     ....0`x.tcp_recv
  40add8:	6465 203a 6572 7663 6965 6576 2064 6825     ed: recveived %h
  40ade8:	2075 7962 6574 2c73 7720 646e 2520 7568     u bytes, wnd %hu
  40adf8:	2820 6825 2975 0a2e 0000 0000 6374 5f70      (%hu)......tcp_
  40ae08:	6c73 776f 6d74 3a72 6e20 206f 6361 6974     slowtmr: no acti
  40ae18:	6576 7020 6263 0a73 0000 0000 6374 5f70     ve pcbs.....tcp_
  40ae28:	6c73 776f 6d74 3a72 7020 6f72 6563 7373     slowtmr: process
  40ae38:	6e69 2067 6361 6974 6576 7020 6263 000a     ing active pcb..
  40ae48:	6374 5f70 6c73 776f 6d74 3a72 6d20 7861     tcp_slowtmr: max
  40ae58:	5320 4e59 7220 7465 6972 7365 7220 6165      SYN retries rea
  40ae68:	6863 6465 000a 0000 6374 5f70 6c73 776f     ched....tcp_slow
  40ae78:	6d74 3a72 6d20 7861 4420 5441 2041 6572     tmr: max DATA re
  40ae88:	7274 6569 2073 6572 6361 6568 0a64 0000     tries reached...
  40ae98:	6374 5f70 6c73 776f 6d74 3a72 7220 6d65     tcp_slowtmr: rem
  40aea8:	766f 6e69 2067 6370 2062 7473 6375 206b     oving pcb stuck 
  40aeb8:	6e69 4620 4e49 572d 4941 2d54 0a32 0000     in FIN-WAIT-2...
  40aec8:	6374 5f70 6c73 776f 6d74 3a72 4b20 4545     tcp_slowtmr: KEE
  40aed8:	4150 494c 4556 7420 6d69 6f65 7475 202e     PALIVE timeout. 
  40aee8:	6241 726f 6974 676e 6320 6e6f 656e 7463     Aborting connect
  40aef8:	6f69 206e 6f74 2520 7568 252e 7568 252e     ion to %hu.%hu.%
  40af08:	7568 252e 7568 0a2e 0000 0000 6374 5f70     hu.%hu......tcp_
  40af18:	6c73 776f 6d74 3a72 7220 6d65 766f 6e69     slowtmr: removin
  40af28:	2067 6370 2062 7473 6375 206b 6e69 5320     g pcb stuck in S
  40af38:	4e59 522d 5643 0a44 0000 0000 6374 5f70     YN-RCVD.....tcp_
  40af48:	6c73 776f 6d74 3a72 7220 6d65 766f 6e69     slowtmr: removin
  40af58:	2067 6370 2062 7473 6375 206b 6e69 4c20     g pcb stuck in L
  40af68:	5341 2d54 4341 0a4b 0000 0000 6374 5f70     AST-ACK.....tcp_
  40af78:	6c73 776f 6d74 3a72 7020 6c6f 696c 676e     slowtmr: polling
  40af88:	6120 7070 696c 6163 6974 6e6f 000a 0000      application....

0040af98 <tcp_state_str>:
  40af98:	a950 0040 a958 0040 a960 0040 a96c 0040     P.@.X.@.`.@.l.@.
  40afa8:	a978 0040 a984 0040 a990 0040 a99c 0040     x.@...@...@...@.
  40afb8:	a9a8 0040 a9b0 0040 a9bc 0040 4354 2050     ..@...@...@.TCP 
  40afc8:	6f63 6e6e 6365 6974 6e6f 7220 7165 6575     connection reque
  40afd8:	7473 2520 7568 2d20 203e 6825 2e75 000a     st %hu -> %hu...
  40afe8:	6374 5f70 696c 7473 6e65 695f 706e 7475     tcp_listen_input
  40aff8:	203a 6f63 6c75 2064 6f6e 2074 6c61 6f6c     : could not allo
  40b008:	6163 6574 5020 4243 000a 0000 6374 5f70     cate PCB....tcp_
  40b018:	7270 636f 7365 3a73 7520 616e 6363 7065     process: unaccep
  40b028:	6174 6c62 2065 6572 6573 2074 6573 6e71     table reset seqn
  40b038:	206f 7525 7220 7663 6e5f 7478 2520 0a75     o %u rcv_nxt %u.
  40b048:	0000 0000 4354 2050 6f63 6e6e 6365 6974     ....TCP connecti
  40b058:	6e6f 6520 7473 6261 696c 6873 6465 2520     on established %
  40b068:	7568 2d20 203e 6825 2e75 000a 4354 2050     hu -> %hu...TCP 
  40b078:	6f63 6e6e 6365 6974 6e6f 6320 6f6c 6573     connection close
  40b088:	3a64 4620 4e49 575f 4941 5f54 2031 6825     d: FIN_WAIT_1 %h
  40b098:	2075 3e2d 2520 7568 0a2e 0000 4354 2050     u -> %hu....TCP 
  40b0a8:	6f63 6e6e 6365 6974 6e6f 6320 6f6c 6573     connection close
  40b0b8:	3a64 4620 4e49 575f 4941 5f54 2032 6825     d: FIN_WAIT_2 %h
  40b0c8:	2075 3e2d 2520 7568 0a2e 0000 4354 2050     u -> %hu....TCP 
  40b0d8:	6f63 6e6e 6365 6974 6e6f 6320 6f6c 6573     connection close
  40b0e8:	3a64 4320 4f4c 4953 474e 2520 7568 2d20     d: CLOSING %hu -
  40b0f8:	203e 6825 2e75 000a 4354 2050 6f63 6e6e     > %hu...TCP conn
  40b108:	6365 6974 6e6f 6320 6f6c 6573 3a64 4c20     ection closed: L
  40b118:	5341 5f54 4341 204b 6825 2075 3e2d 2520     AST_ACK %hu -> %
  40b128:	7568 0a2e 0000 0000 6374 5f70 656b 7065     hu......tcp_keep
  40b138:	6c61 7669 3a65 7320 6e65 6964 676e 4b20     alive: sending K
  40b148:	4545 4150 494c 4556 7020 6f72 6562 7420     EEPALIVE probe t
  40b158:	206f 6825 2e75 6825 2e75 6825 2e75 6825     o %hu.%hu.%hu.%h
  40b168:	0a75 0000 6374 5f70 656b 7065 6c61 7669     u...tcp_keepaliv
  40b178:	3a65 7420 7063 745f 6369 736b 2520 2075     e: tcp_ticks %u 
  40b188:	2020 6370 2d62 743e 726d 2520 2075 6370       pcb->tmr %u pc
  40b198:	2d62 6b3e 6565 5f70 6e63 5f74 6573 746e     b->keep_cnt_sent
  40b1a8:	2520 7568 000a 0000 6374 5f70 656b 7065      %hu....tcp_keep
  40b1b8:	6c61 7669 3a65 6320 756f 646c 6e20 746f     alive: could not
  40b1c8:	6120 6c6c 636f 7461 2065 656d 6f6d 7972      allocate memory
  40b1d8:	6620 726f 7020 7562 0a66 0000 6374 5f70      for pbuf...tcp_
  40b1e8:	656b 7065 6c61 7669 3a65 7320 7165 6f6e     keepalive: seqno
  40b1f8:	2520 2075 6361 6e6b 206f 7525 0a2e 0000      %u ackno %u....
  40b208:	6374 5f70 7372 3a74 6320 756f 646c 6e20     tcp_rst: could n
  40b218:	746f 6120 6c6c 636f 7461 2065 656d 6f6d     ot allocate memo
  40b228:	7972 6620 726f 7020 7562 0a66 0000 0000     ry for pbuf.....
  40b238:	2e2e 732f 6372 412f 4653 742f 6968 6472     ../src/ASF/third
  40b248:	6170 7472 2f79 776c 7069 6c2f 6977 2d70     party/lwip/lwip-
  40b258:	2e31 2e34 2f31 7273 2f63 6f63 6572 742f     1.4.1/src/core/t
  40b268:	7063 6f5f 7475 632e 0000 0000 6374 5f70     cp_out.c....tcp_
  40b278:	7277 7469 3a65 6120 6772 3d20 203d 554e     write: arg == NU
  40b288:	4c4c 2820 7270 676f 6172 6d6d 7265 7620     LL (programmer v
  40b298:	6f69 616c 6574 2073 5041 2949 0000 0000     iolates API)....
  40b2a8:	6374 5f70 657a 6f72 775f 6e69 6f64 5f77     tcp_zero_window_
  40b2b8:	7270 626f 3a65 7320 6e65 6964 676e 5a20     probe: sending Z
  40b2c8:	5245 204f 4957 444e 574f 7020 6f72 6562     ERO WINDOW probe
  40b2d8:	7420 206f 6825 2e75 6825 2e75 6825 2e75      to %hu.%hu.%hu.
  40b2e8:	6825 0a75 0000 0000 6374 5f70 657a 6f72     %hu.....tcp_zero
  40b2f8:	775f 6e69 6f64 5f77 7270 626f 3a65 7420     _window_probe: t
  40b308:	7063 745f 6369 736b 2520 2075 2020 6370     cp_ticks %u   pc
  40b318:	2d62 743e 726d 2520 2075 6370 2d62 6b3e     b->tmr %u pcb->k
  40b328:	6565 5f70 6e63 5f74 6573 746e 2520 7568     eep_cnt_sent %hu
  40b338:	000a 0000 6374 5f70 657a 6f72 775f 6e69     ....tcp_zero_win
  40b348:	6f64 5f77 7270 626f 3a65 6e20 206f 656d     dow_probe: no me
  40b358:	6f6d 7972 6620 726f 7020 7562 0a66 0000     mory for pbuf...
  40b368:	6374 5f70 657a 6f72 775f 6e69 6f64 5f77     tcp_zero_window_
  40b378:	7270 626f 3a65 7320 7165 6f6e 2520 2075     probe: seqno %u 
  40b388:	6361 6e6b 206f 7525 0a2e 0000               ackno %u....

0040b394 <ethbroadcast>:
  40b394:	ffff ffff ffff 0000 2e2e 732f 6372 412f     ........../src/A
  40b3a4:	4653 742f 6968 6472 6170 7472 2f79 776c     SF/thirdparty/lw
  40b3b4:	7069 6c2f 6977 2d70 2e31 2e34 2f31 7273     ip/lwip-1.4.1/sr
  40b3c4:	2f63 656e 6974 2f66 7465 6168 7072 632e     c/netif/etharp.c
  40b3d4:	0000 0000 656e 6974 2066 3d21 4e20 4c55     ....netif != NUL
  40b3e4:	004c 0000                                   L...

0040b3e8 <ethzero>:
	...
  40b3f0:	7453 7461 6369 4920 2050 6441 7264 7365     Static IP Addres
  40b400:	2073 7341 6973 6e67 6465 0a0d 0000 0000     s Assigned......
  40b410:	654e 7774 726f 206b 7075 2520 0d73 000a     Network up %s...
  40b420:	654e 7774 726f 206b 6f64 6e77 0a0d 0000     Network down....

0040b430 <data_404_html>:
  40b430:	5448 5054 312f 302e 3420 3430 4620 6c69     HTTP/1.0 404 Fil
  40b440:	2065 6f6e 2074 6f66 6e75 0d64 530a 7265     e not found..Ser
  40b450:	6576 3a72 6c20 4977 2f50 7270 2d65 2e30     ver: lwIP/pre-0.
  40b460:	2036 6828 7474 3a70 2f2f 7777 2e77 6973     6 (http://www.si
  40b470:	7363 732e 2f65 617e 6164 2f6d 776c 7069     cs.se/~adam/lwip
  40b480:	292f 0a0d 6f43 746e 6e65 2d74 7974 6570     /)..Content-type
  40b490:	203a 6574 7478 682f 6d74 0d6c 0d0a 3c0a     : text/html....<
  40b4a0:	7468 6c6d 0a3e 683c 6165 3e64 743c 7469     html>.<head><tit
  40b4b0:	656c 6c3e 4977 2050 202d 2041 694c 6867     le>lwIP - A Ligh
  40b4c0:	7774 6965 6867 2074 4354 2f50 5049 5320     tweight TCP/IP S
  40b4d0:	6174 6b63 2f3c 6974 6c74 3e65 2f3c 6568     tack</title></he
  40b4e0:	6461 0a3e 623c 646f 2079 6762 6f63 6f6c     ad>.<body bgcolo
  40b4f0:	3d72 7722 6968 6574 2022 6574 7478 223d     r="white" text="
  40b500:	6c62 6361 226b 0a3e 200a 2020 3c20 6174     black">..    <ta
  40b510:	6c62 2065 6977 7464 3d68 3122 3030 2225     ble width="100%"
  40b520:	0a3e 2020 2020 2020 743c 2072 6176 696c     >.      <tr vali
  40b530:	6e67 223d 6f74 2270 3c3e 6474 7720 6469     gn="top"><td wid
  40b540:	6874 223d 3038 3e22 2009 0a20 2009 3c20     th="80">.  ..  <
  40b550:	2061 7268 6665 223d 7468 7074 2f3a 772f     a href="http://w
  40b560:	7777 732e 6369 2e73 6573 222f 3c3e 6d69     ww.sics.se/"><im
  40b570:	2067 7273 3d63 6922 676d 732f 6369 2e73     g src="img/sics.
  40b580:	6967 2266 090a 2020 6f62 6472 7265 223d     gif"..  border="
  40b590:	2230 6120 746c 223d 4953 5343 6c20 676f     0" alt="SICS log
  40b5a0:	226f 7420 7469 656c 223d 4953 5343 6c20     o" title="SICS l
  40b5b0:	676f 226f 3c3e 612f 0a3e 3c09 742f 3e64     ogo"></a>..</td>
  40b5c0:	743c 2064 6977 7464 3d68 3522 3030 3e22     <td width="500">
  40b5d0:	2009 0a20 2009 3c20 3168 6c3e 4977 2050     .  ..  <h1>lwIP 
  40b5e0:	202d 2041 694c 6867 7774 6965 6867 2074     - A Lightweight 
  40b5f0:	4354 2f50 5049 5320 6174 6b63 2f3c 3168     TCP/IP Stack</h1
  40b600:	0a3e 2009 3c20 3268 343e 3430 2d20 5020     >..  <h2>404 - P
  40b610:	6761 2065 6f6e 2074 6f66 6e75 3c64 682f     age not found</h
  40b620:	3e32 090a 2020 703c 0a3e 2009 2020 5320     2>..  <p>..    S
  40b630:	726f 7972 202c 6874 2065 6170 6567 7920     orry, the page y
  40b640:	756f 6120 6572 7220 7165 6575 7473 6e69     ou are requestin
  40b650:	2067 6177 2073 6f6e 2074 6f66 6e75 2064     g was not found 
  40b660:	6e6f 7420 6968 0a73 2009 2020 7320 7265     on this..    ser
  40b670:	6576 2e72 0a20 2009 3c20 702f 0a3e 3c09     ver. ..  </p>..<
  40b680:	742f 3e64 743c 3e64 090a 2020 6e26 7362     /td><td>..  &nbs
  40b690:	3b70 090a 2f3c 6474 3c3e 742f 3e72 200a     p;..</td></tr>. 
  40b6a0:	2020 2020 3c20 742f 6261 656c 0a3e 2f3c          </table>.</
  40b6b0:	6f62 7964 0a3e 2f3c 7468 6c6d 0a3e 0000     body>.</html>...

0040b6c0 <data_img_sics_gif>:
  40b6c0:	5448 5054 312f 302e 3220 3030 4f20 0d4b     HTTP/1.0 200 OK.
  40b6d0:	530a 7265 6576 3a72 6c20 4977 2f50 7270     .Server: lwIP/pr
  40b6e0:	2d65 2e30 2036 6828 7474 3a70 2f2f 7777     e-0.6 (http://ww
  40b6f0:	2e77 6973 7363 732e 2f65 617e 6164 2f6d     w.sics.se/~adam/
  40b700:	776c 7069 292f 0a0d 6f43 746e 6e65 2d74     lwip/)..Content-
  40b710:	7974 6570 203a 6d69 6761 2f65 6967 0d66     type: image/gif.
  40b720:	0d0a 470a 4649 3938 4661 2200 a500 0000     ...GIF89aF."....
  40b730:	2bd9 6a39 6a6a bfbf 93bf 9393 0f0f b00f     .+9jjj..........
  40b740:	b0b0 a6a6 80a6 8080 7676 1e76 1e1e 9d9d     ........vvv.....
  40b750:	2e9d 2e2e 4949 5449 5454 8a8a 608a 6060     ....IIITTT...```
  40b760:	a6c6 bd99 b2b5 abc2 d9a1 4041 67d5 c055     ..........A@.gU.
  40b770:	aab0 5ed5 d64e 4550 93cc c87d 90a1 8bce     ...^N.PE..}.....
  40b780:	d276 657b 84d1 c96d 8699 3a3a 003a 0000     v.{e..m...:::...
  40b790:	b8b8 ffb8 ffff ffff ffff ffff ffff ffff     ................
  40b7a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
  40b7b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
  40b7c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
  40b7d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
  40b7e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
  40b7f0:	002c 0000 4600 2200 0000 fe06 9040 4870     ,....F."....@.pH
  40b800:	1a2c c88f 72a4 6cc9 9f3a a8d0 4a74 5aad     ,....r.l:...tJ.Z
  40b810:	d8af 76ac 40a9 be04 e283 3c60 2050 8e0d     ...v.@....`<P ..
  40b820:	006f 2831 0d1c b507 60c3 2475 f83e 87fc     o.1(.....`u$>...
  40b830:	0611 3de9 0746 7a0b 7c7a 0643 841e 0b78     ...=F..zz|C...x.
  40b840:	6e07 0151 848a 7e08 8079 8987 7a91 0a93     .nQ....~y....z..
  40b850:	9904 9678 034f 799e 9401 439f a39c 05a4     ..x.O..y...C....
  40b860:	a377 4ea0 7998 1e0b a483 1fa6 0596 aa9d     w..N.y..........
  40b870:	0178 8407 1e04 bb1e 51b8 0e84 0543 7707     x........Q..C..w
  40b880:	7fa5 b142 01b2 0863 bb0d 0c01 0d7a 0e44     ..B...c.....z.D.
  40b890:	afd8 054c 047a 0747 b707 a280 7de1 0544     ..L.z.G......}D.
  40b8a0:	0401 d001 87ea 4f93 9ae0 ce49 79d8 6604     .......O..I..y.f
  40b8b0:	1520 1010 9211 8029 c0b6 1591 1e45 1990      .....).....E...
  40b8c0:	4671 5ca8 0e04 2200 e84e 2440 3e9f 0604     qF.\..."N.@$.>..
  40b8d0:	58a7 93d4 1ca0 3f91 f0e8 0388 21b1 49a2     .X.....?.....!.I
  40b8e0:	1900 fc86 4452 01e0 299d 1521 5025 67f7     ....RD...)!.%P.g
  40b8f0:	1e25 fd06 9a4e 90b4 15ac cbfa 5352 8c1e     %...N.......RS..
  40b900:	f8f2 9207 082d 4d3a 4912 4995 14db c404     ....-.:M.I.I....
  40b910:	8514 aa29 01e7 a408 0149 5114 53e0 d591     ..).....I..Q.S..
  40b920:	0629 641a f402 81c7 059e 2220 a564 ae30     )..d...... "d.0.
  40b930:	9eab 5397 b9d8 50fd 93ef 4202 3474 9ce8     ...S...P...Bt4..
  40b940:	2120 01c9 7868 55e6 2029 4f56 404c 7151      !..hx.U) VOL@Qq
  40b950:	c082 2170 8522 4bbe 441c ea05 01a4 22bf     ..p!"..K.D....."
  40b960:	f0b5 061c 3851 e08f ec22 ac18 2239 d6d4     ....Q8.."...9"..
  40b970:	4493 3201 c882 61fc 01b3 0c45 832e d030     .D.2...a..E...0.
  40b980:	170e 0f24 8570 ee94 0505 4b53 1b32 983f     ..$.p.....SK2.?.
  40b990:	1dd3 8129 aeb0 8c1e 687e 60e0 545a b08f     ..).....~h.`ZT..
  40b9a0:	6978 0673 00a2 576b 3dca 5011 04bd 4b30     xis...kW.=.P..0K
  40b9b0:	d43a 5fab 9b1f 133d 2774 3c88 e025 be17     :.._..=.t'.<%...
  40b9c0:	797a 0d45 b00c da8b ca90 0680 175d 1c60     zyE.........].`.
  40b9d0:	4c22 57d8 0622 0020 0798 e408 8056 1c80     "L.W". .....V...
  40b9e0:	b7c5 82c5 360c e0e8 1083 2846 84e1 5614     .....6....F(...V
  40b9f0:	a168 4110 0000 003b                         h..A..;.

0040b9f8 <data_index_html>:
  40b9f8:	5448 5054 312f 302e 3220 3030 4f20 0d4b     HTTP/1.0 200 OK.
  40ba08:	530a 7265 6576 3a72 6c20 4977 2f50 7270     .Server: lwIP/pr
  40ba18:	2d65 2e30 2036 6828 7474 3a70 2f2f 7777     e-0.6 (http://ww
  40ba28:	2e77 6973 7363 732e 2f65 617e 6164 2f6d     w.sics.se/~adam/
  40ba38:	776c 7069 292f 0a0d 6f43 746e 6e65 2d74     lwip/)..Content-
  40ba48:	7974 6570 203a 6574 7478 682f 6d74 0d6c     type: text/html.
  40ba58:	0d0a 3c0a 7468 6c6d 0a3e 683c 6165 3e64     ...<html>.<head>
  40ba68:	743c 7469 656c 6c3e 4977 2050 202d 2041     <title>lwIP - A 
  40ba78:	694c 6867 7774 6965 6867 2074 4354 2f50     Lightweight TCP/
  40ba88:	5049 5320 6174 6b63 2f3c 6974 6c74 3e65     IP Stack</title>
  40ba98:	2f3c 6568 6461 0a3e 623c 646f 2079 6762     </head>.<body bg
  40baa8:	6f63 6f6c 3d72 7722 6968 6574 2022 6574     color="white" te
  40bab8:	7478 223d 6c62 6361 226b 0a3e 200a 2020     xt="black">..   
  40bac8:	3c20 6174 6c62 2065 6977 7464 3d68 3122      <table width="1
  40bad8:	3030 2225 0a3e 2020 2020 2020 743c 2072     00%">.      <tr 
  40bae8:	6176 696c 6e67 223d 6f74 2270 3c3e 6474     valign="top"><td
  40baf8:	7720 6469 6874 223d 3038 3e22 2009 0a20      width="80">.  .
  40bb08:	2009 3c20 2061 7268 6665 223d 7468 7074     .  <a href="http
  40bb18:	2f3a 772f 7777 732e 6369 2e73 6573 222f     ://www.sics.se/"
  40bb28:	3c3e 6d69 2067 7273 3d63 6922 676d 732f     ><img src="img/s
  40bb38:	6369 2e73 6967 2266 090a 2020 6f62 6472     ics.gif"..  bord
  40bb48:	7265 223d 2230 6120 746c 223d 4953 5343     er="0" alt="SICS
  40bb58:	6c20 676f 226f 7420 7469 656c 223d 4953      logo" title="SI
  40bb68:	5343 6c20 676f 226f 3c3e 612f 0a3e 3c09     CS logo"></a>..<
  40bb78:	742f 3e64 743c 2064 6977 7464 3d68 3522     /td><td width="5
  40bb88:	3030 3e22 2009 0a20 2009 3c20 3168 6c3e     00">.  ..  <h1>l
  40bb98:	4977 2050 202d 2041 694c 6867 7774 6965     wIP - A Lightwei
  40bba8:	6867 2074 4354 2f50 5049 5320 6174 6b63     ght TCP/IP Stack
  40bbb8:	2f3c 3168 0a3e 2009 3c20 3e70 090a 2020     </h1>..  <p>..  
  40bbc8:	2020 6854 2065 6577 2062 6170 6567 7920       The web page y
  40bbd8:	756f 6120 6572 7720 7461 6863 6e69 2067     ou are watching 
  40bbe8:	6177 2073 6573 7672 6465 6220 2079 2061     was served by a 
  40bbf8:	6973 706d 656c 7720 6265 090a 2020 2020     simple web..    
  40bc08:	6573 7672 7265 7220 6e75 696e 676e 6f20     server running o
  40bc18:	206e 6f74 2070 666f 7420 6568 6c20 6769     n top of the lig
  40bc28:	7468 6577 6769 7468 5420 5043 492f 2050     htweight TCP/IP 
  40bc38:	7473 6361 206b 613c 090a 2020 2020 7268     stack <a..    hr
  40bc48:	6665 223d 7468 7074 2f3a 772f 7777 732e     ef="http://www.s
  40bc58:	6369 2e73 6573 7e2f 6461 6d61 6c2f 6977     ics.se/~adam/lwi
  40bc68:	2f70 3e22 776c 5049 2f3c 3e61 0a2e 2009     p/">lwIP</a>... 
  40bc78:	3c20 702f 0a3e 2009 3c20 3e70 090a 2020      </p>..  <p>..  
  40bc88:	2020 776c 5049 6920 2073 6e61 6f20 6570       lwIP is an ope
  40bc98:	206e 6f73 7275 6563 6920 706d 656c 656d     n source impleme
  40bca8:	746e 7461 6f69 206e 666f 7420 6568 5420     ntation of the T
  40bcb8:	5043 492f 0a50 2009 2020 7020 6f72 6f74     CP/IP..    proto
  40bcc8:	6f63 206c 7573 7469 2065 6874 7461 7720     col suite that w
  40bcd8:	7361 6f20 6972 6967 616e 6c6c 2079 7277     as originally wr
  40bce8:	7469 6574 206e 7962 4120 6164 206d 7544     itten by Adam Du
  40bcf8:	6b6e 6c65 0a73 2009 2020 6f20 2066 6874     nkels..    of th
  40bd08:	2065 7753 6465 7369 2068 6e49 7473 7469     e Swedish Instit
  40bd18:	7475 2065 666f 4320 6d6f 7570 6574 2072     ute of Computer 
  40bd28:	6353 6569 636e 2065 7562 2074 6f6e 2077     Science but now 
  40bd38:	7369 090a 2020 2020 6562 6e69 2067 6361     is..    being ac
  40bd48:	6974 6576 796c 6420 7665 6c65 706f 6465     tively developed
  40bd58:	6220 2079 2061 6574 6d61 6f20 2066 6564      by a team of de
  40bd68:	6576 6f6c 6570 7372 090a 2020 2020 6964     velopers..    di
  40bd78:	7473 6972 7562 6574 2064 6f77 6c72 2d64     stributed world-
  40bd88:	6977 6564 202e 6953 636e 2065 7469 7327     wide. Since it's
  40bd98:	7220 6c65 6165 6573 202c 776c 5049 6820      release, lwIP h
  40bda8:	7361 090a 2020 2020 7073 7275 6572 2064     as..    spurred 
  40bdb8:	2061 6f6c 2074 666f 6920 746e 7265 7365     a lot of interes
  40bdc8:	2074 6e61 2064 6168 2073 6562 6e65 7020     t and has been p
  40bdd8:	726f 6574 2064 6f74 7320 7665 7265 6c61     orted to several
  40bde8:	090a 2020 2020 6c70 7461 6f66 6d72 2073     ..    platforms 
  40bdf8:	6e61 2064 706f 7265 7461 6e69 2067 7973     and operating sy
  40be08:	7473 6d65 2e73 6c20 4977 2050 6163 206e     stems. lwIP can 
  40be18:	6562 7520 6573 2064 6965 6874 7265 090a     be used either..
  40be28:	2020 2020 6977 6874 6f20 2072 6977 6874         with or with
  40be38:	756f 2074 6e61 7520 646e 7265 796c 6e69     out an underlyin
  40be48:	2067 534f 0a2e 2009 3c20 702f 0a3e 2009     g OS...  </p>.. 
  40be58:	3c20 3e70 090a 2020 2020 6854 2065 6f66      <p>..    The fo
  40be68:	7563 2073 666f 7420 6568 6c20 4977 2050     cus of the lwIP 
  40be78:	4354 2f50 5049 6920 706d 656c 656d 746e     TCP/IP implement
  40be88:	7461 6f69 206e 7369 7420 206f 6572 7564     ation is to redu
  40be98:	6563 090a 2020 2020 6874 2065 4152 204d     ce..    the RAM 
  40bea8:	7375 6761 2065 6877 6c69 2065 7473 6c69     usage while stil
  40beb8:	206c 6168 6976 676e 6120 6620 6c75 206c     l having a full 
  40bec8:	6373 6c61 2065 4354 2e50 5420 6968 0a73     scale TCP. This.
  40bed8:	2009 2020 6d20 6b61 7365 6c20 4977 2050     .    makes lwIP 
  40bee8:	7573 7469 6261 656c 6620 726f 7520 6573     suitable for use
  40bef8:	6920 206e 6d65 6562 6464 6465 7320 7379      in embedded sys
  40bf08:	6574 736d 7720 7469 2068 6574 736e 090a     tems with tens..
  40bf18:	2020 2020 666f 6b20 6c69 626f 7479 7365         of kilobytes
  40bf28:	6f20 2066 7266 6565 5220 4d41 6120 646e      of free RAM and
  40bf38:	7220 6f6f 206d 6f66 2072 7261 756f 646e      room for around
  40bf48:	3420 2030 696b 6f6c 7962 6574 0a73 2009      40 kilobytes.. 
  40bf58:	2020 6f20 2066 6f63 6564 5220 4d4f 0a2e        of code ROM..
  40bf68:	2009 3c20 702f 0a3e 2009 3c20 3e70 090a     .  </p>..  <p>..
  40bf78:	2020 2020 6f4d 6572 6920 666e 726f 616d         More informa
  40bf88:	6974 6e6f 6120 6f62 7475 6c20 4977 2050     tion about lwIP 
  40bf98:	6163 206e 6562 6620 756f 646e 6120 2074     can be found at 
  40bfa8:	6874 2065 776c 5049 090a 2020 2020 6f68     the lwIP..    ho
  40bfb8:	656d 6170 6567 6120 2074 613c 090a 2020     mepage at <a..  
  40bfc8:	2020 7268 6665 223d 7468 7074 2f3a 772f       href="http://w
  40bfd8:	7777 732e 6369 2e73 6573 7e2f 6461 6d61     ww.sics.se/~adam
  40bfe8:	6c2f 6977 2f70 3e22 7468 7074 2f3a 772f     /lwip/">http://w
  40bff8:	7777 732e 6369 2e73 6573 7e2f 6461 6d61     ww.sics.se/~adam
  40c008:	6c2f 6977 2f70 2f3c 3e61 0a2e 2009 3c20     /lwip/</a>...  <
  40c018:	702f 0a3e 3c09 742f 3e64 743c 3e64 090a     /p>..</td><td>..
  40c028:	2020 6e26 7362 3b70 090a 2f3c 6474 3c3e       &nbsp;..</td><
  40c038:	742f 3e72 200a 2020 2020 3c20 742f 6261     /tr>.      </tab
  40c048:	656c 0a3e 2f3c 6f62 7964 0a3e 2f3c 7468     le>.</body>.</ht
  40c058:	6c6d 0a3e 000a 0000                         ml>.....

0040c060 <file_404_html>:
  40c060:	c070 0040 c09c 0040 b430 0040 028e 0000     p.@...@.0.@.....

0040c070 <file_img_sics_gif>:
  40c070:	0000 0000 c0a8 0040 b6c0 0040 0337 0000     ......@...@.7...

0040c080 <file_index_html>:
  40c080:	c060 0040 c090 0040 b9f8 0040 0665 0000     `.@...@...@.e...
  40c090:	692f 646e 7865 682e 6d74 006c 342f 3430     /index.html./404
  40c0a0:	682e 6d74 006c 0000 692f 676d 732f 6369     .html.../img/sic
  40c0b0:	2e73 6967 0066 0000 4547 2054 0000 0000     s.gif...GET ....
  40c0c0:	2d2d 5220 7761 4820 5454 2050 6142 6973     -- Raw HTTP Basi
  40c0d0:	2063 7845 6d61 6c70 2065 2d2d 0a0d 2d2d     c Example --..--
  40c0e0:	5320 4d41 3756 2d31 4c58 5254 2041 2d2d      SAMV71-XLTRA --
  40c0f0:	0a0d 2d2d 4320 6d6f 6970 656c 3a64 4d20     ..-- Compiled: M
  40c100:	7261 2020 2038 3032 3032 3120 3a38 3635     ar  8 2020 18:56
  40c110:	353a 2039 2d2d 0a0d 0000 0000               :59 --......

0040c11c <_global_impure_ptr>:
  40c11c:	0038 2040 3130 3332 3534 3736 3938 4241     8.@ 0123456789AB
  40c12c:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  40c13c:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  40c14c:	296c 0000                                   l)..

0040c150 <blanks.7217>:
  40c150:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040c160 <zeroes.7218>:
  40c160:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40c170:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

0040c180 <_ctype_>:
  40c180:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40c190:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40c1a0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40c1b0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40c1c0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40c1d0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40c1e0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40c1f0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40c200:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0040c284 <_init>:
  40c284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c286:	bf00      	nop
  40c288:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40c28a:	bc08      	pop	{r3}
  40c28c:	469e      	mov	lr, r3
  40c28e:	4770      	bx	lr

0040c290 <__init_array_start>:
  40c290:	00408b1d 	.word	0x00408b1d

0040c294 <__frame_dummy_init_array_entry>:
  40c294:	0040018d                                ..@.

0040c298 <_fini>:
  40c298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c29a:	bf00      	nop
  40c29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40c29e:	bc08      	pop	{r3}
  40c2a0:	469e      	mov	lr, r3
  40c2a2:	4770      	bx	lr

0040c2a4 <__fini_array_start>:
  40c2a4:	00400169 	.word	0x00400169
